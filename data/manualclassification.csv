Commit Message,Category
"	NIO Reads writes are completed in the caller thered;
	100% compatible with old interface and functionality.
	Each connection has an instance of this object to
	receive data for a message in multiple OP_READ events.
",functional
"  * temporary fix for non-shared JArray objects
  * added generic unittests to check jcc/lucene/solr/montysolr functionality
  * wrote unittest for newseman (it does a complete processing from python side)
    - now what remains is to call it from java
    - decide on proper behaviour for cases when tokens are added/grouped
",bugfix
" * Java:
   * Added RCON functionality for Source servers:
     * Added steamcondenser.steam.packets.rcon package
     * Added RCONAuthRequestPacket
     * Added RCONAuthResponsePacket
     * Added RCONExecRequestPacket
     * Added RCONExecResponsePacket
     * Added RCONPacket
     * Added RCONNoAuthException
   * Split SteamSocket into QuerySocket and RCONSocket
   * Stub functionality for GoldSrc servers
     * GoldSrc uses UDP and needs a special implementation
   * Added tests
",functional
" - Merge changes from Pull-Request #6 	 - Fix aggregation generation and cleanup dead code  - Update dependencies versions",code smell
 Bug 233643 -  API builder performance bad for incremental build,external
" Deleted obsolete / dead code. - Started a heavy refactoring of the ServiceDescriptionFactory class in order to make it a ""fail fast"" factory to avoid any runtime errors due to misconfiguration.",code smell
 ItEr17S10CUCreacionProxectoPlanificacionItEr16S12: Removing Bean sufix to data classes. To avoid name collisions with the components of the same name  Component is appended.,code smell
 Removed lots of duplicate code  better error reporting due to another logger for traces,code smell
 Rename *.new* packages back to what they should be  remove dead code  from the old packages - mapreduce module - tez-engine module (part of  TEZ-398). (sseth),code smell
 You can now resize the browser size and the screenshots in the reports using the thucydides.browser.width parameter.,internal
#10  #17  #18 Improved test coverage  fixed test cases and bugs revealed by tests  increased performance and improved visitors,external
#135:  Comments InheritanceCompatibilityChecker,internal
#136 Reduce cyclomatic complexity,internal
"#27: ComparatorTypes now accepts 'reversed' qualifiers.

- ComparatorTypes now accepts 'reversed' qualifiers for both simple and
composite types.
- Added unit tests to cover these new features.
- Added integration tests to cover these new features.

See also: https://github.com/jsevellec/cassandra-unit/issues/27

Signed-off-by: Marc CARR+? <carre.marc@gmail.com>
",functional
#305 Modularize logic / separate from data classes (wip – doesn't compile),code smell
"#32 Abnormal execution result if the script has a null character(0x0)

Fixed this bug to be trimmed null characters while saving a script.
But, I didn't consider to handle this when compile a script, so this
fixed didn't be a solution if there has already included a null
character in a script.
",bugfix
"#49 first complete implementation of the HeadlessMapProvider and the required adoptions of the methods getFeatureImage and getImageOfFeatures of the MappingComponent
",functional
#589 - ElasticSearch  Transaction - rename DocStoreMode and batch size methods,internal
#675 refactored the Options/Metadata classes so they can be deserialised in AbstractDataStore; so we can killed containers now,code smell
#943 - Refactor internals - Performance tweak / tidy for WhoCreated  WhoModified on OneToMany connections. #942,external
(PLF-4239) JS of Getting Started portlet not good for performance.,external
"* Add ProvidesMemoryOverhead feature to provide byte overhead for storing cache values
* RandomDataStage
** allow the memory overhead to be set or retrieved from the wrapper featuring ProvidesMemoryOverhead
** allow specifying the total data size, and letting the stage calculate the number of values to put into the cache.
** log the number of words used to generate the string data
* MapReduceStage
** add a parameter to print the result map and object
** ensure that the payload string is always set
",functional
* Added @size attributes to fs:deepfs  fs:dir and fs:file elements * human readable size value for fs:fsSize element,internal
"* Added IoBuffer.minimumCapacity(...)
* Added IoBuffer.shrink()
* Fixed issue: DIRMINA-471 (Reduce SSL buffers overhead)
** The change uses the new feature of 2.0 so it won't be backported to 1.x.

git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@594412 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
"* Added command line arguments:
  -input <inputFileName>   Input file to open in text. editor
  -config <configName>     Configuration to load
  -auto                    Perform emulation automation
  -output <outputFileName> Dump emulation progress to a file.
                           The option has a meaning only with
                           ""-auto"" option.

* Added ""verbose"" setting feature
  The ""verbose"" is a global setting for all plugins with the same
  boolean value - true or false. If a plugin asks for the ""verbose""
  setting, the value of global verbose setting will be returned
  instead of plugin's saved verbose setting.
  The setting has a meaning if the emulation is automated and
  outputs of devices should be redirected to a file rather than
  on screen.
",functional
* Added more to the end2end spike * Created some concrete Phase classes * refactored/renamed phases * removed BasePhase to encourage loose coupling * removed dependency on spring from events module,internal
"* Fixed bug introduced by my previous patch
* Optimized the way requests are re-tried. If a request is submitted over a direct connection, there is no need to regenerate the request wrapper and re-run protocol interceptors on it 


git-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@662030 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
"* Fixed issue with UUID in Resource Path column of exported csv when exporting from workplace tool.
! Support for configuration of line separator.
",bugfix
"* Fixed issues with @FieldDefaults and @Value (you can NOT override
@Value's final-by-default and private-by-default with it; now
appropriate warnings are emitted)
* Builder now errors out on presence of most lombok annotations on an
explicit builder class.
* Builder now takes @FieldDefaults/@Value into account.
* Builder on type now generates the constructor as package private
instead of private to avoid synthetic accessor constructors.
* added a bunch of test cases.
* added a test case feature: If the expected file is omitted entirely
but there are expected messages, the differences in the output itself
are ignored.
* streamlined checking for boolean-ness (removed some duplicate code)
* added 'fluent' and 'chain' to @Builder.
",bugfix
"* If number of substitutions of candidate type is zero, then this type is not removed as it seems to be a root type (fixes #12).
* Conversion to plural form now features better property customisation check.
* Fixed broken argument processing.
* XML marshaller in Unit tests is now schema-enabled. Added more XMLs. Added case for xsd:anyType. Improved line and branch coverage.
* Updates README with respect to future release.",functional
* In alignment-to-text  tsv or tsv-single-base output there was a column for score but no header. added header. * For the QueueObjectPool  made a more generic interface and added a Null version that always creates new objects. This can be used for performance comparisons. * Added another layer of object abstraction GobySamRecord which contains one or more GobySamSegment. Things that exist for the entire read are stored in this object and the parser returns a GobySamRecord instead of a List<GobySamSegment>. This is easier to understand and models the data better. * Discovered a minor error with GobySamSegment sequence variation generation * Added tests from seq-var to verify seqvar during clipping  indels  etc. Make sure gsnap->sam->GobySamParser gets the same output as gsnap->compact-alignment->display-sequence-variations which enabled me to find one more issue with gsnap->compact-alignment seqvar generation related to soft clipping.,external
"* ROI Panel:
 - relaxed mutex for better performance.
 - refresh ROI descriptors when plugin list changed.
* Viewer: display a message when changing canvas.
* ROI: fixed minors issues on contains(ROI) and intersects(ROI) methods.
* minors changes on Plugin update process.
* minors tweaks and changes.",bugfix
"* ROI Panel:
 - splited ROI Descriptor calculation on separate thread (3 threads) so
basic information (as name, position...) are always immediately computed
and visible even if a complex descriptor takes a very long time to
compute.
 - fixed sorting issues.
* Sequence: fixed setColormap(..) method so persistence is not lost in
some case.
* ROI2DArea: fixed XML saving (could be broken if ROI was modified
during ZIP data packing).",bugfix
* Removed a bunch of duplicate code from PictReader * Fixed OpenlabReader to handle openlab/stefan/270508.  Note that this file's images still look wrong (since the file is all kinds of corrupt)  but at least all of the images are detected now.,code smell
"* Undo support:
 - finalized the history (undo) panel with global undo / redo operations
(Ctrl+Z / Ctrl+Y)
 - added undo support to almost all ROI actions from GUI.
 - modified mergeable property so we don't have anymore non significant
undoable edit (easier to manage)
* Loader:
 - improved image preview display when multiple importer are available
 - Loader.loadThumnail(..) now search in all compatible importer
* Loci importer: better retrieving of channel color from metadata
* added the ugly PluginNoEDTConstructor interface to avoid plugin
creation in the swing graphics thread (needed for retro compatibility).
Be careful as some Plugin abstract classes now use this interface.
* disable user link action as others features are not ready yet.
* IcyBufferedImageUtil.convertToType(..) now uses safe type conversion
as we always prefer it (even if it's bit slower).
* added ImageUtil.isGray(image) method to know if the specified RGB
image only contains gray pixels.
* minor fix with internet monitor.
* pre load the importers classes to avoid non responsive UI for some
seconds on first open operation.
* added MetaDataUtil.getChannelColor(..) method
* ROI2DShape: added addNewPoint(..) and removePoint(..) method",bugfix
* code cleanups + Tcl keyword  parser extensibility,external
* fixed formatting issues * broke down complexity of getGenericTypeAwarePropertydescriptor method * refactored names of tests to be more expressive,internal
"* fixing a bug where we were returning null when the triple map was empty, should be just returning the new object
* adding an additional case to the type mismatch test to allow for the cases where it's the same class, but loaded from different class loaders, which makes them !equals().  cuts down on the extraneous warnings.
* additional safeguards around failures in conversions of lists of values to collections
* correction in the javadocs in RdfQuery
* fixing the regex used in RdfQuery to detect unnamed parameters
* adding a utility method to EmpireUtil for getting all the instances of a certain java bean.  Similar to the all() method injected into Play models at runtime.
",bugfix
"* preliminary undo support.
* fixed minor bug in viewer focus change.
* improved ImageUtil.scaleQuality(..) method (better icon quality).
* fixed a minor bug with ROI polygon interaction (removing point while
dragging).
* added Sequence.calculateSize(..) method to help in calculating a
distance / surface from a specified number of pixel.
* search result producer are now sorted.",bugfix
"* refactored to fold DebugST into ST; adds one object ptr to every ST instance but worth reduction in complexity. ""new ST(...)"" calls didn't work (not DebugST objects) in inspector.  ST.inspect() for any ST now. * Fixed bug in STViz. Didn't highlight entire output when you click topmost template. * STGroup.debug no longer there nor static.  It's an instance var of Interpreter.  ST.inspect() tells interp to debug. STGroup.trackCreationEvents says to record where in code an ST was created and where code added attributes. * Gutted tree model for STViz  refactored debugging/event tracking code. * creation events had wrong location (launch of interp location); only tracks now for externally/injected created templates.",internal
* restructured code and package structure for higher cohesion * implemented proxy logic with cglib * fixed bug with introspector  generics and interfaces in java 1.6 * extended and added tests for ReflectUtil and ObjectFactory * added AbstractBeanTest to pull out similarities,internal
"* various bugfixes:
  * restored FormsServlet to version before commit
  * Date: remove debug output
  * Link: implemented readonly mip for outputs rendered as links
  * Dialog: removed action which is breaking the form
  * BfRequiredFull: added missing dependencies for betterform.ui.range.Slider
  * InlineAlert: fixed rendering of inline alerts
  * XFormsFeatureExplorer: added BfRequiredXFormsFeatureExplorer to add addtional JS dijits
",bugfix
"+ add createAggregatorSuffix method to wrap aggregator`s name (more pleasant representation)
- bug fix in MonitoringAggregator
",bugfix
"+ all launch functionality factored out in LaunchUtil
+ generalized parameter solver to work with multiple IJavaElements
+ consistent merging existing launch configurations
+ added behavior for dependsOnGroups (warning displayed)
+ temp suite generation uses core generation
+ TestNG core upgraded to 5.4
----------------------------------------------------------------------
",functional
"+ generify little bit MetricGroupNode
+ extract AbstractTree from ControlTree with ""cascade check - one event"" functionality
+ create LegendTree with specific cell (LegendNodeCell)
",functional
"- #(enh) - Cause assign statements to show the relevant LHS and RHS
expressions
  in the Outline view
  
- #(enh) - Change content-assist proposal for name-mapped
module-instance 
  parameters. Now, a module-port proposal includes the parens and
prompts the
  user to specify the connected net.
  
- #(enh) - Add SVEDITOR as a built-in pre-processor directive. This can
be
  used to disable processing of code that the SVEditor parser does not 
  currently support.
  
- #(nobug) - Corrected a bug where, in some cases, the types declared
local
  to the file being edited were not being searched during content-assist
operations
 
- #(enh) - Add content-assist support for task/function name-mapped
parameters

- #(enh) - Add content-assist support for name-mapped module, interface,
and
  class parameters.
  
",bugfix
"- Add integration test for basic functionality of memcached session manager
- Extract common test functions for integration tests",functional
"- Added New Experiment Profile Types
- Modified COMPOUND efo term
- Updated Experiment Setup Screen
- Updated experiment designs functionality with mapping to attributes
",functional
- Added UNICAST_RetransmitTest to test https://issues.jboss.org/browse/JGRP-1868 - SeqnoList now extends FixedSizeBitSet and uses a bitmap for retransmission (https://issues.jboss.org/browse/JGRP-1868) - NAKACK2  UNICAST3: added max_xmit_req_size - Table.forEach(from to): returns immediately if from > to - Table.getMissing(): returns immediately if size == 0 - Added NAKACK_RetransmitTest,internal
"- Added an abstration of condition expression lanugage (cel) - Added an abstraction of function expression language (fel) - Removed the tight coupling between the bean framework and valang.  - Changed the ""valang"" annotation and element to ""expression"" - Removed the bean expression resolver support (was replaced by fel)",internal
"- Added target for the nearest neighbor finder tool
- Reduced the default timeout for long-running tests

- Added a jaccardIndex overload for two sets of elements

- Fixed javadoc

- Made class serializable

- Added support for maximum path length

- Reworked to use the new SimpleDependencyPath class

- Revised error message for clarity

- Updated to use new SimpleDependencyPath features

- Updated to use new SimpleDependencyPath features

- Major rewrite for clarity

- Fixed toString()

- Added static methods for testing the category of particular POS tag

- Implemented missing methods

- Added more imports (not sure why...)

- Added logging

- Added support for shuffling the edges of a graph using a fixed Random for reproducability

- Multithreaded the edge similarity comparison

- Probably some bug fixes too

- Updated to use IntPair instead of Pair<Integer>

- Updated to use IntSet

- Major overhaul to bring performance in line with the earlier primitive
  collection enhancements

- Probably needs a lot of clean up still

- Updates to use new primitive collections

- Updates to use new primitive collections

- Added support for clustering to a fixed number of clusters

- Added (limited) support for writing in GEXF format

- Added (limited) support for writing in Pajek format

- Made default output verbose

- Remove extra temporary file that was just hanging around unneeded

- Added support for getting the String that backs the document

- Added a new class for testing the association between two terms, which is
  already partially supported by the BigramExtractor, but this class supports
  limiting the number of items being associated which enables better scaling
  through iterative association testing.

- This class needs a lot of work.

- Added an iterator for the documents in WaCkypedia

- Fixed HTML bug in javadoc

- Added new tool for running the NearestNeighborFinder from the command line

- Fixed javadoc

- Added support for changing the loging level of any logger namespace

- Added new tool for speeding up repeated nearest-neighbor computations by
  partitioning a SemanticSpace into clusters (using K-means) and then only
  searching a subset.

- Added support for reading and writing to streams and byte[] arrays

- Updated to be an IntSet

- Added Pair implementation

- Fixed iterator remove bug

- Added more extensive real-world unit tests

- Added unit test details that match the example in the Ahn et al. paper

- Added more tests
",bugfix
"- Adds license and javadoc to the matrix factorizations.
- Includes wrappers around the matlab and octave implementations.
- Abstracts some common SVD functionality to a base class.
- Unit tests NMF and SVD reduction methods.
- Make some helper functions public.
",functional
- Bugzilla Bug (s) Resolved: 284870 284794 - Description: remove and merge duplicate code in multiple places,code smell
"- Do not try to wait the end of current reporting phase, when stopping reporter with externally managed executor, because JDK ScheduledExecutorService does not provide this feature, and handy implementation of this feature requires big amount of complex concurrent code.
- Do not mock executors(where sensible) in order to make tests more realistic.
",functional
"- Extended the base test class to support lookup of the real lib version for a given FDK version.
- Adjusted the last two failing test to pass by using the newly included version-lookup functionality.
",functional
"- Fixed Problem if an Exception occurs
  - Using the second parameter of LOGGER.error() to get the stack trace
    printed.
- Moved all Interceptor Interfaces into their own package
- Added ChangeSetInterceptor Interface and
  added in implementation for the command line.


git-svn-id: http://svn.serverix/supose/trunk@326 2a5690f4-4b40-0410-ba62-85a317ce182b
",bugfix
" Fixed SSH/SUDO problem when the file owned by the sudo user was not readable by the connecting user. Because it was being copied to the temporary directory using ""cp -pr"" it would still not be readable. Added ""chmod -X go+rX"" command after the copy.
",bugfix
"- Fixed bug with border styles
- added fixed width for columns (width not affected by useFullPageWidth feature)

git-svn-id: https://dynamicjasper.svn.sourceforge.net/svnroot/dynamicjasper/api/trunk@73 2bfdcaec-5528-0410-9d21-f7f2b6497bdd
",bugfix
"- JaninoEvaluator stops itself after several errors
- corrected a hard to spot bug in AbstractEvaluatorFilter. It has methods like
  
  public int getOnMatch()
  public void setOnMatch(String)

  public int getOnMismatch()
  public void setOnMismatch(String)

The fact that the getter returned an int and the setter took a String has PropertySetter confused.
I removed the getOn*match methods which were not used anywhere.

",bugfix
"- Made all decoder dialogs modeless, on request of Eric;
- Some bugfixes in the UART decoding; support for channel labels when
  decoding, better baudrate prediction;
- small updates/cleanups.
",bugfix
"- Moved Address.java in client.http package  did minor changes. - Removed duplicate code for Voice and DataType classes. - Added comments in server code - not completed yet (old comments remaining here and there) but important things are documented now. - Changed class name marytts.client.http/MaryHtmlForm to ""MaryBaseClient"" since it is the base class that all clients use for communicating with Mary server.",code smell
- Summary: [Chart usability spec#2.5]UI refinement of Axis title/label,external
- Summary: [Enhancement] problems with usability of chart designer,external
"- delete classes whose functionality was replaced by classes
  dealing with CBS tool.
- move remaining classes up to org.arachna.netweaver.tools.dc package.
- fix some checkstyle warnings wrt. ""serial"" warnings
- fix some JavaDoc.",bugfix
"- fix serialization/deserialization for sparse vs normal
- minor performance enhancements to unsigned int comparator
- reduce max size of sparse array
",bugfix
"- fixed a problem when you want to edit an object that is *not* shared.
- renamed and changed scope of local methods, added ERDEditButton and ERDInspectPage to use method
- now uses d2w key ""useNestedContext"" so embedded components can be told to use nested contexts (>wo 5.21)


",bugfix
- kie-remote rest API documentation/readability (REST/JAX-RS annotation clean up),external
"- moving to 0.9.8
- adding resource reading capability in IncludeFileAction (see bug 89)
  cleaning up IncludeFileActionTest.java
- other minor changes
",bugfix
- removed a small piece of duplicate code in QuerySet#get,code smell
"-Added the ability to automatically lock certain blocks when placed
-Added /gaautolock to allow the user to enable/disable this
functionality",functional
-Refactored Robot's data class -Added logic to find winner,code smell
"-hacked formservlet to output a patched link for FeatureExplorer which is actually sitting down in the reference dir
-removed old dashboard stuff from site.xsl. Dashboard is now hand-edited
-dashboard is now welcome page
-changed help handling - no floating window any more but a simple div that is shown and hidden in place (near the control)
-fixed a type in claro css link
-re-generated reference forms
",bugfix
1) Added server.http.parallelthreads= entry to marybase.config to set the number of parallel http request handler threads. 2) Commented marytts.server.http.handleClientRequest code. 3) Changed random request id generation into consecutive id generation for http server. 4) Fixed beQuiet functionality in MaryHttpClient.,external
"1) Better toString() output for StopTime and Frequency
2) Fix bug when attempting to remove a Frequency using a gtfs transform
",bugfix
1) Compatibility with Java 1.7_17 2) Better build.xml - now dist includes necessary resources and javadoc and CLI.,external
1) file data utilities - add utility function 2) improve context performance,external
"1. Fix the Bug#422959 of the activation of the PropertySheet.

I have improved the existing code, I think that are some improvements to
do in the editors part.

2. Fix an issue in the class ProrAgileGridContentProvider method
getProrRow, sometimes the int parameter passed to this method is lesser
than 0 so it cause an ArrayOutOfBoundException.

Change-Id: Ieee8426384c9c18a9ed7e0f6cf3306f0eb0fedce
Signed-off-by: Hussein MHANNA <hussein.mhanna@all4tec.net>
",bugfix
"1. Fix the issue #445448. The problem was that a ClassCastException,
first we must check if the EStructurlFeature is an EAttribute before
casting.
2. Improve the code to let the entry return the value via a new method
#getValue()

Change-Id: Ifd2f6269d6c11157c8374384c3d3daf04b980f13
Signed-off-by: Hussein MHANNA <hussein.mhanna@all4tec.net>",bugfix
1. Implemented function to modify a loan product. 2. Added security controls so that only administrators can view  create  update  and delete loan products. 3. Refactored loan product controller hierarchy to eliminate duplicate code.,code smell
"1. New feature to support JOhm Map persistence in Redis.
2. Base collection framework to allow tunable asynchronous lazy loading.
3. Improved collection semantics to not force users to pre-persist every element individually; JOhm will now auto-handle this.
",functional
"1. made zoom functionality using plantuml.jar code (smooth)
2. added image zooming by mouse (ctrl+mouse wheel)
3. added image scrolling by mouse (mouse wheel)
4. added image dragging by mouse
5. changed toolwindow background color to white
6. copy-to-clipboard action now uses current zoom
",functional
"1.) Added pixel-ratio into list of media features that should not be
evaluated.
2.) Added '?' into list of characters allowed in urls.
",functional
1.0 release * New data sources:   - Grayscale heightmaps as source for elevations   - Arbitrary images as source for ground textures   - Custom OSM XML Files as source for ground textures * Full Support for the European Cities DLC.   The building style of existing maps can be changed in the Metadata-Editor * Performance of OpenStreetMap-Downloads improved  the hard download limits   were removed * Windows-Executable (.exe-file) * Program Update Notifications * Cache Janitor: removes deprecated and broken files from the cache * Drastically improved error handling * Useful new options in the settings menu (log file  updates  cache janitor  ...) * Many small improvements and lots of bugfixes  see CHANGELOG.md,external
1.9-RC update Fixes issue 313.    - Map max size not enforced.,internal
224364: re-enable fix after performance improvements from Markus,external
256272: [preferences] Surface new compiler preference for dead code detection: - added quick fixes,code smell
2644350 - Patch fixes two bugs; Map behaviour with inheritance; Considering full interface-superclass hierarchy instead of direct interfaces;,internal
290: Extracted some methods to reduce average method size  and eliminate some duplicate code.,code smell
339835: Remove all classes that provide backward compatibility for eclipse & swt 3.4 https://bugs.eclipse.org/bugs/show_bug.cgi?id=339835,external
413155 refactor HttpTransportOverSPDY to fix some bugs and reduce cyclomatic complexity,internal
"441257 implemented maven caches flush during forced dependency update

Maven maintains a number of caches meant to improve performance and
memory utilization when multiple projects reference the same plugin
or build extension. These caches were never flushed by m2e, which
resulted in stale or inoperable plugins and build extensions used
during workspace build.

The fix was to flush these Maven caches during project forced
dependency update.

Change-Id: If179fb8bde7e51ab8f02092d76fba6a25c668219
Signed-off-by: Igor Fedorenko <igor@ifedorenko.com>
",bugfix
"5431 compatibility, for those that can use it. This patch had no testing in 5.4 and only a bit in 5.4.3.1, but should not be problematic.

NOTES:
======

ERXEC.factory() needed to get changed to ERXEC._factory(). Please fix this in your own code.

ERXWOTestResult doesn't show errors anymore. This is does to a difference in Wonder and WO JavaWOExtensions. Not sure how to go about that.

The rest are mostly missing casts from NSDictionary.EmptyDictionary.

ERXApplication startup is slightly different, so ERXStatistics needed to get intited later on.

ERAttributeExtension received a stub class so that it compiles, but won't really work in 5431.

NSDictionary had slight changes in the signatures of isEqualToDictionary(), which shouldn't impair anyone.

NOTES 5431:
===========

To build, set the various roots and use

 ant -Dwonder.patch=5431 ...

to build. You currently also need to delete

  ERExtensions/Sources/com/webobjects/foundation/NS*Dictionary and NS*Set

as the <exclude> in javac no longer works.

You need to copy over Frameworks/Core/ERExtensions/.classpath.5431 and Frameworks/Core/ERJars/.classpath.5431 to the actual files.

The Postgres plugin won't build on 5431, as there is a super method missing. This will be resolved.
",bugfix
<STORY 248-SOLR plugin> Update and delete functionality for Mongo and SOLR Entities,external
@djazayeri Rename MPI interface and change inheritance.,internal
A bunch of inspection changes  including some dead code removal and tightening visibility  removing unnecessary casts,code smell
A few refactorings in anticipation of more formats that needs some common functionality,external
ACT-628 fixing backwards compatibility of deprecated expressions type,external
ACT-696: Added inheritance for TaskPage,internal
ACT-746: added functionality to involve people and give them custom roles,external
"ARQGRA-416: @InFrame duplicitly switches to iframe - fixed

* removed further enrichment of the Page Objects/Page Fragments
* PO/PF are enriched by demand when intercepted with inframe interceptor
",functional
ASNN-719 Moving method that's only used in a single producer to that producer so we can finish decoupling AssignmentSubmissionBean from non-grading pages,internal
"ASSIGNED - bug 376942: Third-Party Tool Extensions not handled correctly 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=376942

configured pror tool extensions in order to ensure XML level
compatibility
set all estructural features of tool extensions to unsettable
genmodels were updated manually (no reload) in order to avoid unintended
modifications",bugfix
"ASSIGNED - bug 376942: Third-Party Tool Extensions not handled correctly 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=376942

enabled performance tests",bugfix
"ASSIGNED - bug 376942: Third-Party Tool Extensions not handled correctly 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=376942

harmonized core plugin names
replaced reexported plugins by dependencies via features",bugfix
"ASSIGNED - bug 376942: Third-Party Tool Extensions not handled correctly 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=376942

integrated new serialization",bugfix
"ASSIGNED - bug 376942: Third-Party Tool Extensions not handled correctly 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=376942

modified package structure in order to represent then plugin name",bugfix
"ASSIGNED - bug 417160: [New Feature] RMF should be compatible with
Eclipse Kepler 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=417160

added KEPLER target definition
removed sphinx dependencies in testcases that blocked KEPLER migration
updated test cases to JUnit4",bugfix
"ASSIGNED - bug 417160: [New Feature] RMF should be compatible with
Eclipse Kepler 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=417160

fixed test run as JUnit Plugin Test",bugfix
AbstractBlobTransformer uses template pattern to encapsulate from implementations blob 'delete' functionality.,external
Abstraction and work on new data sourcing.,internal
Abstraction of `CeylonBuilder.getSourceFolder()` and `CeylonBuilder.getResourceFolder()`,internal
Account status functionality implemented in M2 style. TestEditStatusAction is added.,external
"Add AVRO_BUFFERING feature (enabled by default/existing behavior)

The feature is added to both AvroParser and AvroGenerator to control
stream buffering on the Avro side.

Signed-off-by: Alex Dubov <oakad@yahoo.com>
",functional
"Add Clone and Reconfigure Ability

Add ability to clone both virtual machines and templates.
Add ability to delete both virtual machines and templates.
Add ability to reconfigure a virtual machine - currently supports basic CPU, memory, and network card functionality.
",functional
"Add FieldValueWriter in HBaseRepository

FieldValueWriter writes field values to an HBase Put object. This
is needed as external functionality (via the BulkIngester) to
allow doing record updates in bulk.
",functional
"Add Hive schema info generator for on-MapReduce compiler.

To enable this feature, add `com.asakusafw:asakusa-hive-plugin`
artifact into the on-MapReduce compiler dependencies.
This feature will generate schema information files onto
`etc/hive-schema/{inout,output}.json` in each batchapp output.
",functional
Add SVM metadata classifier,code smell
Add SessionComponent for better compatibility with old releases. XmppConnection has better documentetation. Better release name: 0.6.0 Release Candidate 1,external
Add ThreadLocal cache to proxies to improve performance,external
Add a catch clause in the SettingBundle#getString(String) in order to detect the missing required keys. Fixes the missing translations by either adding them or removing them when they aren't more used (dead code),code smell
"Add a lazy option to @Bind.

Often I want to @Bind SettableProvider<Foo> provider, but i can't because
BoundFieldModule doesn't recognize it.  I can work around via a custom provider
that just reads a class field, but i figured it would probably make more sense
just to add this feature to @Bind directly.
-------------
Created by MOE: http://code.google.com/p/moe-java
MOE_MIGRATED_REVID=75291509
",functional
Add a new window in time for event occurrences: the year  so that this new functionality provided by the Almanach EJB can be directly used for rendering event occurrences in the current year instead of using the overloaded getListRecurrentEvent() method. It stays the AlmanachPdfGenerator to update with this new feature. In todo: add a message waiting during the load of occurrences in a given period (weekly  monthly or yearly),external
"Add an option to allow self signed certificates

This change impacts the database sync feature when using a HTTPS location
as the database sharing location.

If the host where the database was being shared used a self-signed
certificate it was necessary to generate a new keystore with that hosts
certificate and copy this keystore into your JRE lib/security dir.

With this change an option was introduced to simply trust all hosts even
if they have an invalid X.509 certificate.
",functional
"Add and update tests for the new features.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/unicode@3272 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"Add basic support for /pattern/ in :sort command.  That is, simple text
matches only, no regex.  This makes the feature less robust, but at
least it's functional now.",functional
"Add brisk_system and feature to wait for RPC to start

Hold thread references to be able to cancel them as part
of the future funcitonality.
Implement a waiting mechanisms to check/create for
brisk_system keyspace once Cassandra is ready to listen to
connections.
Since we run inside the same JVM, parhaps there is a better
way to use it besides connection to localhost.
",functional
Add cache folder to InFileObjetPersisters. Customizable  tests and inheritance. Issue #103 and issue #98.,internal
"Add cellar-obr feature install itest

git-svn-id: https://svn.apache.org/repos/asf/karaf/cellar/trunk@1239186 13f79535-47bb-0310-9956-ffa450edef68
",functional
Add counter on issues performance tests,external
"Add date missing message to InboxToadlet if needed

This adds ""Date missing"" (or translation) in place of the date if the
message doesn't have a date header (or has one we can't parse). This
avoids leaving the field empty, and is consistent with the handling of
messages without a subject.

Fixes bug 6173
",bugfix
Add documentation about E-mail sending functionality. Update JUnit version. Code refactoring. Imports optimizations. Changes to UI of E-mail Templates page. New values for i18n. Validations of E-mail functionality.,external
"Add dropwizard-curator and dropwizard-zookeeper

Extracts ZooKeeper functionality from `dropwizard-core` to a new module,
`dropwizard-zookeeper`.

    * Adds new `namespace` option to `ZooKeeperConfiguration` to sandbox
    an application to a particular namespace in ZooKeeper.
    * Replaces `ZooKeeperHealthCheck` and `ZooKeeperQuorumHealthCheck`
    with a single `ZooKeeperHealthCheck` that ensures the configured
    namespace exists in the ensemble.

Also adds a new module `dropwizard-curator` for integrating with the
`Curator` library by Netflix.
",functional
"Add functionality to run individual classes in plugins.

Add a user-friendly shortcut to bin/nutch (the ""plugin"" command).

Fix missing setConf() in Http plugins.


git-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@374348 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
"Add getXPathNodeName to the Node interface

A default implementation is available in AbstractNode
to preserve compatibility with the previous way, which
used Object.toString.

Fixes #569
",bugfix
Add goog.reflect.objectProperty as a first class primitive with the same functionality as JSCompiler_renameProperty.,external
"Add helpers to get SSL properties

Adds helper functions to get SSL properties from
the openssl engine. This enables features like authorization
of client certificates.
",functional
Add in a simple builder for SQL strings  and use it to implement some additional functionality in EntityCollectionImpl,external
"Add ip extractor for multiple headers in chain (#924)

* Add ip extractor for multiple headers in chain

- Add IpHeaderChainExtractor to search for ip header
- Add tests

* Fix javadocs on IpHeaderChainExtractor

* Update javadocs on IpHeaderChainExtractor

* Fix findbug error

- getAlternateIpHeaders() may expose internal representation by returning IpHeaderChainExtractor.alternateIpHeaders

* Update docs, fix typo in IpHeaderChainExtractor

- update docs about ip extrator to have an example about IpHeaderChainExtractor
- fix typo in IpHeaderChainExtractor.setAlternateIpHeaders

* Merge IpHeaderChainExtractor into IpExtractor and add proxyIp

- Add all functionalities from IpHeaderChainExtractor to IpExtractor
- Deprecate get/set alternateAlternateIpHeader in favor of get/set AlternateIpHeaders
- Update get/set alternateAlternateIpHeader to work with the new internal implementation for backward compatibility
- Add proxyIp:
    + verified if the remotehost if proxyIp in case of header search
    + defaults to """"
    + this can checks if the request originated from the right proxy server

* Fix proxyIp check and PMD warning

* Use CommonHelper.assertNotNull for consistency with other checks

* Update docs and javadocs for IpExtractor

* Fix IpExtractor test (expected exception)
",bugfix
"Add navigation links for ""nextPage"" and ""showAllHits"" to channel.  Add
all Nutch document fields to item.  Fix moreFromSite link.


git-svn-id: https://svn.apache.org/repos/asf/incubator/nutch/trunk@161804 13f79535-47bb-0310-9956-ffa450edef68
",functional
"Add new Api calls for ProcessYearCtrl

New api calls have been added for the ProcessYearCtrl giving it all of
the intended functionality it was supposed to have. Some testing is now
required on all of the methods calls. Additionally, a typo was fixed in
a variable name
",bugfix
"Add new Google Calendar functionality
Implemented package org.springframework.social.google.api.calendar.impl and org.springframework.social.google.api.calendar.impl, and autotests.
Also see spring-social-google-example updates.

Moved encode() up a level to QueryBuilderImpl so its available to all builders.
Fix for issue #62 - wrong time format in QueryBuilderImpl.
",bugfix
Add new UnsignedLong methods that we will shortly migrate to. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=38454126,code smell
"Add new functionality to the turn heading adjustment code.

It used to do one adjustment, which was to ensure that the side road
heading change relative to the heading of the outgoing main road segment
was greater than some minimum amount.

It now also ensures that the side road heading change relative to the
incoming main road segment is also greater than some minimum amount.

Furthermore, an optional bit mask can be provided to choose which of these
adjustments are enabled:

--adjust-turn-headings[=BITMASK]

	Optional BITMASK (default value 3) allows you to specify which
	adjustments are to be made (where necessary):

	1 = increase angle between side road and outgoing main road
	2 = increase angle between side road and incoming main road

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@1521 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"Add okhttp and change HttpConnectionHandler to use it

This becomes a lot simpler than the old version.  We don't have to make special cases for zipped data; the library handles that automatically.  We also no longer specify a charset.

Don't bother much trying to look at the ""diff"" of HttpConnectionHandler.java.  The functionality is rewritten from scratch.
",functional
"Add output value prefix to simplify fixing output mapping conflicts.

Consider the case where there are 2 CreateMapProcessors in a configuration.  CreateMapProcessors have 2 (at the moment) output values.  2 processors are not permitted to have output values with the same name.  So before this process each of the output values would have to have a mapping in the outputMapper.  This is fragile, because if a new output value is added in the future to CreateMapProcessor, then it will break the configuration because there will be 2 output values with the same name.

This PR adds an option to set a prefix for all output values with a given name.  This prefix will be applied to all output value names making them unique for the two maps.  Additionally it will be resistant to future API changes of CreateMapProcessors.
",bugfix
Add polymorphism with discriminator test,internal
"Add quick issue addition feature - resolves issue:76.
Inserts a row in every issue list table when add button pressed.
Added IssueTypeDropDownChoice to render IssueTypeSelection.
",functional
"Add save() method that takes an explicit AccessControlContext.

In the recent update to allow Read and ReadWrite control, it is possible that the
AccessControlContext available from the AccessControlContextProvider is not appropriate to
update an existing object, and the developer would like to override it with a special value
(e.g. an ""Application"" context that only privileged methods can use).  In this case, we need the
equivalent of the findBy that accepts an explicit AccessControlContext, but for the save() method.
This is now available in the AccessControllable interface.

Removed 'invokeWithRole' option in DataAccessMethod since it is confusing to have two different
ways to override the AccessControlContext used during query for objects.

Implemented the above changes for both the Hibernate and MongoDB modules.  Added new tests
to validate the functionality works as expected.
",functional
"Add support for ""source"" command rather than parsing .vimrc by default
(#165).  It's possible sourcing .vimrc could break Vrapper features so I
don't want to parse that file without the user knowing.",functional
"Add support for a range of days.

This is an implementation for feature request #11. It introduces the new
parameter ""includeCommitsDuringTheLastDays"" to specify number of days of
log to retrieve.
",functional
"Add support for handling additional Exceptions with PendingFeature ...

Add support for handling additional Exception types with the
PendingFeature annotation to allow features that are failing with
exceptions instead of AssertionErrors.
",functional
"Add test helper function for looking up an episode from the provider

We had two test methods which called the provider to look up information about the episode.  But the functionality was copy-and-pasted, and the individual pieces of data were just defined as individual local variables.

Add a new helper method, which takes an instance of EpisodeTestData.  Then the two test methods just call the helper method.
",functional
"Add the 'continue' attribute to the type.

If the type has the continue attribute then searching is continued for further matches.
As a result the one feature in OSM can result in more than one element in the map.
These elements will be on top of each other (in the order found) and so can be used
for stylistic effect along with a suitable type file.

Also useful for ways that are tagged as two different kinds of things although this is
not the perfect solution to that problem.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/style@1234 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"Add timing metrics just around the HTable flush.

This is the corresponding patch to the ""tighter_hbase_timing_0.7"" branch
which added the same functionality to the stable-0.7 release.
",functional
"Add unit tests to JiraReleaseVersionUpdater

Test the basic functionality and the bug fix to stop failing if the
version is already released
",bugfix
Add updateSchema to HBaseMetadata class,code smell
"Add visibility into operations (status).

This commit allows the functionality for users to issue requests
and then check to see whether or not they succeeded. They can also
now access the error message that the server sends back to them
so they can see why the server rejected their request. Operation
status's also take into account operation timeouts and exceptions
so if an operation times out the operation says so. Also if an
exception is thrown while processing the operation the operation
status reports the message from that exception.

Change-Id: I62af7450cf6cd1c9d1bf171e5063b3d8a1c919ce
Reviewed-on: http://review.couchbase.org/7044
Reviewed-by: Michael Wiederhold <mike@couchbase.com>
Tested-by: Michael Wiederhold <mike@couchbase.com>
",functional
"Added ""delete candidate sessions"" functionality",external
Added @ContextParameterObserver event functionality with examples,external
Added Agent abstraction to coordinator,internal
Added Content Spec filters back after adding Filter Types. Cleaned up the Search views  to remove duplicate code.,code smell
"Added DOMBuilder.setValidation(boolean) to match SAXBuilder.  Previously
the validation feature could only be set via the constructor.
Thanks to Steven Gould for pointing this out.
Also fixed a Javadoc typo in SAXBuilder.setValidation().

-jh-
",bugfix
Added ErodingPool decorators designed to shrink the size of a pool without the use of an evictor.,internal
"Added Event DnD functionality - Add is fully functional. Also a lot of other little fixes and changes

EventKeyInput
 * Added a '\' activated event add
 * Moved KEYS to Event

EventNode
 * Made Transferable
 * Added an isValid() check

GmMenuBar
 * Fixed a potential Locale bug (see javadoc for String.toUpperCase())

Listener
 * Changed stringToRes to use reflection rather than conditionals
 * Some changes to the canImport method to prevent unwanted mouse cursors

MDIMenu
 * A bit of shuffling around, no major changes

MDIPane
 * Removed TODO catchblock comments

ResNode
 * Simplified isDataFlavorSupported() for the same reasons as the changes to Listener

Gm6FileReader
 * Some restructuring of code (private static fields rather than parameters)
 * Fixed some Exception code
 * Re-prefixed string keys to start with class name, updated messages.properties accordingly

Event
 * Added some convenience constructors
 * Moved the KEYS list to here
 * Added compareTo and equals functions

EventFrame
 * Added DnD functionality
 * collision and keySelect are now disabled and enabled on selection
 * Added a replace checkbox - not coded yet

GmObjectFrame
 * Added EventInstanceNode and EventGroupNode classes to simplify things a bit
 * Added addEvent function which correctly inserts/adds a new Event, selects it and scrolls the tree to display it

SpriteFrame
 * As IsmAvatar so subtly suggested I do, I've extracted the two main panels of SpriteFrame into separate functions

git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@115 8f422083-7f27-0410-bc82-93e204be8cd2
",bugfix
"Added IContainerInstantiator.getSupportedParameterTypes and IContainerInstantiator.getSupportedAdapterTypes.  Added corresponding methods on ContainerTypeDescription.  Added test case (ContainerTypeDescriptionTest) in org.eclipse.ecf.test.  Fixed update site contents to include core feature only.
",functional
"Added ID to markers and features, and added basic styling.

Added ID to markers and features. Read ID from GeoJSON.
Added setColor(..) etc to Marker for easy (basic) styling.
Added MultiLineString support for GeoJSON.
",functional
"Added MultiMarker mechanism to handle multiple markers as one.

Added MultiMarker to allow marker handling consisting of multiple other
markers. Properties and display states are the same for all its markers.
Renamed MultiFeature to ShapeFeature, and AbstractMultiMarker to
AbstactShapeMarker.
Moved up isInside(G?) from SimpleXxMarker to AbstractMarker and
AbstractShapeMarker.
Added isSelected() to Marker.
Added javadocs.
",functional
"Added MultiPolygon parsing from GeoJSON.

Implemented MultiFeature handling. GeoJSONReader uses same
PolygonFeature creation for single and multiple.
MarkerFactory now handles creating various markers from a MultiMarker.
",functional
Added Paranamer.lookupParameterNamesForMethod(Method) functionality,external
Added Peer inheritance in comm. tests  user-defined CommAddress,internal
Added QCOW2 virtual size checking for S3.,internal
Added Queries.returns(). Renamed all() to any(). Excluded SourceConsumer from source tracing. Added performance check for indexing. Set version # to 1.0rc1.,external
"Added SharedObjectTypeDescription class and changed API and all apps to use appropriately.  The file sharing feature in the collab example app remains broken, and more testing and debugging will be needed to repair.
",functional
Added StandardTestData class which contains UUIDs of metadata from standardTestDataset.xml Added AbstractPatientWrapper,code smell
"Added Transactional to all services.
Added repeateble stimulus to addScenarioForm (but i cant tested it).
Added functionality for Group set as default checkbox.
Added functionality for Private experiment checkbox.
Error messages in validator are now from properties file.
",functional
"Added a ""This page is empty"" message to empty property tabs as a
fall-back, instead of just displaying an empty page. The message
instructs the user on which element features to enable.

Disable List edit button if detail is empty.

Fix bug in TableColumn: don't attempt to create a cell editor if column
is not editable.

Fixed tool enablement preference page: model extensions are displayed in
a separate tree and the two trees are kept in sync.

Removed the additional bendpoints from Append Node feature - let the
Routers handle this instead.

Display ""Event Type"" column in Event Definitions list.",functional
"Added a BucketSizeResolver to ListsBucketsFiltered. #13

This is where the bucket size feature
is connected on the 'bringing back buckets'
side.
",functional
Added a FoldedData class for cycling through training,code smell
Added a compatibility mode for the PHP framework Symfony.,external
"Added a jBPM Service Task property tab which includes On Entry/Exit
scripts.
Fix misspelling of ""instantiate"" feature.
Added tooltips to property labels, defined in messages.properties of UI
plugin.",bugfix
Added a layer of abstraction  to make it easier to insert a new ScriptEngine,internal
Added a layer of abstraction  to make it easier to insert a new ScriptEngine,internal
"Added a little feature: When a browser directly requests a decorator page, render the contents of the <sitemesh:write> tag. This is to make it easy to test decorators in development.
",functional
"Added a lot of missing JavaDoc comments. Fixed up the chat example to work on all current browsers through a Flash fallback. Added a some missing functionality to the main classes, including responding to a Flash client's policy file request to the WebSocketServer, which is required for the Flash WebSocket implementation.
",bugfix
"Added a new feature where clients can configure a CControl such that externalized CDockables to not stack, but can be splitted on their windows (as if hey were in a CGridArea).",functional
"Added a new flag setFastReconfigure() which shortens the reconfiguration
to skip repeated attempts to set features that aren't present on a parser.
Patch submitted by scott Emmons and he reports:

""Again, I wouldn't expect this to help cases where larger XML is
handled less frequently, but for my case where it's hundreds of XML
fragments per transaction per second, this fix reduces the execution
time of SAXBuilder.build() by about 1/2.""

-jh-
",functional
"Added a residence bank, controlled by the ""bank"" flag.  This will allow deposits / withdrawals from the residence if using economy.  Probbably will change lease auto-renewals to source from the Residence bank in the future.  Also added a Residence chat channel feature.  use /rc <message> to say somthing in residence chat, or simply type /rc to toggle it on or off.  Also, improved live residences ability to re-load while the server is running, because it had a few issues.  And of course, other minor tweaks.
",functional
"Added a zero argument constructor for the NetworkData class and changed the constructor that read from a file to a new method named ""populateFromDisk"".  Updated the unit test to understand this new reality.",code smell
"Added ability to control certain webapp features

I have added functonality to allow a QTIWorks instance deployer/manager
to decide whether to include the 'public' and REST features.

The defaults for both of these are now OFF (which is sensible), so will
need to be explicitly enabled if people want to use them.
",functional
Added abstraction to messages  to contain senders ip. Necessary to determine which slave message comming from at master  but also used to provide masterIp at slave's initial setup,internal
Added additional flexibility to fetching SCOP domains from an AtomCache.,external
Added additional model abstraction to allow a progress button's task to be exchanged during runtime.,internal
Added allowInSwitchCase property to AvoidNestedBlocksCheck to allow limiting the scope of variables to one case of a switch statement.,code smell
Added an additional abstraction layer for example queries and implemented a generator for simple regex queries.,internal
"Added an sequential identifier generation mechanism; fixed unit tests to used new identifier and removed the processing of persons when testing relationships.
",functional
Added back in password parameter to use on SQL data source (whoops)  cleaned up output  moved RandomData class to tests.,code smell
Added bagging approach to handle unbalanced data classification,code smell
"Added basic support for iConomy, where most Factions commands can be made to cost (or give) money. For claiming land, there are some extra features. Each additional land claimed by default costs more than the last, with the multiplier being configurable. For example, the first claim might cost $30, the 2nd $45, the third $60, and so forth. When land is claimed from a weakened faction, there is a configurable bonus amount of money deducted from the cost of claiming the land, as an incentive; this number can be changed to a negative value to instead make it cost more to claim such land. When land is unclaimed, a configurable percentage of the cost of claiming the land can be refunded (defaults to 70% of the cost). The total value of a faction's claimed land is now shown in the info given by /f who [faction tag], along with the depreciated (refund) value.
",functional
"Added blob delete functionality



git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/projects/lily/trunk@3986 b80d95f8-e103-0410-bd55-e03a9dc29394
",functional
"Added bytetutils functionality for creating a hex string

git-svn-id: svn+ssh://galicia/usr/local/svn/HIPI@53 0c4b1d1f-a87e-43e2-b515-cbd7e906cf19
",functional
"Added check if implicit multiplication is used
==============================================
 - But since i now have to check explicitly for these error condition onoe could also replace them by proper multiplications and therefore implement the feature EXP-18
",functional
Added class higerarchy scanning for inheritance handling Moved Parcelable collections into singleton repository,internal
"Added command logging as for default commands and temporairly removed Essentials old features as it does not compile in Eclipse :/ sorry about this. How would we go about getting this compile in Eclipse and Netbeans at the same time?
",functional
"Added detection of nodes that are out of sync with the systems patch level.  Patching will fail if an out of sync node(s) is detected.  Added a feature that can force patching to continue even if some nodes are out of sync by specifying a 'forcesync' system property
",functional
Added experimental support for inner joins and flattened attributes. Improved support for inheritance (mostly untested). Separated out common EOAdaptor code for implementing non SQL EOAdaptors.,internal
"Added extension point allowing to disable the RebuildAction.

Can be used when a new plugin (e.g. Gerrit-Trigger) want to
supply a more specific and complex trigger functionality.
Awesome JUnit testcases added.
",functional
Added fetching recipient id functionality/tests based on commit author from a build for private messages.,external
Added functionality to PrivateMessage for either supplying username/password OR basic auth token.,external
Added functionality to capture execution information about the methods under test. This is useful for generating new reports.,external
Added functionality to fetch the approximated (VDM node) location of an IR node.,external
"Added functionality to generic provider implementation.  Added trace options.  Created exception logging method in SOContainer superclass and used it in SOContainer and subclasses
",functional
Added functionality to handle InputStreams. (useful when loading JarEntries),external
"Added functionality to have operators symbols be represented by Strings
=======================================================================
 - changed the cistructor for CustomOperator to take a String as the operator symbol
 - changed the strucutre and the unary opertor substitutions
 - still a problem with the = character because of normalizeExpression()
",functional
"Added functionality to review panel.

git-svn-id: https://www.evllabs.com/svn/jgaap/trunk@163 bcaee279-2e94-4b2e-be96-a1d7c6f3fc26
",functional
"Added getContent(Filter) methods to Element and Document.  A very cool
new feature!

Also made Filter public and put it in org.jdom.filter.  Did the same for
ElementFilter, which supports getChildren().  A few more filters will
come later.

Thanks to Brad Huffman for the patch.

-jh-
",functional
Added hook for progress reports on  and hooks for user configurability of file reading,external
"Added include functionality to Joran.
The <include> pattern used in a <configuration> pattern can have a ""path"" attribute with the path to a file that will be parsed and executed to configure logback.
This attribute can be set with a property.
",functional
"Added inferencing support to GraphSail.  It requires further testing, but its behavior without inferencing remains the same.  Also added MemoryStoreTest as a sanity check for notifying and inferencing functionality which is incompletely specified in Sesame's API docs.
",functional
"Added javadoc & fixed the prefered authentication mechanism feature

git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@765990 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
"Added lab testing functionality
* Lab tests are defined in an XML resource
* labTest custom tag can be added to HFE forms and generate fields for lab tests dynamically
",functional
"Added left logo to DialogHeaderPanel,
Solved repaint problem in IntogenImportDialog,
Fixed bug of rewrited files in PersistenceReferenceXmlAdapter.

git-svn-id: https://bg.upf.edu/svn/gitools/trunk@715 1b512f91-3386-4a98-81e7-b8836ddf8916
",bugfix
Added logic to determine the proper twiML file for different use cases. Added abstract Request class for common Request functionality.,external
"Added lost TMODIFIER for the MULTITERM, as well as lost grammar changes to MULTITERM.\nAnd thanks to this, introduced a new debugging functionality. setDebug(true) now prints the tree through the processing steps
",functional
"Added lots of javadoc & fix for DIRMINA-652

git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@729187 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
"Added mdr 5 for cites.

The city field in all points that are themselves cities is set.

You should now see on a city search the region and country if set.

Not implemented for other features yet.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/mdr@1253 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"Added most missing functionality to GmObjectFrame, fixed and improved some file loading code.

ResNode
 * encapsulated res field

GmFileReader
 * Fixed a bug when loading gm5 files with empty sounds
 * Changed readSprites and readBackgrounds to use the readImage method
 * Made events being loaded get added to start of the list, meaning they are in ascending order

GmStreamDecoder
 * Modified readImage to allow an accurate estimate for inital buffer size
 * Added initialSize argument to decompress

Listener
 * added inner class MListener, to get rid of the unwanted MouseListener methods
 * made various methods static
 * exposed the putNode method for use in GmObjectFrame

Event
 * Added copy method to return a duplicate

GmObject
 * modified copy to utilise Event.copy

Ref
 * Added a node field, to allow a Resource to access it's corresponding node, which in turn allows it to access its frame

EventFrame
 * Replaced the ""replace mode"" checkbox with a radio group
 * Added the ability to duplicate events
 * Changed layout slightly, so that extra side components only appear when needed

GameSettingFrame
 * Exposed some convenience methods, added suggestion to move them to Util

GmObjectFrame
 * Implemented most missing functionality:
   * New sprite
   * Edit sprite
   * sprite preview updates when selection changes (still needs to update when sprite changes - see TODO comment)
   * prevents looping inheritance
   * Delete event
   * changed EventNodeTransferHandler to handle duplicating

git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@199 8f422083-7f27-0410-bc82-93e204be8cd2
",bugfix
"Added network optimization to PING and TCPPING for FIND_INITIAL_MBRS event when initial hosts is used, rather than send to all, skip send for initial members already in the view

Changed default port_range from 5 to 1, auto port escalation is a nice feature, but it is wasteful and should be off by default
",functional
Added new CManager class and started basework for manage AI. Modified Player and Person class inheritance.,internal
Added new Metadata class for easy access to core metadata * Enforces 'fail-fast' - if metadata object doesn't exist then exception is thrown,code smell
Added new Query Parameters for Content Spec searching. Cleaned property tag code to remove duplicate code.,code smell
"Added new SimpleJqtiFacade, tidied examples

SimpleJqtiFacade is intended to be a very simple facade API for the
main read, write and run functionality in JQTI+. This should cater for
very basic use cases, and also help people see how to join the lower
level bits up more clearly.

Still needs a bit more work...

I have updated the existing examples to use this where appropriate.
",functional
Added new map functionality. Performed deep tests and fixes,external
Added person connection abstraction.,internal
Added popups. Introduced page-level abstraction called container for pages and popups.,internal
"Added remote folder field in the AppManager, added functionality to save to same remote folder,  fixed method to get file metadata in GSDataManager
",functional
"Added schema json importer and extended existing import functionality to support Schema JSON. Now you can incrementally extend an existing schema by adding Schema JSON embedded in <script type=""application/schema+json""> tags in Widgets.",external
Added some JCR-related functionality  including a code that monitors the rule sets in a repository and keeps them in sync with the RuleSet instances in a RuleService.  Also created the concept of an ExecutionContext to encapsulate some commonly-needed functionality (including tools and the session factory).,external
Added some better commentary  made sure unit tests pass. Added overrides to common methods for the abstraction in SparseMatrix.,internal
"Added some features for EventFrame and FontFrame

EventFrame:
 * Buttons now display it, rather than toggling it
 * GmObjectFrame has a button to summon it
 * Right click selects and adds an event
 * Clicking or Right Clicking on a branch expands/collapses the branch
   * Functionality similar to GmObjectFrame.EventTree
 * Disabled double-middle-mouse click for event adding
 * Had to resize it to make room for ""double click"" etc. label

FontFrame:
 * Added a text field for what text to preview
 * Had to resize to make room

Disabled bold text throughout the UI. See LGM line 251.
 * This may cause some components to display incorrectly

git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@233 8f422083-7f27-0410-bc82-93e204be8cd2
",functional
Added some performance testing,external
"Added some unit tests (and removed a bit of dead code) to boost our coverage over 80%;  	found one bug in SaxonTranslator w/treat as in the process re-orged the documentation",code smell
"Added stack tracking capability to JAK core

This feature is currently used by the REPL to allow evaluation RPN expressions (without running the program).",functional
Added statistics endpoint. Refactoring of functionality into own packages,external
"Added support for JDBC3.  The driver will now build under JDBC3 (i.e. Java 1.4).
This concludes my changes that restructured the code to support JDBC3.
The jdbc unit tests were also resturctured to allow different tests between
jdbc2 and jdbc3, although currently make check (aka ant test) for JDBC3 just
runs the JDBC2 tests.  Of special note the largeobject/PGblob and PGclob
classes have been moved under the jdbc2/jdbc3 specific directories as they
now differ by jdbc version.  Also note that this checkin removes the
PostgresqlDataSource and files in the xa directory.  A recent checkin has
added new datasource support that replaces the functionality provided by these
classes.

 Modified Files:
 	jdbc/build.xml
 	jdbc/org/postgresql/jdbc1/AbstractJdbc1DatabaseMetaData.java
 	jdbc/org/postgresql/jdbc1/AbstractJdbc1ResultSet.java
 	jdbc/org/postgresql/jdbc1/AbstractJdbc1ResultSetMetaData.java
 	jdbc/org/postgresql/jdbc1/AbstractJdbc1Statement.java
 	jdbc/org/postgresql/jdbc2/AbstractJdbc2Connection.java
 	jdbc/org/postgresql/jdbc2/AbstractJdbc2DatabaseMetaData.java
 	jdbc/org/postgresql/jdbc2/AbstractJdbc2ResultSet.java
 	jdbc/org/postgresql/jdbc2/AbstractJdbc2ResultSetMetaData.java
 	jdbc/org/postgresql/jdbc2/AbstractJdbc2Statement.java
 	jdbc/org/postgresql/jdbc2/Array.java
 	jdbc/org/postgresql/jdbc2/Jdbc2CallableStatement.java
 	jdbc/org/postgresql/jdbc2/Jdbc2Connection.java
 	jdbc/org/postgresql/jdbc2/Jdbc2DatabaseMetaData.java
 	jdbc/org/postgresql/jdbc2/Jdbc2PreparedStatement.java
 	jdbc/org/postgresql/jdbc2/Jdbc2ResultSet.java
 	jdbc/org/postgresql/jdbc2/Jdbc2ResultSetMetaData.java
 	jdbc/org/postgresql/jdbc2/Jdbc2Statement.java
 	jdbc/org/postgresql/test/jdbc2/BatchExecuteTest.java
 	jdbc/org/postgresql/test/jdbc2/BlobTest.java
 	jdbc/org/postgresql/test/jdbc2/CallableStmtTest.java
 	jdbc/org/postgresql/test/jdbc2/ConnectionTest.java
 	jdbc/org/postgresql/test/jdbc2/DatabaseMetaDataTest.java
 	jdbc/org/postgresql/test/jdbc2/DateTest.java
 	jdbc/org/postgresql/test/jdbc2/DriverTest.java
 	jdbc/org/postgresql/test/jdbc2/JBuilderTest.java
 	jdbc/org/postgresql/test/jdbc2/MiscTest.java
 	jdbc/org/postgresql/test/jdbc2/ResultSetTest.java
 	jdbc/org/postgresql/test/jdbc2/TimeTest.java
 	jdbc/org/postgresql/test/jdbc2/TimestampTest.java
 	jdbc/org/postgresql/test/jdbc2/UpdateableResultTest.java
 Added Files:
 	jdbc/org/postgresql/jdbc2/AbstractJdbc2Blob.java
 	jdbc/org/postgresql/jdbc2/AbstractJdbc2Clob.java
 	jdbc/org/postgresql/jdbc2/Jdbc2Blob.java
 	jdbc/org/postgresql/jdbc2/Jdbc2Clob.java
 	jdbc/org/postgresql/jdbc3/AbstractJdbc3Blob.java
 	jdbc/org/postgresql/jdbc3/AbstractJdbc3Clob.java
 	jdbc/org/postgresql/jdbc3/AbstractJdbc3Connection.java
 	jdbc/org/postgresql/jdbc3/AbstractJdbc3DatabaseMetaData.java
 	jdbc/org/postgresql/jdbc3/AbstractJdbc3ResultSet.java
 	jdbc/org/postgresql/jdbc3/AbstractJdbc3Statement.java
 	jdbc/org/postgresql/jdbc3/Jdbc3Blob.java
 	jdbc/org/postgresql/jdbc3/Jdbc3CallableStatement.java
 	jdbc/org/postgresql/jdbc3/Jdbc3Clob.java
 	jdbc/org/postgresql/jdbc3/Jdbc3Connection.java
 	jdbc/org/postgresql/jdbc3/Jdbc3DatabaseMetaData.java
 	jdbc/org/postgresql/jdbc3/Jdbc3PreparedStatement.java
 	jdbc/org/postgresql/jdbc3/Jdbc3ResultSet.java
 	jdbc/org/postgresql/jdbc3/Jdbc3ResultSetMetaData.java
 	jdbc/org/postgresql/jdbc3/Jdbc3Statement.java
 	jdbc/org/postgresql/test/TestUtil.java
 	jdbc/org/postgresql/test/jdbc2/Jdbc2TestSuite.java
 	jdbc/org/postgresql/test/jdbc3/Jdbc3TestSuite.java
 Removed Files:
 	jdbc/org/postgresql/PostgresqlDataSource.java
 	jdbc/org/postgresql/largeobject/PGblob.java
 	jdbc/org/postgresql/largeobject/PGclob.java
 	jdbc/org/postgresql/test/JDBC2Tests.java
 	jdbc/org/postgresql/xa/ClientConnection.java
 	jdbc/org/postgresql/xa/TwoPhaseConnection.java
 	jdbc/org/postgresql/xa/TxConnection.java
 	jdbc/org/postgresql/xa/XAConnectionImpl.java
 	jdbc/org/postgresql/xa/XADataSourceImpl.java
",functional
Added support for hierarchical model inheritance.,internal
"Added support for processing turn restrictions.

Only ""well formed"" turn restrictions are handled - i.e. the 'from' and
'to' ways must terminate at the 'via' node.

Multiple 'via' nodes are not supported and neither are 'via' Ways.

The ""except"", ""day_on/off"", ""hour_on/off"" tags are ignored.

The --ignore-turn-restrictions option can be used to disable the feature.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@935 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"Added support for setting features in XmlPath using the XmlPathConfig. This can be used to for example disabling external DTD loading. There's also a shortcut for this by using the XmlPathConfig#disableLoadingOfExternalDtd() method (issue 237)
",functional
Added test case to ensure inheritance and properties work fine,internal
"Added text-alignment functionality for axis labels. Added functionality for combining both line & area plots on one chart. Added demo of functionality added.
",functional
"Added the ability to set a message on every reward.

This message is only sent if the specific reward is non-zero. In
addition, fixed the following bugs:
 - ItemFactory didn't implement hashCode() and equals(), causing
   the message system to not properly ""merge"" similar actions.",bugfix
Added the functionality required for BZ#1011904 - Support multiple config files.,external
"Added the hasImplicitElements feature for use with SailGraph and others which return elements not explicitly created with addVertex or addEdge
",functional
"Added type conversion for constants. Optimized ReferenceCache. 

Removed null check from ContainerImpl.getInstance(). Added Container.hasBindingFor() to provide comparable functionality.

Made Key public.

git-svn-id: https://google-guice.googlecode.com/svn/trunk@5 d779f126-a31b-0410-b53b-1d3aecad763e
",functional
"Added versioning and delete functionality to RecordTypes and FieldDescriptors



git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/projects/lily/trunk@3910 b80d95f8-e103-0410-bd55-e03a9dc29394
",functional
"Adding WorkQueue so we can have thread pooling for loading canonicizing and eventifying documents
minor bug fix in loading documents

git-svn-id: https://www.evllabs.com/svn/jgaap/trunk@227 bcaee279-2e94-4b2e-be96-a1d7c6f3fc26
",bugfix
Adding a notion of a graph composition  which is a series of GAV-sets each optionally paired with a filter that can be combined through some calculation (optionally) like add  subtract  intersection...then allow the RepositoryOps recipe to use that for complex recipes. Also  add the preset factories from aprox-depgraph (integration with cartographer) here so we can use them in embedded mode if we want.,internal
"Adding an automatic service generation feature.  Any requests that come across in the form /p/<full host and path to the real service> will auto-generate a new service definition.
",functional
"Adding an image output port to the HeatMapViewer (feature request #19)

The configure and execute routines of the HeatMapViewerNodeModel and an additional method has been added that creates the image output.
The HeatTrellis and HeatMapColorToolBar needed some adjustmets to makes certain properties available from outside. For instance the font need to be bigger when rendering it for an image.
Finally the AbstractNodeModel needed a new constructor to be able to hold the new port configuration of the HeatMapViewerNodeModel
",functional
Adding and Fixing functionality,external
"Adding extra docs and tests to TestDriver

Documenting some preconditions, and adding
tests for search by SKU functionality
which seems unstable in Magento 1.5.1.0
",functional
"Adding filtering functionality

the new filtering functionality allows to select the attribute according to which the plates are selected (before it was only the barcode, which is still the default)
accordingly I add the action listeners in the HeatMapToolbar and the gating of the plate filtering in the HeatMapModel.
",functional
Adding functionality to upgrade/downgrade version of webdriver,external
Adding let inlining test cases to show difference in behavior between var and let. Part of ES6 compatibility for Inline Type Aliases (full functionality + tests not yet complete).,external
Adding new CloudStackApi class  adding the rest of CloudStack data classes  moving cloudstack data classes into folder models  Starting work on ec2engine revamp with new api,code smell
Adding new status attribute to CommentData class to replace the old combined use of approved/spam/pending boolean flags.  Comments now support 4 distinct status options  APPROVED  DISAPPROVED  PENDING  SPAM.,code smell
"Adding support for non-sticky sessions (merged/rebased nonsticky-sessions branch in commit 390b1903). For non-sticky sessions
- the session is loaded from memcached when requested by the application and stored in the local session map for this request
- it's saved back in memcached (following the same optimizations for skipping the update as sticky sessions) at the end of the request (primary memcached)
- the session is stored in an additional (secondary) memcached node to prevent a single point of failure (the node is the next from the configured list of memcached nodes) (issue #72, SPOF)
- when the primary memcached node is not available the session is loaded from the backup/secondary node and it's relocated to a new node (session relocation as for sticky sessions on memcached failover) (issue #72, SPOF)
- to allow skipping of updates (including expensive serialization) the session is stored with the double expiration time in memcached. The actual last access time (and maxInactiveInterval) is stored in a really small key/value which is used to determine if a session is still valid. This validity info is also stored for backup in the secondary memcached node. (issue #74)
- there are session lock mechanisms implemented: all (when a session is loaded as requested by the application it's locked until the end of the request/storage in memcached), auto (requests that access the session readonly are auto detected and for further requests locking is skipped, for requests that modify the session a lock is aquired. the key is the requestURI+queryString), uriPattern (a regular expression is compared with the requestURI+queryString and the session is locked if they match), none (no locking at all, default) (issue #71)
- tests are added for non-sticky functionality, others are extended to check both sticky and non-sticky mode where appropriate
- push version to 1.4.0-SNAPSHOT
- additional configuration attributes: sticky (true/false, default true), lockingMode (one of ""none"", ""all"", ""auto"", ""uriPattern:<regexp>"")
",functional
"Additional functionality

git-svn-id: http://svn.javaforge.com/svn/DockingFrames/trunk@111 3428d308-0d2e-0410-b3d4-94d0fefcacdf
",functional
"Additional functionality

git-svn-id: http://svn.javaforge.com/svn/DockingFrames/trunk@113 3428d308-0d2e-0410-b3d4-94d0fefcacdf
",functional
Additions: zip thread-safe locale scheduler bugfixes performance improvements,external
Adds base api support via single-inheritance interfaces,internal
Adds options for num writers and commit size on db-bootstrap page; improves bootstrap file format and performance by using type names instead of IDs,internal
"Adds side compound annotation functionality to the SBMLIOUtil class, to grab this information from the participants of reactions.
",functional
"Adds the sync-optimizer tool for https://jira.duraspace.org/browse/DURACLOUD-877. This tool determines the optimal number of threads to use with the SyncTool.

Also replaces springsource version of commons-io with central version across projects. This was required because the sync-tool-optimizer was picking up the earlier springsource version classes, which didn't allow for the use of features in the newer commons-io versions.
",functional
"Adds workaround for cacheing bug

- Subsequent GC requests on netcdf files result in a null feature type
  being returned. It was determined that the request cache was causing
  the state of the netcdf dataset objects to be altered in such a way to
  cause the feature type to be null.
",bugfix
"Advanced filter functionality in the Biomart import module

git-svn-id: https://bg.upf.edu/svn/gitools/trunk@851 1b512f91-3386-4a98-81e7-b8836ddf8916
",functional
"All ITs run, and I'm including a new feature to allow assembly descriptors and assembly-components to be deployed then resolved again as artifacts. This enables reuse of standard assembly descriptors/components. There is a new IT to test it, and all other ITs pass, including the repository-assembly now (due to fixes in the maven-repository-builder).

git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@555865 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
"All Mojos now extends AbstractMojo who provides commons parameters and functionality. To allow this the parameters now are readed using annotations instead of the old comments alternative no allow inheritance. (testing is pending)
",functional
"All export features take canvas bounds into account.

Previously, only movie export would use the bounds set in document
properties. canvasX and canvasY properties are also added which allow
you to change the offset. (0,0 = center).
",functional
"Allergy reaction kicked in. This commit removes the Spout features. I have nothing against spout but if we are going to have them we should do them properly. They should be coded in such a way that they could be in an external plugin alltogether. Also removed netbeans stuff from IDE that should not be in the github repo.
",functional
"Allow customization of imports for GremlinGroovyScriptEngine.

Need to think this concept through in a more global fashion.  This fix only helps gremlin groovy.  It won't help other ScriptEngines.  On the other hand all scriptengines have their own implementation so there may not be any way to enforce this feature across them all anyway.  Would be nice if ScriptEngineManager took some parameters or something that could get shoved into initialized ScriptEngine implementations but that doesn't appear to be an option.  Even with this change, the implementation is really not so nice when using ScriptEngineManager to initialize factories because the import provider has to be configured statically which is not so great.  That's a somewhat common pattern at this point, but there really should be a nicer way.
",bugfix
"Allow instance type network selection for both networks

The feature added to select different networks for each instance type
was only allowing one network.  Make it possible to configure both the
public and the private network.
",functional
"Allow more than one map feature to match and take the one that is first in the map-features file.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@518 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
Allow specifying memory size to the BitmapManager,internal
"Allow to configure retry condition

The `@Retry` annotation can now be used to configure an optional
`condition` closure that is evaluated when a feature fails to determine
whether it should be retried.

Resolves #872.
",functional
Allow user add throughput to performance charts,external
Analyse - Decomposition View: Extended with a Statistics panel  which shows the numbers ofpackages  classes and lines of code; for Java and C#. Lines of code is the full number of lines  including blanc lines and comments.,code smell
Analyse: Indirect inheritance associations are reported now; also indirect-indirect inheritance associations are reported (recursivly).,internal
Analyse: System documentation extended with UmlLink and Type Parameter declaration detection. UmlLink detection extended with links to library classes. C# code analysis improved (multiple inheritance. Test case extended.,internal
"Annotator now working. Still need some UI tweaks. Also, I'd like to inform users about what term replacement has taken place through visual cues. This could possibly fit with the visualise feature I wish to implement. Closes #11
",functional
"Applied patch 125967 from bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=263613.  Adds provisional 'socket' event API to org.eclipse.ecf.filetransfer, plus implementations in org.eclipse.ecf.provider.filetransfer and o.e.e.provider.filetransfer.httpclient.  Also adds support for rapid cancellation to httpclient-based browse, and restructures and adds tests.  Also requires changing EE for org.eclipse.ecf.provider.filetransfer to CDC 1.1/Foundation 1.1 + JRE 1.4.
",bugfix
Area data class,code smell
"Asynchronous loading of username, profile pic, mythings and featured things. Also user iteraction for loading by a loading icon.
",functional
"Attached is a patch to fix the current issues with building under jdbc1.
  This patch moves the logic that looks up TypeOid, PGTypeName, and
SQLTypeName from Field to Connection.  It is moved to connection since
it needs to differ from the jdbc1 to jdbc2 versions and Connection
already has different subclasses for the two driver versions.  It also
made sense to move the logic to Connection as some of the logic was
already there anyway.

Barry Lind
",bugfix
Avoid duplicate code by extracting inner class.,code smell
BATCHADM-72: Improve chunking traceability - add sequence info to chunks - Improve logging in ChunkMessageChannelItemWriter - Add mysql/h2/derby properties to integration project - Add drop scripts necessary for persistent databases,external
BEAM 4.7 data model changes: new Mask and VectorData classes,code smell
BEAM 4.7 data model changes: new Mask and VectorData classes,code smell
BLC-799 : When setting up a datasource with a ceiling entity that is not an interface  the inheritance hierarchy can be incorrect. (cherry-picked from 785dd2c),internal
"BO3 Branch Overhaul

- Added class WeightedBranchFunction extends BranchFunction
--- Weighted Branches spawn a branch that is dependent on the chance of
the other associated branches listed in the function
- Added class BranchNode
--- The three List objects of <Integer><CustomObject>and<Rotation> from
Branch have been reduced to one List object of <BranchNode> where each
BranchNode holds a single CustomObject, Rotation, and Integer
- Both weighted and normal branches now allow double values for branch
chances
- Extended Branch functionality, instead of a static chance out of 100
per branch, you may now configure the 100 value to be what you wish by
appending a value to the end of the function like:
Branch(...,branchZ, NORTH, 15, 25), where branchZ would have a 15 in 25
chance to spawn
",functional
BUg 495095 - Disable a test that tests functionality that isn't implemented yet,external
BVAL-31 first support for basic composition,internal
BZ-1060747 - IBM WAS 8.5 compatibility: splitting kie-services-client into kie-services-client and kie-services-jaxb (cherry picked from commit ba362d120c000ce13aadbb9e632359f3db48c753),external
"Baseline REPL functionality

Console is now fully interactive for basic category 1 instructions.
REPL now continuously reruns the program after each instruction and displays the stack contents.",functional
"Been working offline for too long. However  all the work submitted by this long change list is documented in the jobs attached. As far as I can tell right now  only two jobs remain unfinished: * JOO-5: At least managed to complement ""this."" for private members and for public members declared in the same file. * JOO-30: Implemented ""as"" and function syntax type cast in the runtime for interfaces only (and with bad performance  as the cast() call is completely obsolete). Also worked on support for get and set functions: these are only supported syntactically  and so far converted to normal functions named get$<member> and set$<member>. Not yet decided on a real solution.",external
"Began working on a feature that allows Common to store layout information for missing Dockables.

git-svn-id: http://svn.javaforge.com/svn/DockingFrames/trunk@371 3428d308-0d2e-0410-b3d4-94d0fefcacdf
",functional
Better encapsulation inspired by AbstractCRPDBTest.configureEntities (configuration of entities mixed with db configuration),internal
Better integrate the @ArgumentCollection into the command-line argument parser.  Walkers can now specify their own @ArgumentCollections.  Also cleaned up a bit of the CommandLineProgram template method pattern to minimize duplicate code.,code smell
"Better lookup of features by stepping through tags and not by stepping through the list of features.

Most nodes are just parts of a line.  Try to prevent converting nodes that are definitly not stand alone (eg just have
a created_by tag).

Saves about 5%

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@246 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"Better use of EMF reflective API in the ReqIF10Util class.

Many methods in ReqIF10Util are there to provide polymorphism over ReqIF
classes that define the same feature in leaf classes. For example the
SpecElementWithAttributes descendants, Specification, SpecObject, and
SpecRelation, all define a type attribute, but there is no way to handle
it polymorphically at the level of SpecElementWithAttributes. Same for
the AttributeDefinition descendants and default values. This change
makes better use of EMF reflective API, at times replacing lots of
identical code blocks handling all descendants. Generated code has been
favored in order to raise compiler errors in case of model changes.


Change-Id: I406023c3871cf1cfdf6c9481cca0753a4070b34e
Signed-off-by: Fran+?ois Rey <eclipse.org@francois.rey.name>",functional
Big refactoring to improve performance at N levels: - Serialization now minimizes the creation of temporary small objects like Strings. All serialization method receives a StringBuilder and append data directly to it - OLazyRecordSet now keeps the items always sorted for faster retrieval of items,external
Block inheritance by default on per-branch permissions.,internal
BookKeeper Client: Ensemble placement policy changes - Include ackQuorum as an argument to the newEnsemble method - Add ackquorum size to RRTopologyAwareCoverageEnsemble - Include ensemblesize  write quorum  ack quorum and existingEnsemble as a separate explicit argument to replaceBookie; so replacement decisions can be made in accordance with any constraints on the ensemble,internal
Break apart the inheritance structure of the timeline into Timeline and MessageListener.,internal
"Bring DatabaseMetaData feature tests up to date:

* NULLs are sorted differently in 7.2
* table correlation names are supported
* GROUP BY, ORDER BY unrelated is supported since 6.4
* ESCAPE/LIKE only supported since 7.1
* outer joins only since 7.1
* preferred term for procedure is ""function""
* preferred term for catalog is ""database""
* supports SELECT for UPDATE since 6.5
* supports subqueries
* supports UNION; supports UNION ALL since 7.1
* update some of the max lengths to match reality
* rearrange some functions to match the order in the spec
  for easier maintenance
",functional
"Brought ProxyWriter on par with ProxyOutputStream.

Since ProxyOutputStream is used far more often than ProxyWriter, it looks like we've failed
to keep them both up to the same level.

This change ports newer features and fixes from ProxyOutputStream to ProxyWriter, including
flushing, throttling, and I/O synchronization.

Since the code looks so similar, one wonders if there is any way to unify them, but
this turns out to be tricky because of the need to remain backward compatible. Command objects
for example need to be available in the exact same name, which means if we are to try to
unify them, we'd end up creating 3 copies (one in ProxyOutputStream, onein ProxyWriter, and
one in the unified version.) So I'm sticking to two copies.
",bugfix
Brought in old JUnit4ClassRunner for compatibility. Renamed new JUnit4ClassRunner to BlockJUnit4ClassRunner.,external
"Brought the ComponentProvider functionality up to date with the current functionality. ComponentProviders can be used (currently) to add new menu's + functionality to the client.
",functional
Browser should open to maximum size by default,internal
"BrowserOpenWindowCommand overhauled..no longer using ""features"" String to describe all features.
Now supports opening windows with various extent sizes.


",functional
Bug #1261: Extract method createTab with common functionality for each tab,external
Bug 103863 - Support encapsulation in SWT layout mechanism,internal
"Bug 216398 - [aspects] add handling of bundle and aspect versions to standard caching service, caching service API slightly changed to allow caching service to indicate that a class is remembered to be unchanged
",bugfix
Bug 233643 API builder performance bad for incremental build,external
Bug 256359 [metadata] Consider interfaces for Metadata classes,code smell
Bug 260913 [metadata] Move concrete metadata classes to an internal package,code smell
Bug 263090 [legacy] Load the model with commands and handlers Bug 271331 [Compatibility] Fill in the main menu with menu contributions Bug 271332 [Compatibility] Fill in the main menu with action sets,external
Bug 268036 Revoked the deprecated script method: beforeComputations and afterComputations  since it can't be replaced by beforeGenerations and afterGenerations respectively. Also added new PlotComputation as super class of PlotWithAxes and PlotWithoutAxes  so user can use code assistance in js editor more effectively and chart engine can remove much duplicate code.,code smell
Bug 268916: Support genReport -help to show help document in command line Bug 268915: [Accessibility]Provide engine supported optionName/configName list in genReport help,external
"Bug 27870  Patch For Form inheritance provided by Nacho G. Mac Dowell
Since this is a major functionality change though amount of code was small
Validator version rev changed to 1.2.0-dev


git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/validator/trunk@140178 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
Bug 283178 [Compatibility] Make actionSets visible/invisible,external
Bug 298671 Implement enough compatibility to bring up a simple view,external
Bug 298671 Implement enough compatibility to bring up a simple view,external
Bug 335909 - adjusted cfg generation for switch and dead code,code smell
"Bug 339968 - Lifecycle Mapping Page improvements

- passed.png from http://code.google.com/a/eclipselabs.org/p/workspacemechanic/
",bugfix
Bug 353240 [Compatibility] IWorkbenchWindow's openPage(String  IAdaptable) is not implemented correctly,external
Bug 372840: [quick fix] Add a quick fix to add the missing default in a switch statement,code smell
Bug 374605: Unreasonable warning for enum-based switch statements,code smell
Bug 388281 - [compiler][null] inheritance of null annotations as an option - comment 28: consider inherited annotation inside method body  too,internal
"Bug 396457 - [Releng][Maven] Create a build based on tycho

Add machinery to build the test feature and its constituent
bundles. Tests are not enabled by default, but when executed
all tests pass except those requiring the presence of a
running host service, for example, in these test bundles:
org.eclipse.ecf.tests.remoteservice.{generic,r-osgi}

Some minor tweaks were made to make configuring Tycho simpler
like making an abstract test actually abstract, removing a
completely empty test class that did nothing and making sure
valid test class names end with ""Test"" so they are detected
by Tycho.

Change-Id: Ic89a248668e4f08ee347fe3c0bcfd11e4cc23f4d
Signed-off-by: Mat Booth <mat.booth@redhat.com>
",bugfix
"Bug 411174 - can't add or remove I/O params on custom work item
definitions.
Also added copy/paste feature classes - work in progress and not enabled
yet.",bugfix
"Bug 412204 - Call Activity - Process and Global Task wrapping problems.
Added default property tabs for Global Tasks.
Added support for Global Tasks in Content Outline viewer.
Added static method in BPMN2Editor to open a new editor given a model
URI.
Bugfix in FeatureEditingDialog.",bugfix
"Bug 414645 : limit runtime-scoped dependencies visibility to test classpath

Change-Id: Id128d2a867968463d4a6bc8a35f93a6bdfc8ead8
Signed-off-by: Fred Bricon <fbricon@gmail.com>
",bugfix
"Bug 417567 - Unable to correctly arrange bpmn components in a process.
Still working on improving the layout of newly created shapes.",bugfix
Bug 428427 - introduced ResourceBundleProvider to increase extensibility for loading resource bundles,external
"Bug 431361 - Label and activity equals two objects
Bug 390575 - Support BPMNLabel DI elements
Bug 390566 - Label feature package is not exposed
Bug 355672 - BPMN2 Modeler Usability: look & feel
Bug 400944 - Add Participant Bands to CallChoreography and
SubChoreography
Saving work. Cleaned up the Choreography Activity update/layout mess.",bugfix
"Bug 431361 - Label and activity equals two objects
Bug 390575 - Support BPMNLabel DI elements
Bug 390566 - Label feature package is not exposed
Saving work - still need to update Activities and Choreography Tasks",bugfix
Bug 432265 - Support manifest inheritance and global properties for Cloud Foundry Deployment,internal
Bug 445802 - Heavy progress reporting degrades performance,external
Bug 476074 - [region] performance issue with large number of service listeners and service events,external
"Bug 479396 - deadlock in class loading when deploying at startup

Change-Id: I125f389a742a26dd18a03da736bb0de34a5b4871
Signed-off-by: Thomas Watson <tjwatson@us.ibm.com>
",bugfix
"Bug 486950 - [osgi R7] log service is being updated

Update various LogTrackers to no longer implement LogService to
avoid compilation errors.

Change-Id: Ie983f4cb18aef1d897d2fb7a3eccc0c47f07d91c
Signed-off-by: Thomas Watson <tjwatson@us.ibm.com>
",bugfix
Bug 497008 - java.lang.StackOverflowError or eclipse crashs when using Quick Type Hierarchy and Open Type Hierarchy on cyclic inheritances,internal
"Bug 511841 - AdapterManager.getAdapter can return wrong type

Added explicit type check for the values returned by IAdapterFactory
instances. If the return value does not match the adapter type, throw
AssertionFailedException with enough information who provided that
faulty adapter.

Change-Id: Ib527a7920250622055f93bb26855b2f52cc45743
Signed-off-by: Andrey Loskutov <loskutov@gmx.de>
",bugfix
"Bug 543638 - Improved MultiStatus#add performance

Changed the internal children array to an ArrayList to improve
performance when adding many children and simplify code.

Change-Id: I98fc3547c3d4866f68e7133532c21b98a6657460
Signed-off-by: Julian Honnen <julian.honnen@vector.com>
",bugfix
Bug 82854.  Reduced the size of the event classes. Fixed some of the copyright information. Removed some unnecessary classes.,internal
Bug 86013 Performance failures should be written to separate log,external
Bug fix : when an error happen before the total size is computed  the progress bar should be in determinate state.,internal
"Bug fixes after merge.

New DataStore tests.
Changed Reasoner to be a GroundKernelStore that can do optimization and fixed ADMM.
",bugfix
"Bug fixes to the grammar, and enum declarations now always have a type body, even if you have no semi-colon after the enum constant list.
",bugfix
"Bug fixes,
Heatmap clonning,
View annotated elements from results matrix.

git-svn-id: https://bg.upf.edu/svn/gitools/trunk@705 1b512f91-3386-4a98-81e7-b8836ddf8916
",bugfix
"Bugfix for property updates while in grouped rule mode, enabled multi-select in rule list - users can modify priority levels via new popup menu, bugfix for multi-value renderers, new RuleSelection class.  I'm still waiting for usability/feature feedback comments!

Need to implement: scrolling panel for property values, a splitter bar between rules & property tabs below, proper editors for enum types and multi-values, especially classes & interfaces. Still need to deal with statistical value rules - they throw exceptions at the moment, those guys have no defaults for now (not necessary?)

*** Please to not update the old PMDPreferencesPage, apply any necessary changes to the class of the same name in the temporary .br package. The old one remains as is where it is for comparison with the new one that shows up in the Eclipse preference panel right below the PMD entry (""Ruleset preferences - br""). 

git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6761 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
"Bugfix: DockableDisplayer can now calculate a point that must always be
visible to the user. This point is used when showing an externalized
Dockable to prevent it from leaving the screen.",bugfix
"Bugfix: if a MultipleCDockable was stored as child of another
MultipleCDockable, storing and loading the layout failed. The reason for
that was a feature in DockFrontend.addDockable, where the layout of any
new Dockable was updated if an old layout was stored in the frontend. In
the case of a MultipleCDockable there is an old layout stored, because
they are ""missing"" at the time when the layout-file is read. The
solution is to be more careful about applying old layouts when loading a
new layout at the same time.",bugfix
"Bugfixes and Java 5 compatibility.
 * Fixed bugs mentioned on forum, except ResNode
 * temp.setReadable/setWritable is not java 5
 * ImageIO.getReaderFileSuffixes is not java 5

git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@311 8f422083-7f27-0410-bc82-93e204be8cd2
",bugfix
"Bugfixes and features concerning perspectives

git-svn-id: http://svn.javaforge.com/svn/DockingFrames/trunk@761 3428d308-0d2e-0410-b3d4-94d0fefcacdf
",bugfix
Bugfixes and more Bukkit abstraction,internal
"Bugfixes for file filters preference page

git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@7581 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
"Bugfixes regarding perspectives

git-svn-id: http://svn.javaforge.com/svn/DockingFrames/trunk@673 3428d308-0d2e-0410-b3d4-94d0fefcacdf
",bugfix
"Bugs aus Cockpit und InfoPresenter erstmal ausgebaut, Rest funktioniert aber noch.
N+?chster Schritt: Eigene Plugins und eigenes Feature f++r Bug-Reports
",bugfix
"Bugs fixed:
  * fixed architecture handling and loading
  * fixed syntax highlighting using knowledge about initial lex states

New features:
  * Undo/redo improvement (added ability to undo/redo more than one
    char at once) / BUGGY
  * Added javadoc documentation

Improvements
  * change iconset to Tango (opensource) library
  * set equal widths/heights to all buttons (using new class NiceButton)
",bugfix
"BundleManifestAppender: Derives and appends manifest models for each
non-OSGi bundle candidate from the osgify context

Features:
* determine required execution environment
* package exports (with version)
* package imports (with version range)
* dynamic package imports (on basis of Class.forName(String))",functional
CAMEL-4417 Move AsnycProcessorTypeConverter.convert method to processor while keeping the old one for compatibility,external
CAMEL-4428 Introduce NamedNode as Abstraction of OptionalIdentifiedDefinition. This avoids some references from api to model,internal
CARE #85: Performance test engine,external
CAS-1116 Refactor KryoTranscoder to use an initial buffer size and add explicit buffer overflow protection to handle what should be edge cases with proper buffer sizing.  Also  correct improper usage of ByteBuffer#array()  which caused entire backing buffer to be stored in cache instead of just used bytes. Unfortunately the fix requires byte array copying with the resulting object allocation overhead.,internal
"CASC-33
Logging changes to help confirm functionality of logout valves.
Fix typo in regular expression-based logout valve class name.

",functional
CAY-2242 Vertical Inheritance: Cannot Insert Record With Multiple Flattened Relationships,internal
CAY-795 Horizontal inheritance,internal
CAY-795 Horizontal inheritance,internal
CDITCK-390 - Extend InterceptorBindingInheritanceTest,internal
"CELDEV-752 Improve ContextMenu loading Performance (#192)

* getCMIjson add logging

* improve timing

* change to double

* increase logging

* add logging to JsonBuilder

* fix logging

* add logging to parser

* introduce CelementsVelocityService

* replace RenderingEngine

* use VelocityContextModifier

* override RENDER_TIME#initialValue

* refactoring ContextMenuBuilder

* improve logging

* log fetcher

* fix ContextMenuBuilder

* fix compile error

* cache rendered text inside CMI

* only log long times

* log obj information

* add Cache

* remove cache

* log field info to renderText

* hide low time

* add isDebugEnabled

* extend logging for getSiblingMenuItem

* add SubNodesCache

* evaluateVelocityText add empty check

* switch to error logging

* refactor VelocityService

* add TreeNodeScriptService#getPrev/NextMenuItem

* fixes/refactorings

* add toString methods

* change naming fetchNodesForParent

* rename VelocityService

* ContextMenuItem obj clone

* add Immutable annotation

* ContextMenuItem decoupled from BaseObject

* removed deprecation
",bugfix
CHANGED: Reduced the number of File objects held in memory by FileFactory. CHANGED: Added an additional check when saving a file to payload directory of a bag to make sure it is actually saved there. NEW: Added a StopWatch class for measuring time elapsed between its start and stop method calls. Provides basic performance metrics for tasks that use it. NEW: ThreadPoolService now accepts cleanup tasks that are executed during @PreDestroy method. Updated TagFilesService to schedule a write all tag files to disk during cleanup. UPDATED: All storage event tasks to use StopWatch class.,external
CLEREZZA-511: improving performance without changing the public api as the issue suggests,external
CLOUDSTACK-10053: Performance improvement: caching of NuageVsp ID,external
CMTC-10 : [Groovy support] Add tests for metamodel inheritance,internal
CRUD  reorder  and inheritance of notes on workflow step.,internal
CSPACE-3175 Refactored *Resource classes to use functionality in two main base classes: ResourceBase  and SecurityResourceBase. Also  changed how some responses are now response code 400  BAD_REQUEST  where previously they were incorrectly sent as server error  500.  See extensive notes here: http://issues.collectionspace.org/browse/CSPACE-3175 ,external
Camel forge command - Align the duplicate code we have for add/edit endpoint options to use same class.,code smell
Camel forge command - Align the duplicate code we have for add/edit endpoint options to use same class.,code smell
"Change ""enabled"" to ""selected"" regarding whether we move or rename files

The terminology unfortunately was overloaded.  We have a checkbox that says whether or not the user wants the program to rename files.  But if the user has already decided they don't want the program to move the files, then they MUST allow it to rename the files (otherwise, what's the point?).  Therefore, when the user has told us not to move the files, the rename checkbox should be ""disabled"" -- greyed out, and unable to be interacted with.

This gets very confusing when we use ""enable""/""disable"" to refer to whether or not to use the feature, AS WELL AS whether or not to activate the UI widget.

So, try to reserve ""enable""/""disable"" for the UI widget, and refer to the ""move"" or ""rename"" functionality being SELECTED.
",functional
"Change WorldConfig.biomeConfigs from HashMap to simple array for better performance. Forge version need testes.
Fix wrong method name in forge.TCWorldChunkManager.
",bugfix
"Changed 'throws exception' from close() method on Connection class.
 Also changed test, so it doesn't rely on java 7 autoClosable feature.
",functional
Changed JOhm persistence paradigm to JPA-like from inheritance-like to make API use annotation-driven and minimally-invasive.,internal
Changed font size management to preferences,internal
Changed implementation of adding/removing/getting relationships on a node in cache layer. Previous implementation worked with sets but that had a performance problem  when doing small modifications to a node (create adding or removing a few  relationships). This could be noticed when node had many relationships (copy on  write on largers sets was just to slow). ,external
"Changed inclusion/filter strategy for aggregation of foreign features
when using mode unwrap. Now, the contents of all assembly features
accessible via dependencies will be included but filtered with the
normal features and plugins feature patterns.",functional
"Changed property name to be conistent.  For bug
https://bugs.eclipse.org/bugs/show_bug.cgi?id=420785

Change-Id: Iafb9430846cc6dcc120a08f7b1dafbd82b81558e
",bugfix
"Changed to a more efficient path visitor that is allowed to see what's going on in cubicTo and quadTo.  But there's a regression bug in the path drawing.
",bugfix
Changed to inherit from PackageMemberAnnotation  from which we get some implementation functionality.  Split SignatureConverter into its own top level class.,external
Changelog updated and make MetaData class compile,code smell
"Changes based on Keith's review.  A few tweaks to EdgeSet to help tracking edge
removal

	modified:   src/edu/ucla/sspace/common/Similarity.java

- Updated to use VectorMath.dotProduct for the Tanimoto coefficient

	deleted:    src/edu/ucla/sspace/common/WordComparator.java

- Moved to SimpleNearestNeighborFinder

	modified:   src/edu/ucla/sspace/dependency/SimpleDependencyPath.java

- Removed println

	modified:   src/edu/ucla/sspace/graph/AbstractGraph.java

- Added missing implementation to Subgraph class so now all the unit tests pass

	modified:   src/edu/ucla/sspace/graph/DirectedMultigraph.java

- Added missing implementation to Subgraph class so now all the unit tests pass

- Fixed bug for reporting the correct edge types after removal

- Removed dead code

	modified:   src/edu/ucla/sspace/graph/EdgeSet.java

- Updated so that disconnect() now returns the number of edges that were removed

	modified:   src/edu/ucla/sspace/graph/GenericEdgeSet.java
	modified:   src/edu/ucla/sspace/graph/SparseDirectedEdgeSet.java
	modified:   src/edu/ucla/sspace/graph/SparseDirectedTypedEdgeSet.java
	modified:   src/edu/ucla/sspace/graph/SparseTypedEdgeSet.java
	modified:   src/edu/ucla/sspace/graph/SparseUndirectedEdgeSet.java
	modified:   src/edu/ucla/sspace/graph/SparseWeightedEdgeSet.java

- Updated to support EdgeSet interface change

	deleted:    src/edu/ucla/sspace/graph/GraphRandomizer.java

- Removed dead class (functionality is in Graphs.java)

	modified:   src/edu/ucla/sspace/graph/SimpleWeightedEdge.java

- Fixed hashCode()

	deleted:    src/edu/ucla/sspace/graph/SparseSymmetricEdgeSet.java

- Removed dead class

	modified:   src/edu/ucla/sspace/graph/UndirectedMultigraph.java

- Added missing implementation to Subgraph class so now all the unit tests pass

- Fixed bug for reporting the correct edge types after removal

- Removed dead code

	modified:   src/edu/ucla/sspace/mains/FixedDurationTemporalRandomIndexingMain.java

- Updated to replace WordComparator with SimpleNearestNeighborFinder

	modified:   src/edu/ucla/sspace/mains/LexSubWordsiMain.java

- Updated to replace WordComparator with SimpleNearestNeighborFinder

	modified:   src/edu/ucla/sspace/text/LabeledParsedStringDocument.java

- Updated for new ParsedDocument interface

	modified:   src/edu/ucla/sspace/text/ParsedDocument.java

- Updated to specify the format of text() as the tokens with white space delimiters.

- Added a new prettyPrintText() which is the attempt to nicely format the tokens
  as they would have been originally.

	modified:   src/edu/ucla/sspace/text/PukWaCDocumentIterator.java

- Fixed javadoc

	modified:   src/edu/ucla/sspace/text/UkWaCDocumentIterator.java

- Added more class javadoc

	modified:   src/edu/ucla/sspace/tools/NearestNeighborFinderTool.java

- Updated to use the class instances instead of the interface

	modified:   src/edu/ucla/sspace/tools/SemanticSpaceExplorer.java

- Updated to replace WordComparator with PartitioningNearestNeighborFinder

	modified:   src/edu/ucla/sspace/tools/SimilarityListGenerator.java

- Updated to replace WordComparator with PartitioningNearestNeighborFinder

	modified:   src/edu/ucla/sspace/util/HashIndexer.java

- Fixed javadoc

	modified:   src/edu/ucla/sspace/util/PairCounter.java

- Fixed javadoc

	renamed:    src/edu/ucla/sspace/util/NearestNeighborFinder.java -> src/edu/ucla/sspace/util/PartitioningNearestNeighborFinder.java

- Moved so that NearestNeighborFinder can be an interface

	modified:   src/edu/ucla/sspace/util/ReflectionUtil.java

- Removed dead code

	modified:   src/edu/ucla/sspace/util/primitive/IntIntHashMultiMap.java

- Added javadoc

	modified:   src/edu/ucla/sspace/util/primitive/IntIntMultiMap.java

- Added javadoc

	modified:   test/edu/ucla/sspace/graph/DirectedMultigraphTests.java

- Uncommented out unit tests

	modified:   test/edu/ucla/sspace/dependency/BreadthFirstPathIteratorTest.java
	modified:   test/edu/ucla/sspace/dependency/CoNLLDependencyExtractorTest.java
	modified:   test/edu/ucla/sspace/dependency/WaCKyDependencyExtractorTest.java
	modified:   test/edu/ucla/sspace/text/corpora/PukWacDependencyCorpusReaderTest.java
	modified:   test/edu/ucla/sspace/wordsi/DependencyContextExtractorTest.java
	modified:   test/edu/ucla/sspace/wordsi/OccurrenceDependencyContextGeneratorTest.java
	modified:   test/edu/ucla/sspace/wordsi/OrderingDependencyContextGeneratorTest.java
	modified:   test/edu/ucla/sspace/wordsi/PartOfSpeechDependencyContextGeneratorTest.java
	modified:   test/edu/ucla/sspace/wordsi/psd/PseudoWordDependencyContextExtractorTest.java
	modified:   test/edu/ucla/sspace/wordsi/semeval/SemEvalDependencyContextExtractorTest.java

- Fixed unit tests to support proper tab-delimiting of the CoNLL format
",bugfix
"Changes to GameAchievement

 * Now includes the unlock date (if available)
 * Several adaptions of Ruby features for Java and PHP
 * XML data is now handled by the constructor of GameAchievement
 * Fixes achievements' SteamID attribute for Ruby and PHP
",bugfix
"Changes to Rule interface to support a Language value.  Every Rule must have a Language.  All the Java AST Rule base classes will default the Language, and enforce that it cannot be changed to something else (e.g. ImmutableLanguage interface).  XPath Rules must specify a Language in the RuleSet XML.  All existing Rules have had their languages set appropriately.

Also added a minimum and maximum Language Version to Rules.  By default these are null, indicating a Rule applies to all versions of a Language.  Some Rules can be defined to work only on certain Language Version ranges.  It is envisioned this will be used for Java migration related rules, and for future Rules concerning newer Java language feature usage (e.g. Annotations, etc).

Next step is to rework RuleSet to no longer use Language directly, but to defer to it's Rules.


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@6195 51baf565-9d33-0410-a72c-fc3788e3496d
",functional
Changes to the performance tests using JMeter. Added load test for the JPA store.,external
Changes to use the Datasource Abstraction libraries and to move Content Specs to their own database tables.,internal
"Changing all tests to inherit from ERXTestCase, not TestCase.
Adding stub methods to ERXEOAccessUtilitiesTest, ERXECTest.
Add functionality to Application, ERXTestUtilities for using model with different adaptors.


",functional
Checked in some dead code recommendations.,code smell
"Chris Meyer: This patch modifies the EROpenID framework to handle different kinds of OpenID message extensions. This allows clients to (potentially) handle ""simple registration"" messages as well as ""attribute exchange"" extensions. The old implementation only allowed for the newer ""attribute exchange"" extensions; and only one of those. The new implementation allows for more message extension types and now multiple ones can be requested too.

This patch is in preparation for additional patches to make it easy to retrieve additional registration information (such as an email address) without much effort on the client side.

This patch should be 100% backwards compatible although I have marked the older API as deprecated. I strongly doubt that anyone was using the older code since it was so limited in functionality, but any feedback would be welcome, of course.

This patch also adds several logging messages.


",functional
Clean up Navin's abstraction over Hibernate Core  clean style issues  apply back changes from my original fix patch,internal
Cleaned out some dead code that was replaced by Spring Social,code smell
Cleaned up SoapSerialization envelope.  Added some rudimentary dot net support so it will work with sites like weatherX etc.. Removed some dead code.,code smell
Cleaned up abstraction.,internal
Cleaned up some duplicate code in preparation for making plugin dir configurable.,code smell
Cleaning form generator classes  refactoring to remove duplicate code. EasyWSDl is the default WSDL parser because we have a library version problem with Woden.,code smell
Cleans up HtmlApiFilter to reduce duplicate code.,code smell
"Cleanup JGitRepositoryG??s describe mechanism

This improves readability of the code, fixes problems with tagged non-commit objects and saves a few instruction cycles.

The result now matches JGitG??s built-in DescribeCommand.
",bugfix
Cleanup test for JUnit 4 compatibility.,external
ClockService  Starting on decoupling (agreement from lease  finance),internal
"Closes gh-344. Updated pom for Bukkit 1.1-R1. Fixed compatibility with Heroes and other plugins by introducing new config REALDEATHS. If you turn it on, there no longer fast respawns (i.e. the player actually dies, letting other plugins register the death). Now you can also turn off death messages with DEATHMESSAGES. Fixed bug in inventory checking job.
",bugfix
Code cleanup:  Score function should work in doubles to avoid wrapping on longs for long distances;  Minimum distance we care about was too high;  Removed link between Geo Only and Lucene+Geo path;  Removed some dead code that was commented out,code smell
Code cleanups:   - remove dead code   - rename DocumentModifier => DocumentEdits,code smell
Code review tweaks: Event inheritance-based triggering protected over private Renamed and repackaged event related classes Comments,internal
Code review: pulled up some functionality into AbstractMarshallingSession. Reduces several cut-n-pasted code chunks.,external
"Code to create rules from the new style files.
This version still only uses map-features though.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/style@689 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"Coded MDI functionality and lots of other GUI code.

GMLTextArea
 * Leading spaces are converted to tabs
 * Tab width is set on initialisation
 * Added getTextCompat() to convert newlines and tabs back for resave
 * See Prefs.tabWidth
 * See Util.convertIndents(String)

GmMenu
 * Extracted from GmMenuBar to allow subclassing

GmMenuBar
 * Added Window menu

GmTreeGraphics
 * Background nodes are now shown correctly in the tree

MDIManager
 * Implemented resizeDesktop()

MDIMenu
 * The Window menu - it updates when frames are added and removed and offers some common commands
 * Subclasses GmMenu

MDIPane
 * Modified to call resizeDesktop() in certain cases
 * Added functions to close all etc.

VTextIcon
 * Fixed a generics warning

LGM
 * mdi is now an instance of MDIPane
 * Modified createTree to add a JToggleButton for the EventFrame
 * Reordered some GUI initialisation code to work with the extra toolbar button
 * Overloaded makeButton for other kinds of AbstractButton

Resource
 * Modified the arguments to copy - there are now two versions
 * Modified subclasses to use the new arguments.

ResourceFrame
 * Added javadoc comments to some fields to clarify their purpose
 * Modified resourceChanged in all subclasses to compare against resOriginal

ScriptFrame
 * Modified to use GMLTextArea.getTextCompat()

EventFrame
 * Added support for the toggle button

checkstyle.xml
 * TODO comments are now ignored - Eclipse already has better functionality for that

AbstractBitmap
 * Removed a FIXME comment

git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@113 8f422083-7f27-0410-bc82-93e204be8cd2
",functional
"Combined column/row synchronization peers into single item (Render.Column.js and Render.Row.js are now Render.ArrayContainer.js).  Shared functionality is an abstract base class.

",functional
"Comment and simplift the component painting function; this let me add new features where they needed to go, because the code became more comprehensible.

Add a dotted square box around the thumbnail icon.  (Looks slick IMO!)",functional
Common abstraction of DockElement  DockTitle and other elements representing Dockables,internal
Compatibility with SQ 6.1,external
Complete LUP decomposition with pivoting,internal
Completed test for verifying correct functionality of distributed cache.,external
"Completes  DURACLOUD-873-and-874: exposes prefix feature in synctoolui. Also added is the ability to set threads as well as automatically optimize them.
",bugfix
"Completes: https://jira.duraspace.org/browse/DURACLOUD-774

Combines the SyncTool and UpSync into a single executable jar. This jar is a build artifact of the synctoolui project, named duracloud-synctool-<version>.jar. Running this jar with command line arguments works just like the SyncTool. Running the jar with no arguments launches UpSync.

Part of this work involved transitioning the SyncTool to use logback for logging rather than log4j (and thus removing the feature which allowed the user to change the log level on the command line at run time). The work directory parameter of the Sync Tool is also now optional. If it is not provided, a default value (in the user's home directory) is used. This default value is also the value used when UpSync is put in use.

git-svn-id: https://svn.duraspace.org/duracloud/trunk@1072 1005ed41-97cd-4a8f-848c-be5b5fe45bcb
",functional
Composite operators now return SopremoModule instead of ElementarySopremoModule to help optimization and remove duplicate code,code smell
Concept charts visualization 1. The box plot outliers functionality is added 2. Removing not used code 3. Adding the heat map concept code.,external
Config decoupling continued.  Created a convenient abstract ConfigSingletonFactory class that can be used to create singletons based on config .properties.,internal
"Conglomeration patch to SAXOutputter based on patches from Laurent.
Items fixed include:

* start/endPrefixMapping was not being fired for no namespace
* DocType was being improperly constructed
* Assign a DefaultHandler to the dtd parser by default to better
  suppress unimportant problems

New feature:

* Support for outputting fragments of documents.

New methods:

output(Content)
outputFragment(List)
outputFragment(Content)

-jh-
",bugfix
"Consolidate and refine html bill text parsing

A number of fixes and consolidations of how html text is parsed and
converted to plain text.  This applies for bill, resolution, and memo
text that is parsed from xml files and scraped from lrs.

- Use same methods to extract plain text for scraped bills, as is used
  in xml processing.
- Make parsing methods specific to bills vs resolutions.
- Make parsing regexes more specific.
- Do not remove resolution headers for scraped bills by default.
- Add mismatch for resolution headers.

Fixes #12201
",bugfix
Consolidate database connecting actions reducing code complexity and duplicate code fragments,internal
"Constant scoring (#99)

* Working on a functionality to add constant scoring to configurable fields

* Added constant scoring capability for any field
",functional
"Continuing extend all #151 . Added unit tests for basic selector parts
match&replace and fixed some bugs.  The feature still neats to be cleaned
up and some flows are not covered by tests yet.
",bugfix
"Cool feature 002: You can now disable all redstone on a door (/credstone on), place a pressure plate in front, and then this pressure plate will open the door ONLY WHEN you use it. No redstone torches/levers/assertive chats will work on the door after activating the flag, either! (unless you're within 1 block of it) (#157)
",functional
Core API: Compositions support topic refs (#786).,internal
Correct PiffSampleEncryptionBox behaviour when asked for it's size before being written (after manual creation),internal
Coupling between object,internal
Create abstraction for definition references so it can be used by both ComponentDefRef and ModuleDefRef. (DefinitionReferenceImpl  BaseDefRefHandler),internal
Create alternative inheritance structures for axioms that do and do not need to cache entities and named individuals,internal
"Create functionality to execute MRP regenerative, Net Change , Selective
and MRP Multi Pegging
https://adempiere.atlassian.net/browse/MFG-1",functional
Create node functionality complete,external
"Created ResourceFrame class which gives base functionality to resource editing frames
Modified ScriptFrame to extend ResourceFrame - Fully Functional
Created FontFrame to edit fonts - Fully functional with font preview
Created IntegerEdit for checked value editing
Added a few $NON-NLS tags
Made GameInfo and Game Settings frames get re-created every time a new file is created
Made GameInfo and Game Settings set their frame icon
Game Settings now shows ""Last Changed"" as a date string
Added some static GM date functions to Gm6File
Gm6File now sets LastChanged on instantiation
Added instance id and tile id defragging
Changed readTree to take the Gm6File src argument again, for the future ability to merge games easily. Also, Resource names are now ignored in tree data and taken from the Resource itself.
Made Listener open scripts and fonts when node is double clicked, and made the frame update when the name is edited in the tree
Added openFrame() and updateFrame() methods to ResNode
Resources are now completely removed from the file when deleted
LGM explicitly sets the look and Feel on startup (this was just to test other LAF's)
Made all Resources set their name to the relevant prefix on creation, ResourceList adds LastId to the name string when add() is called.

git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@40 8f422083-7f27-0410-bc82-93e204be8cd2
",bugfix
"Created StubServer and Admin interfaces to define both parts of WireMock's core features. Refactored the admin handler to make use of the Admin interface, removing its dependency on the internals of the app.
",functional
Created ValidationEventHandler which allows the xml file to be validated Validates xml files before they are unmarshal Added an additional method to auto find a elementMass file in default location Generated the schema for aminoacidcomposition.xsd Change the XML file structure such that the element weight is directly recorded instead of computed Remove all the test cases for the computation of the abundance. Successfully generated an XML schema for ElementMass.xsd and AminoAcidComposition.xsd Remove abundance from ElementMass.xml,internal
"Created an alpha layer for Mobility over observers.

Mobility is now a shim in front of observers, specifically for the Mobility observer. This is not feature-complete and only the upload and read APIs for Mobility work with the observer. The other Mobility APIs will continue to use the old database, but because the upload now uses the observers, the old database will not contain up-to-date information.

There are several issues with this alpha layer:
* Uploads with any invalid points will cause the entire upload to be rejected.
* Error points do not conform to Avro's schema, so these will cause the upload to fail.
* The location status is not being recorded. If the location information is present, it is added to the meta-data and if it is ""unavailable"" it is not recorded. This means that reads will always have location statuses of ""unavailable"" and no location data or ""valid"" and location data. This can be added to the location portion of the meta-data, but, because we are strict in how we validate the meta-data, it would have the effect of requiring anyone who used our system to supply a status field.
* The Mobility point's ID is not being recorded. This has to do with an ongoing issue about duplicate uploads but can easily be added as a field in the point's ""data"".
* ""Sensor data"" points do not return the sensor data or classification data, when using the mobility/read API. Using the stream/read API, however, will return that data. The reason for this was to get something out the door that will still work with the existing visualizations.
* The server's Mobility points are not being classified.
* Other Mobility APIs such as chunked and CSV still use the old Mobility tables, so their data is not accurate.

References #264
",functional
"Created new ExternalRequirement component interface to represent external requirements of the EMR
* Implemented the CIEL version checking functionality as one of these components
",functional
"Created org.dawnsci.plotting.api because
1. API had unwanted features creeping into it
2. API had draw2d creeping into it
3. A separate plugin will be donated to eclipse project.",functional
"Created waitForAndGetView() which a lot of methods now use, also a lot of improvements and fixes have been made to the existing functionality
",functional
DAO abstractions and updated 'npc' sql file,internal
DATACMNS-387 - Introduce Slice abstraction.,internal
DATADOC-128 - Enable storing inheritance trees.,internal
DATADOC-63 - Added TypeMapper abstraction to customize how type information is written to a DBObject and retrieved from it.,internal
DATAGRAPH-564 - Rewriting SD-commons classes to be based on default abstract implementations. Deleting lots of dead code and cleaning up class dependencies.,code smell
DB abstraction; Added ConversionService approach; Corrected unit tests,internal
DDF-1219 Collapsing  normalizing  and refactoring unit tests. There are more opportunities for refactoring  but this represents approximately a 15% reduction in class size and removes much of the duplicate code.,code smell
DDF-465: Code clean up. Removed commented out code lines and duplicate code in the tests.,code smell
DDF-495 removed some duplicate code,code smell
DNA-178: Completed basic functionality to  retrieve nodes and properties,external
DRILL-4328: Fix backward compatibility regression caused by DRILL-4198,external
DRY'd up ShrinkWrapUtil.  Removed dead code.,code smell
DRY'd up the Tomcat remote container.  Refactored to composition over inheritence for the Tomcat Manager command URLs.,internal
"DURACLOUD-303 - Added server configuration mode of standard/advanced to the bulk services.  Advanced allows for the previous functionality of choosing the number and type of server instances.  Standard allows the choice of ""Optimize for Cost"" and ""Optimize for Speed""

git-svn-id: https://svn.duraspace.org/duracloud/trunk@304 1005ed41-97cd-4a8f-848c-be5b5fe45bcb
",functional
"DeallocationRules

The DeallocationRule functionality has been implemented. The docs are still way behind it,
though, and need a lot of work now.
",functional
"Decorator-related bugfixes

git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@7121 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
Decoupling the MethodTargetResolver from the ApplicationContext,internal
Decreased complexity,internal
Deduplicate code in InterpretedByteCode,code smell
"DelegatingPreparedStatement extends DelegatingStatement DelegatingCallableStatement extends DelegatingPreparedStatement => refactoring to remove duplicate code & other general cleanup => getDelegate methods changed signature (return always ""Statement"")",code smell
Delete dead code that isn't used anymore  as it's now automatically provided by DOM support,code smell
"Dependency Fixing: Added LaxHttpParser which can be used explicitly when using the lax header parsing functionality.
Added HttpParser which just extends LaxHttpParser in the original httpclient package to avoid breaking compatibility with code
which may still reference HttpParser.
Explicit commons code changed to use LaxHttpParser in arc/warc record reading
",bugfix
Deprecating old api key classes and moving functionality over to new api key resources.,external
"Detect deprecated API

The provider detects a deprecated API in the following case:
- today's date is later than the designated (hard-coded) sunset date of the API
- we get an exception that is caused by a FileNotFoundException

When we detect a deprecated API, we set a static variable, and then decline to attempt to do any more lookups.

Add a new Exception type, DiscontinuedApiException, that the provider can throw when it detects a detected API.  It continues to throw them for any subsequent calls.

Modify ShowInformationListener to have a new callback, apiHasBeenDeprecated.  Also, while here, change callback name from ""downloaded"" to ""downloadSucceeded"", so that it has a unique name that can easily be grepped for.

In ShowStore, catch the DiscontinuedApiException, and call apiHasBeenDeprecated on any listeners (via a call into the ShowName).

In UIStarter, the first time apiHasBeenDeprecated gets called, we put up a dialog box informing the user of the situation.  We also set a static variable so that we don't try to do any more calls, or show any more dialog boxes, after the first one.

Expose method isUpdateAvailable in UpdateChecker, to determine the message we present to the user when it's been detected that the API is deprecated.  If there is an update available, we suggest the user go download it, whereas if there's none available, we just suggest the ""check back"" later.  (Use new values in Constants.java for these messages).

Add similar functionality to TheTVDBProviderTest.  We need to create a stand-in show in the API deprecated case, to conform with Java expectations that the value of a Future will not be null.
",functional
"Dheeru | #437 | Refactored for better readability, fixed minor bug on container update before breaking off of for-loop in case of unmapping
",bugfix
"Discovered that adding annotations with argument lists to enum constants is tricky.

Added tests and fixed all problems that stemmed from it.
",bugfix
DocSerializer: removed duplicate code,code smell
Documented depositSchemaProperty  and refactored duplicate code into a single method within BeanSerializerBase,code smell
Don't allow inheritance in glue code (stepdefs and hooks). Also fixes #257 in a more encapsulated way.,internal
Done refactorings to solve https://bugs.eclipse.org/bugs/show_bug.cgi?id=342692 (inline of MeasurementUtil functionality to MeasurementOperator),external
Double Inventory Access From Chests Native Double Inventory Class Fixed Packet Size Calculations More Widget Changes Latest MCP HD Texture Support for MCP,internal
Dramastically increase performance Maybe fix low tps :O,external
"Due to a java bug, constants in enums don't work, so instead the default access level for @Getter and @Setter have now just been hardcoded in GetterHandler and SetterHandler.

Added ability to look up the Node object for any given AST object on Node itself, as you don't usually have the AST object.

Added toString() method generating to @Data, and this required some fancy footwork in finding if we've already generated methods, and editing a generated method to fill in binding and type resolutions. HandleGetter and HandleSetter have been updated to use these features.

Exceptions caused by lombok handlers show up in the eclipse error log, but now, if they are related to a CompilationUnit, also as a problem (error) on the CUD - those error log entries are easy to miss!

Our ASTs can now be appended to. When you generate a new AST node, you should add it to the AST, obviously. Getter/Setter have been updated to use this.
",bugfix
Dump sample for Mysql  file size request  file size printing for dumps.,internal
Duplicate code gathered in one location.,code smell
Duplicate code is my nemesis...,code smell
"EMAILPLT-20 and EMAILPLT-21:  Add delete feature;  fix batch pager bug

git-svn-id: https://source.jasig.org/portlets/email-preview/trunk@22140 f5dbab47-78f9-eb45-b975-e544023573eb
",functional
EMBRYO-40  EMBRYO-49  EMBRYO-28  EMBRYO-29: cleanup of dead code,code smell
ENH: add labels for all system entities Set EntityMetaDataMetaData.LABEL to required Use simpleName by default in EntityMetaData Consistency: rename *EntityMetaData classes to *MetaData classes,code smell
EST-257: refactoring inheritance hierarchy,internal
EST-610-add-display-order-to-property: Removed the @Nullable annotation  which was causing build errors. No longer sorting the allProperties() by default. Moved duplicate code in the moveUp/Down functions to a general move function. Removed secondary ordering by name. Since the allProperties() doesn't sort by default  several sorts are performed inside the PropertyOrderingViewModel,code smell
EST-76: more decoupling (asset from lease),internal
EST-794: removed RendererAbstract  inlining functionality to RendererForFreemarker subclass.,external
EST-838: new index module  decoupling Indexable from Lease,internal
"EXML night of the feature creep: you can now declare not only components, but also plugins, layouts, grid column types and any other classes (e.g. actions) in EXML! Instead of <exml:component>, just use the following new EXML root nodes: <exml:plugin> for ptype, <exml:layout> for type, <exml:gridColumn> for gctype, and <exml:class> for anything else.
",functional
EXOJCR-350 : Enable plugability of management layer : first pass of decoupling  need more work,internal
Eating a creature provides a stat bonus. Body size calculated based on part sizes. Entities now have width/height for intersection calculations. Screen helper for a random point within a restricted region of the screen.,internal
"Elasticsearch 5: Use auto-IDs and implements scan

This commit refactors the indexing of documents in the Elasticsearch 5
binding to use auto-generated IDs, instead indexing the key field as a
dedicated field rather than using it as the ID. This enables us to
implement scan functionality which we add in this commit as well.
",functional
Eliminated duplicate code between GenericBuiltinGuard and BuiltinSpecializer,code smell
Encapsulate core raw + derived data into SlimData class.,code smell
Enhanced ERXFetchSpecificationBatchIterator to optionally re-filter batches against the original qualifier after fetching. Also wired things up so that interleaving calls to nextBatch() with calls to next() or nextElement() works as expected  as does changing the batch size mid-stream. (Committing to trunk  and copying trunk version to Wonder_2_0_0_Branch branch.),internal
Enhanced WKTShapeParser for extensibility.,external
Enhanced tool palette composition functionality. Added Morph Activity/Gateway features.,internal
Enhanced tool palette composition functionality. Added Morph Activity/Gateway features.,external
Entangled Table_Test  partially removed duplicate code,code smell
Error messages are slightly colorized  continued implementing JPA setup abstraction,internal
"Event 'List' and Action List nodes now select next sibling on deletion as per feature thread 577.

git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/branches/versioning@441 8f422083-7f27-0410-bc82-93e204be8cd2
",functional
Expose our own History abstraction to avoid needing so many hacks,internal
"Exposed source provider functionality through spi.

git-svn-id: https://google-guice.googlecode.com/svn/trunk@74 d779f126-a31b-0410-b53b-1d3aecad763e
",functional
"Extended <propertyTab> to allow use of a ""default"" class, which simply provides a list of BPMN2 element features. This gets rid of about 30 classes from the org.eclipse.bpmn2.modeler.ui.properties package.",functional
"Extended Binding to better support tools. Fixed bug where we were ignoring exceptions during member injection. Added TOOL stage.

git-svn-id: https://google-guice.googlecode.com/svn/trunk@354 d779f126-a31b-0410-b53b-1d3aecad763e
",bugfix
Extract duplicate code into a method,code smell
Extract duplicate code into a method,code smell
"Extract memcached/couchbase client setup to factories to make dependency on couchbase jars optional.

Fixes #177: msm requires couchbase jars even when not using couchbase
",bugfix
Extracted A SortedIndex interface from the Index interface to non sorted indexes having to deal with that leaky abstraction. - Added A free() method to the Paged for symetry with the alloc() method. - Added A A couple of pre canned Marshaller impls,internal
Extracted and renamed some interfaces  as the first step towards reducing coupling between the parsing and specification modules. This will eventually allow multiple specification methods.,internal
Extracted protocol and server bits into abstraction.,internal
"Extracted the administrative methods from the services and into a separate ""ServiceAdministrator"" component.  The use of composition rather than inheritance allows each service to reuse the service management functionality without having to extend a base class.  ",internal
"Extracts the copying of a bucket from BucketArchiver, so copying-bucket-feature can exist. #80

The difference between the old
BucketArchiver and BucketCopier,
is that in addition to copying the
local bucket to the archive, the
archiver also deletes the local
bucket on successful copy.
",functional
FACES-1358 Develop JSF1 <-> JSF2 compatibility layer (Add support for detection of JSF 1.x request headers),external
"FACES-1894 Add general utilities for Liferay Faces Alloy Components (Added features to escape JavaScript in strings for attributes which could be expected to output user submitted data. Changed generated code to use escaped JavaScript by default. Added use of non-escaped JavaScript where apprpriate.)
",functional
"FACES-1897 Develop alloy:inputDate component (Add feature to render native datePicker for mobile browsers when running in liferay or webapp.)
FACES-1954 Develop alloy:inputTime component (Add feature to render native timePicker for mobile browsers when running in liferay or webapp.)
",functional
"FACES-1942 Develop alloy:field component (Added feature where field styles itself according the validity of its children or the severity of the messages of its children. Added bootstrap class to the label.)
",functional
"FACES-1942 Develop alloy:field component (Added feature where field styles itself with success/green if child components are valid during ajax.)
",functional
"FACES-1967 MyFaces compatibility (moved MyFaces fix to ApplicationCompatImpl since the 3-arg signature of createComponent is only since JSF 2.0)
",bugfix
"FACES-257
Bridge generates URLs that can be incompatible with Liferay friendly URLs
(fixed bug WSRP related bug that was introduced during refactor)
",bugfix
"FCREPO-820: Fixes FeSL PolicyIndex update issues

Adds PolicyIndex test cases to ConfigC, fixes issues with
- object state changes ""null""
- modifications to non-FESLPOLICY datastreams
- purge datastream version
Incorporates patch from Mark Roy (see FCREPO-820 for patch)
",bugfix
"FEATURE: allow to save analyses made on the fly.

- new MatrixFactory to create matrices from MatrixView --> some matrices needed new constructors and further new details
- analysis details are more unified, showing where analysis is stored and what files are included
",functional
FINALLY! decoupled the gwt  amf  rest  and xfire modules from the spring-app module. rearchitected  loosened the module dependency tree streamlined the configuration for spring 2.5 support removed unneeded complexity in spring-app. split out each module into its own servlet.,internal
"Factored out ""center"" functionality from showFrameCentered functions",external
Factored out useless cell value abstraction,internal
Factorize duplicate code in SnmpConnection,code smell
Feature #4149 : user account validity - modifying database structure around users - modifying unit tests datasets around users - modifying models and query mechanism around users - adding columns into ST_User for next features - deleted users are retrieved by their state and no more by access level - changing the management of user accessLevel information - removing some dead code - centralizing/refactoring some code,code smell
"Feature #53: Support ""per project pom templates""

Now, project-pom.xml files, located in project folders, will be merged
into the generated pom.xml files",functional
"Feature #57: Introduced ModuleValidation with the following constraints:

* AvoidDotAndJarOnBundleCPConstraint: Checks if a bundle contains JARs
and ""unjared"" classes
* EclipseBundleShapeConstraint; Checks if a bundle requires to be
unpacked and doesn't contain the manifest header ""Eclipse-BundleShape:
dir""
* ProjectEncodingConstraint: Checks if build encoding
(project.build.sourceEncoding) is equal to the eclipse project encoding
(encoding/<project>)",functional
"Feature #76

- Implement exclude fields feature using exclude_fields in options
attribute.
- Example:
""options"": {
""exclude_fields"": [""exclude-field-1"", ""exclude-field-2""]
},
",functional
"Feature Request to add BigInteger NumberReturnType support for JsonPathConfig

In order to validate any json integers, you currently need to know the
type ahead of time.  If that's not possible, say in the case of an
integration test on live dynamic data, integer values should be able to
always return the same type.  The common type for integers of any size
is BigInteger.
",functional
"Feature/#533 (#636)

* #533 - The first part of #533 task. Nonbreaking changes in poms, unit tests and integration tests. Fix for coveralls. Test framework integrations (junit4, junit5, testng) added into a pipeline.
TODO: fluentlenium-core repackage (breaking changes)
",functional
"Feature/unit test additions (#647)

* Add a few various unit tests and code simplifications
* Add unit tests for matchers
* Add unit tests to and simplify CssSupportImpl
* Add unit tests for filter related classes
* Remove TODO comments
",functional
"Feature:  Support multiple versions of ClientTools

In conjunction with ""multiple target platform"" support, the user may
also have several versions of the Client Tools packages.

The goal is to allow the user to arbitrarily specify targets and client
tools, but continue to work with a single ECL code base.

Note:  Should the versions diverge to such an extent that the ECL could
never be compatible between them, it will be recommended to use the
Eclipse ""Workspace"" feature to separate them out (IOW the user has the
choice on how to configure their environment appropriately).

Signed-off-by: Gordon Smith <gordon.smith@lexisnexis.com>
",functional
Final modifications to implement new event model that eliminates many couplings.,internal
Finalize decoupling of producer parts from concrete JAX-RS implementation,internal
Finalized Sorting  Hashing and Resettable logic. Baseline performance passed.,external
Finished eliminationg duplicate code,code smell
"Finished implementing suppression by annotations feature


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@3914 51baf565-9d33-0410-a72c-fc3788e3496d
",functional
"Finishing the HiLite functionality

Registering the HiLiteListener in the HeatMapViewerNodeView and initialization of HiLites registered at the moment of the view instantiation.
Migrating the HiLiteListener interface implementation from the ScreenViewer to the HeatMapModel2.
Adding INPORT field to the HeatMapViewerNodeModel that is now used to get the HiLiteHandler in der HeatMapModel2 and the HiLiteMenu.
Propagating the HiLiteHandler to the PlateViewer so that all the HeatMapViewer windows are synchronized.
",functional
"First set of cleanups necessary for Bazel adoption

Unfortunately, I started doing cleanups before realizing I had to do a
lot of them, it is now impossible to split this commit without redoing
the work.

The changes are all necessary to improve modularity and break dependency
cycles, which were present in the old code but make it impossible to
adopt Bazel.

I wasn't fully aware of those cycles, so thank you Bazel.  :)

List of cleanups in this commit:

* remove 3 unused classes;
* move constants from FPUConfigurator to FPPipeline and CPU. Remove
  FPUConfigurator;
* move CycleBuilder outside the CPU, since it depends on CPU itself;
* move some FPU-specific enums from CPU to FPU classes;
* move some Memory-specific constants from CPU to Memory;
* create an interface called InstructionInterface, so the CPU can use it
  and Instruction (which implements InstructionInterface) can depend
  on the CPU without cycles;
* pass a BUBBLE to the CPU constructor (otherwise we have a cycle);
* move Converter, IrregularStringOfBits, IrregularStringOfHex from utils
  to core;
* make it possible to set the data offset in the Dinero class, and
  remove the dependency on Memory (so Memory can depend on Dinero);
* move Bitset64FP, RegisterFP from core to core/fpu;
* change enum name from FPPipeline.Costanti to FPPipeline.Constants;
* remove unused attribute in FPPipeline and fix some cosmetic issues;
* move parser-related classes from core to core/parser;
",bugfix
First step towards store size limit,internal
"Fix #361 Reveal hidden element after drop

When an element is hidden and the user drag&drop this element to
the current diagram, the element is revealed. If one of the parent
containers is hidden all the hierarchy of the element is revealed.
",bugfix
"Fix #441: Update new split tab view position on the UI thread

Moved position update onto the UI thread so it is executed when
the UI reconfiguration is complete. The view position is adjusted
to match observable VIM behaviour -- keeping the cursor at a relative
offset to the top of the split.
",bugfix
"Fix #747, fix regression on '*' and '#' feature.

I had to update the tests to handle the special case of enabling regex for '*' and '#' regardless of regexsearch config value.",bugfix
Fix #792 : JUnit 4.12 compatibility,external
"Fix Block name matching for protectable blocks in core.yml. This finally properly fixes support with specific ModLoader blocks (e.g. 145:2) as long as it reports proper block / data. HOWEVER, BREAKING CHANGE! If you use LWC-Economy you need to update to the latest build.

This begins development on 4.4.0 because of the breaking change as mentioned before which will not be made backwards compatibility to ensure 100% compatibility with ModLoader blocks going forward.
",bugfix
"Fix CycleElement selection logic

In CycleBuilder, instad of using a map just get the last N CycleElements and
then pick the right one based on how many times a given instruction has been
processed in the current CycleBuilder step.

Also, do some minor readability improvements.

Fixes #139
",bugfix
"Fix Histogram Tool, Trac #699; hide unimplemented features, Trac #731

When the Histogram Tool was closed it would go away for the entire Fiji session; now it gets redisplayed every time you fit a new set of images.  Unimplemented features such as VisAD analysis removed from the UI temporarily for this version, to create a more seamless user experience.  Commented out debugging printouts.
",bugfix
"Fix Issue 423:	Make compressed file name on editor tab a preference
Fix Issue 426:	Add syntax coloring option for read literals
",bugfix
"Fix List and Detail composite late registration because of indeterminate
load order of plugins (moved registration from ui Activator back to
editor)
Partial fix for custom task definition files (wid) in jbpm5 plugin -
these types of CustomTaskDefinitions need to be associated with IProject
instead of TargetRuntime instance
Added task feature container to example runtime plugin
Fixed tool palette update problem when switching tabs",bugfix
"Fix MCPC+ compatibility when used as a Bukkit plugin

Terrain Control now accepts more orders in which methods can be called.

You can't use TC as a Forge mod at the moment on MCPC+, but that will be
fixed soon.
",bugfix
"Fix Pipeline error handling.

The Pipeline class was not killing the pipeline task workers correctly.
The error handling method would use CompletableFuture#cancel to stop the
workers but this did not work as I had expected since CompletableFuture
does not have any control over the thread that is delivering the future.
I have successfully implemented the worker killing functionality by
setting a ""finished"" flag on the PipelineTask runnable objects.  This
flag is checked periodically during the PipelineTask excecution loop and
will break the loop if it is observed to be set.

Additionally, I have placed a 1 hour timeout on the pipeline execution
in the nysenate.gov bill report service.  This will prevent the report
from indefinitely blocking the data processor.

Fixes #12180
",bugfix
Fix Quality flaws about complexity,internal
Fix bad URL rewriting during CSS inspection when nut comes from heap composition.,internal
"Fix bug 1524285: code refactoring for data access layer:
Fetch cluster, nodegroup, node info within a single hql query from database to improve performance.
Optimized getInstanceNum method to retrieve instance with a single hql query instead of count the nodes.
Add new static toRead methods to convert entity and do not fetching data from db anymore.
Deprecate the old toXXXRead methods
",bugfix
"Fix concurency issue in the addHeaders processor

We sometimes had stack traces like that:
```
java.util.ConcurrentModificationException: null
    at java.util.HashMap$HashIterator.nextNode(HashMap.java:1437)
    at java.util.HashMap$EntryIterator.next(HashMap.java:1471)
    at java.util.HashMap$EntryIterator.next(HashMap.java:1469)
    at org.springframework.util.LinkedCaseInsensitiveMap.putAll(LinkedCaseInsensitiveMap.java:104)
    at org.springframework.http.HttpHeaders.putAll(HttpHeaders.java:620)
    at org.mapfish.print.processor.http.AddHeadersProcessor$1.createRequest(AddHeadersProcessor.java:81)
    at org.mapfish.print.http.AbstractMfClientHttpRequestFactoryWrapper.createRequest(AbstractMfClientHttpRequestFactoryWrapper.java:48)
    at org.mapfish.print.http.AbstractMfClientHttpRequestFactoryWrapper.createRequest(AbstractMfClientHttpRequestFactoryWrapper.java:52)
    at org.mapfish.print.URIUtils.toString(URIUtils.java:231)
    at org.mapfish.print.map.geotools.GmlLayer$Plugin.createFeatureSource(GmlLayer.java:120)
    at org.mapfish.print.map.geotools.GmlLayer$Plugin.access$000(GmlLayer.java:55)
    at org.mapfish.print.map.geotools.GmlLayer$Plugin$1.load(GmlLayer.java:101)
    at org.mapfish.print.map.geotools.AbstractFeatureSourceLayer.getFeatureSource(AbstractFeatureSourceLayer.java:66)
    at org.mapfish.print.processor.map.CreateMapProcessor.getFeatureBounds(CreateMapProcessor.java:599)
    at org.mapfish.print.processor.map.CreateMapProcessor.zoomToFeatures(CreateMapProcessor.java:519)
    at org.mapfish.print.processor.map.CreateMapProcessor.execute(CreateMapProcessor.java:132)
    at org.mapfish.print.processor.map.CreateMapProcessor.execute(CreateMapProcessor.java:103)
    at org.mapfish.print.processor.ProcessorGraphNode$ProcessorNodeForkJoinTask.compute(ProcessorGraphNode.java:200)
    at org.mapfish.print.processor.ProcessorGraphNode$ProcessorNodeForkJoinTask.compute(ProcessorGraphNode.java:176)
    at jsr166y.RecursiveTask.exec(RecursiveTask.java:64)
    at jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:305)
    at jsr166y.ForkJoinWorkerThread.execTask(ForkJoinWorkerThread.java:575)
    at jsr166y.ForkJoinPool.scan(ForkJoinPool.java:733)
    at jsr166y.ForkJoinPool.work(ForkJoinPool.java:617)
    at jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:369)
```
",bugfix
"Fix examples, various NPEs.
Bug 435763 - IReconnectionFeature don't work whit custom links.
Added code to disable validation during file loading to avoid txn
rollback.
Fix activations for Property Tabs",bugfix
Fix for 256-bytes payloads  better errors for payloads that exceed the maximum size allowed  ability to estimate the size of a payload before adding a property  option to reject properties if the size estimate exceeds the maximum size allowed  new class for running specific tests related to reported issues  and more.,internal
Fix for query parameters deserialization with remote connection Fix for ObjectDatabase automatic OClass generation and inheritance Fix for ObjectDatabase in version field conversion,internal
"Fix issue 16 by working around Java's lack of SNI support

GetSentry.com uses Server Name Indication and Java versions before 7 do
not support this. Through the naiveSsl configuration option users are
able to work around this problem without having to add the certificate
to their keystore. This should only be used for testing purposes,
but... yeah.
",bugfix
"Fix issue in /copydatabase, fix potential startup bug that caused player
shops to appear empty, add max stock option for player shops, add buy
and sell prices for playershops",bugfix
"Fix issue with global ID generation

Prior to this fix the temporary ID was being used which was causing
duplicate ID isses in the DB. Now we generate the correct ID once
and use it throughout.
",bugfix
"Fix issues with joining a team.

Players are no longer silently kicked out of their team if they try to join
a non-existant team with /join. Fix an inconsistency with the format of the
team join notification message.
",bugfix
"Fix pb with ""Image interpretation in header and footer doesn't work"" in
docx (see http://code.google.com/p/xdocreport/issues/detail?id=70).",bugfix
"Fix performance regresssion introduced by using InetSocketAddress
getHostName()
Patch provided by Scott Harrington, improved upon by Kris Jurka
",bugfix
Fix performance regresssion introduced by using InetSocketAddress getHostName() Patch provided by Scott Harrington  improved upon by Kris Jurka,external
Fix really a lot of bugs; rewrite for performance,external
"Fix reload functionality.

Reload was broken because of missing cache invalidation. Now, reload
flushes the function repository cache for the library, and also the
global function cache. Only local code libraries are reloaded, though,
which is what we want.
",bugfix
"Fix setting labels and assignee on PullRequests

Setting labels and assignee on Pull requests failed silently, because
the API endpoint being hit contained '/pulls/' rather than '/issues/'.

""Every pull request is an issue, but not every issue is a pull request.
For this reason, G?sharedG? actions for both features, like manipulating
assignees, labels and milestones, are provided within the Issues API.""

https://developer.github.com/v3/pulls/#labels-assignees-and-milestones
",bugfix
Fix size parameter passed to freeSpace,internal
"Fix some Code Inspections issues

Code Style issues:
- 'size() == 0' replaceable with 'isEmpty()'
- Type parameter explicitly extends 'java.lang.Object'
- Unnecessary 'this' qualifier
- Unnecessary enum modifier
- Unnecessary fully qualified name
- Unnecessary interface modifier
- Unnecessary semicolon

Data flow issues:
- Redundant local variable

Imports:
- Unused import

Inheritance issues:
- Missing @Override annotation

Java 5:
- 'for' loop replaceable with 'foreach'
- 'indexOf()' expression is replaceable with 'contains()'
- 'StringBuffer' may be 'StringBuilder'
- Unnecessary unboxing

Probable bugs:
- Unused assignment

Performance issues:
- Instantiating object to get Class object
- Manual array to collection copy
- Use bulk operation instead of iteration

Verbose or redundant code constructs:
- Redundant array creation
- Redundant type arguments
- Redundant type cast
",bugfix
"Fix stack overflow on long methods bug. See test case for more details. - Convert the problematic recursion (SEARCH of SSA conversion) into an ""iterative"" code (by introducing a stack data structure.",code smell
Fix test XmlDecoder (Duplicate code removed),code smell
"Fix tests failing against prod

Some tests were unable to execute successfully against production. This is a temporary fix that avoids a trust manager when pointing at production. The long term fix is to rip out trust managers in feature code. Only tests should care about pointing at unverified SSL certificates.
",bugfix
Fix the ted bug 18097 : Performance enhancement:  DTE should use ArchiveEntryInputStream.read() when reading only one byte data from report document,external
"Fix threadsafe issue with zoomToFeature

When multiple maps are sharing the same features and are using zoomToFeature,
we had cases of empty maps because the computed BBOX was null. This was caused
by threadsafety issues in GeoTools.
",bugfix
Fix tracker bug 94614 : BIRT: performance issue with function dataRequestSessionImpl.getColumnValueSet.,external
"Fix two bugs reported by Dogacan Guney.


git-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@491291 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
"Fix virtual biome ids ending up in the world save files in Forge. Fixes #269

This bug was masked for a long time.. Because of the cast to byte, it
wasn't obvious that the chunk biome array in Forge contained garbage
data.

Previously: shove every biome id, virtual or not, in the world save
files, cast everything to a byte so that it will fit.
Now: actually look up the correct saved id based on the virtual id.
",bugfix
"Fix wrong condition in JMXTransformer.processFilesIntoServers(). Fixes #240.

Also extracted some of the parsing logic to make it testable.
",bugfix
"Fixed ""enter/leave"" sequence bug in the circular reference detection

- Circular Reference Detection: Fixed 'Detected inconsistency in
    enter/leave sequence. Must always be LIFO.' bug that could occur
    due to inconsistent cleanup of the instance memory when a circular
    reference has been detected.

[Fixes #107]
",bugfix
"Fixed #137 SimplePointMarker size display and hit test. Now radius
parameter is used correctly as radius. NB: This might break previous
behavior and modify the visual result of your existing code!",bugfix
"Fixed #17 - made toggling Vrapper instant and global
  * I kind-of abused WeakReferences in the process
    - I thought keeping old editor alive by Vrapper may be the cause of #28
      - they may be; it needs further investigation
    - weak maps are good idea for observers, anyway
      - http://blog.kamil.dworakowski.name/2008/01/anti-pattern-static-subject-to-observer.html
",bugfix
"Fixed Bug #37: NPE in ProductProjectGenerator

* ProductProjectGenerator is now aware of missing feature tags
* ProductProjectGeneratorTest#testGenProduct_Bug37()",bugfix
"Fixed Code Completion
Implemented abstract keyword classes in a new file DefaultKeywords, which can be overridden. Also implemented the abstract method GetKeywords() to default token marker, so that no where in CodeTextArea is the lexer/language hardcoded. Please see my comments added to the shader editor, checking for if the token marker actually changes should moved into the JoshEdit code base as a feature, code should also be expanded so that every code editor utilizes the same static completion list to save memory.
",bugfix
"Fixed FeatureContainer overrides from TargetRuntimes - connection FeatureContainers defined in an extension plugin were not working
Added a test implementation to org.eclipse.bpmn2.modeler.runtime.example plugin for SequenceFlowFeatureContainer override
Fixed Outline refresh problem when figures are deleted from diagram
Disabled Outline key handlers for now - pressing ""Delete"" caused the entire Outline to disappear
Added icon for ItemDefinitions - only text appeared in Outline
",bugfix
"Fixed Issue #28. Now multi-start optimization uses BOBYQA if multivariate, Brent if univariate. Also make Brent the default optimizer for MergedObjectiveFunctions if univariate.
",bugfix
"Fixed NumberFormatException problems on map names that are not integers.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@718 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",bugfix
Fixed Term delete api incompatibility with runway gis universal requirements.,external
"Fixed UI bug for ECF Buddy List view.  Added new functionality:  1) new images for active/inactive user in org.eclipse.ecf.ui.  2) Changed behavior of rosterview to better handle groups, and to display number available and total in group. 3) Added new API for handling subscribe/unsubscribe requests (ISubscribeListener); 4) Added code in collab example client to demonstrate use of ISubscribeListener API; 5) Added support in provider org.eclipse.ecf.provider.xmpp.  6) Replaced version of Smack jars with one based upon 1.5.1 of Smack libraries...after removing copyrighted images and replacing StringUtils.encodeHex
",bugfix
"Fixed a blocking bug in reservation system. Should work now. Fixed issues: 171-174
Working fine on Tomcat 7.

Changes in design:
- design was cleared, now it's more space about elements
- submit button is in center of calendar
- headers above selectboxes are bold

Changes in functionality:
- after selection endtime<=starttime, JS makes effort to change endtime to value > startime (at end of the day, an ""invalid time"" message is shown and submitting is blocked)
- when current time >= 18:00, next day and morning hours are selected in form + message ""it's late"" is shown BUT user CAN select current day by clicking to calendar
- when current time >= 21:45, the same as in previous happens BUT user CANNOT select current day
- when current time >= selected starttime (and selected date == current date), a message is shown and submitting is blocked

git-svn-id: https://svn.origo.ethz.ch/eeg-database/trunk@820 1a751040-f3c7-4aaa-98da-1e85aacc1d30
",bugfix
Fixed a performance bottleneck in adding ids to RelIdArray,external
Fixed a performance bug where output streams / outputwriters were not properly closed. This affected the performance of rendering raw Strings and raw byte arrays.,bugfix
Fixed a permissions-related issue in the upload files functionality where a user was being authorised for a null domain object.,external
"Fixed a problem with different units and lattice spacings.

For a general tetragonal lattice the lattice unit factor for the Gauss constraint does not really make sense as we are combining all spatial components of the electric field, which all carry different lattice unit factors.
I corrected the Gauss constraint calculation and expressed it in physical units, which in turn has an effect on the units we use for the current and the charge density (both are now also given in physical units).
This is not really a satisfactory solution and we should think about this a little bit more.
",bugfix
"Fixed a small bug, now there should be less artifacts after a drag operation. Updated the imports again. Note to myself: JavaDoc needs imports too.

git-svn-id: http://svn.javaforge.com/svn/DockingFrames/trunk@53 3428d308-0d2e-0410-b3d4-94d0fefcacdf
",bugfix
"Fixed an external rule parsing problem.... refs + overrides were not happy.  Added another test, too.  RuleSetFactory really needs to be refactored, but I don't see a nice way to do it at the moment


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@3083 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
"Fixed an issue in the ecj transformer for Yield.yield(...) where IfStatements broke the state-machine. Also added a Tests for that.
",bugfix
"Fixed and improved some graphics related code.
 * Fixed a small bug in `GmTreeGraphics` which would often cause wrong icon to be painted when editing the name of a resource.
 * Fixed the use of `WeakReference.get` in `GmTreeGraphics.getSpriteIcon`. The `get` method can suddenly return null, even if the previous call to the same method returned an object, so it should only be called once.
 * Optimized `GmTreeGraphics.getBlankIcon`, `GmTreeGraphics.getBackgroundIcon` and `Util.getTransparentIcon`.

git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@249 8f422083-7f27-0410-bc82-93e204be8cd2
",bugfix
Fixed bug 1055930 - CouplingBetweenObjectsRule no longer throws a NPE on interfaces,internal
"Fixed bug 1170109 - The Ant task now supports an optional 'targetjdk' attribute that accepts values of '1.3', '1.4', or '1.5'.


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@3404 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
"Fixed bug 1235299 - NullAssignment no longer flags null equality comparisons in ternary expressions.


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@3670 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
"Fixed bug 1250949 - The JDK 1.5 parser no longer chokes on annotated parameters and annotated local variables.


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@3770 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
"Fixed bug 1291353 - ASTMethodDeclaration isPublic/isAbstract methods are always return true.  The syntactical modifier - i.e., whether or not 'public' was used in the source code in the method declaration - is available via 'isSyntacticallyPublic' and 'isSyntacticallyAbstract'


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@3854 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
"Fixed bug [ 690196 ] PMD doesn't work on JDK 1.3 code (assert keyword)


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@2248 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
"Fixed bug in PMD and CPD where entire project was not being checked because only the highest level package was being examined for
java files.  Now all descendent packages are being checked as well.


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@825 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
"Fixed bug in the 'fully improved' Poisson solver.

Now both orientations work! Accuracy is comparable to the 'improved' version, but the 'fully improved' version does not suffer from loss of
accuracy for smaller time steps.
",bugfix
"Fixed bug introduced in SiteMesh 2.4, where Page.getRequest() threw UnsupportedOperationException.
This is an old feature that is rarely used - unfortunately the example web app used it, causing it to fail.
Fixed the functionality and added appropriate tests to the test suite.
",bugfix
"Fixed bug with the updater caused by finally using a stable version
Fixed removing all xp from an entity's drops
Fixed looping items in an inventory, and also made the looped items changeable
Fixed command's 'permission message' and 'usage' not replacing english <chat styles>

Added drafts for a 'visual effect' effect",bugfix
"Fixed bugs 1022 and 1031 reported by Wiktor.  Thanks for the bug report and the patches.  Little different fix  removed duplicate code Wictor discussed his patch created and moved this code to NotifdConfigManager rather than NotificationManager base class.
-David",code smell
"Fixed compilation errors caused by the recent package name changes

git-svn-id: https://svn.apache.org/repos/asf/directory/trunks/mina@448075 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
"Fixed compilation problems - missing dependency for interpreter project. Further implementation of switch statement (""defaultcase"" can be located in any order among case statements).",code smell
Fixed dimensions not being properly reduced  ImagePlusContianers were always 5d which breaks e.g. Gaussian Convolution that cannot handle dimensions with size 1.,internal
Fixed file and directory size calculation in MapView.,internal
"Fixed issue #26: Starting eclipse's help feature just shows you a 500 error, ond depending on your eclipse version, a long stack trace.

The problem boiled down to the JSP compiler used by the help system also being instrumented with lombok, but that's not exactly the environment lombok was expecting. Fixed by simply disabling lombok when the environments don't match what we expect. In the process, the instrumentation has been made a little more robust; multiple separate OSGi modules can all be instrumented now, instead of the first one winning.
",bugfix
"Fixed issue with change notifications that would occur for dirty data.
Added additional global filtering options when listening for
bean/field/collection/map/selection level changes.",bugfix
"Fixed lease null pointer bug.  Added framework for item blacklists / whitelists on Residences.  Added framework for ignorelist type.
",bugfix
"Fixed loading screen error. Cleaned up user profile management. Fixed error with not showing the configuration selection screen. Fixed error with user profile saving and loading. Fixed issue with test files.
",bugfix
"Fixed logic to check if a position is split into multiple categories

Issue: https://forum.portfolio-performance.info/t/zahlenueberlauf-in-vermoegensaufstellung-abs-perf-1-jahr/4474
",bugfix
Fixed message ID in topics Added method inheritance test Refactored out NevadoQueueConnection and NevadoTopicConnection,internal
Fixed missing IdManager  improved delete performance.,external
"Fixed missing validation error messages if value conversion fails

Eclipse Bug: https://bugs.eclipse.org/bugs/show_bug.cgi?id=495789
",bugfix
Fixed problem with Axis reusability and priorities  included UML diagrams.,external
"Fixed problem with detecting object useage of param as well as problem with native methods.


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@551 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
"Fixed problems with ShapeStyle persistence
Added Model Extension features to default properties page
Added ""collapsed size"" to expandable containers (SubProcesses)
Fixed Move Shape issue with connectors when multiple shapes are
selected.
",bugfix
Fixed profile experience UI and functionality,external
"Fixed security chart showing all transactions even when filtered

Issue: https://forum.portfolio-performance.info/t/filter-wirkt-nicht-unter-performance-wertpapiere-kursdiagramm/4344
",bugfix
"Fixed security performance index if forex dividends exist

Previously, if dividends exists with a currency other than the
reference account, an exception was thrown when adding the forex
dividend to the reference account.
",bugfix
"Fixed several bugs related to loading, saving and comparing changes in various frames.
 * The information text in the game settings frame is now saved.
 * Restored ""rememberWindowSize"" functionality in `RoomFrame` (unintentionally removed in r250).
 * Fixed kind, file name and file type in `SoundFrame`.
 * Fixed several off-by-one errors in `SpriteFrame.getCropBounds`, which would in some cases give an incorrect bounding box.

git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@251 8f422083-7f27-0410-bc82-93e204be8cd2
",bugfix
"Fixed several overflowing int32 problems (note that this was purely cosmetic problem; it didn't affect the correctness of results.)
",bugfix
Fixed size calculation bug in LongerShortString  test to match Work around a similar bug in ShortArray  needs more work Fixed size calculation bug in WriteTransaction determining PropertyRecord suitability for changed property  test to match Assertions for certain sensitive paths in PropertyBlock/Record Some more tests Minor formatting changes,internal
Fixed size update problem in Controls Demo TextSizeTab.,internal
"Fixed some nasty zooming issues:
- when capturing a longer trace than was shown on screen caused a repaint bug
  (white area). This was caused by a timing error when updating the location
  of the screen after a zoom in/out was performed;
- restore the zoom-level only after a new capture is performed, or the component
  was resized.
",bugfix
"Fixed some serialisation problems and ensured DSL tests for snapshot spec features all go over the wire (thus testing two-way serialisation).
",bugfix
"Fixed the bug where notes were being indexed by adding getVerseText as a replacement for getPlainText. The latter is still needed for non-bibles.
Also cleaned up checkstyle reports and added/corrected javadoc.


",bugfix
Fixed the new events to use the abstraction layer,internal
"Fixed two bugs: a memory leak and a feature to freeze the layout so clients can safely update the dock-tree.

git-svn-id: http://svn.javaforge.com/svn/DockingFrames/trunk@413 3428d308-0d2e-0410-b3d4-94d0fefcacdf
",bugfix
Fixed unit test to reflect current core snapshot functionality.,external
Fixed unnecessary method and created MockData class.,code smell
"Fixes #15 by re-working how ContentList deals with iterators and
Filters. The Re-Work includes a major performance upgrade because
FilterList and FilterListIterator are now 'lazy' in the sense that they
only check as much data as needed to satisfy the user request. The
previous version would scan the entire ContentList at constructor time.

This should make things like for-each type loops much faster to start
up, and isEmpty() and random-access-type get() calls much faster too.

Add a whole lot of tests for the
ConcurrentModificationException (CME) concept. Note, CME is
'controversial' because set(), remove(), add(), next() and previous()
methods of the core java.util collection Iterators throw CME, but the
hasNext(), nextIndex(), hasPrevious() and previousIndex() do not.

I believe that the 'right' thing is to fail fast, and if you know that
there is a CME problem in the hasNext() or whatever, then throw the CME
immediately. But, since Java has not been 'fixed', and other 'big' fish
have conformed to the actual Java way of doing things (GCJ, Apache
Harmony, etc.), then who am I to disagree.

So, match the base Java way of doing things, and only throw CME in the
iterator 'change' methods, not just the 'query' methods.

Now that FilterList conforms to java.util.List API, we can add a bunch
of test cases for them.

Now that CME conforms to Java core, we can add test cases for that too.",bugfix
Fixes #205 Performance issue when an entity has a lot of attachments,external
Fixes #216 Interceptors do not support Entity inheritance,internal
"Fixes #56 - Back-end of Outputters revised.
The mechanism for output formatting is now independent of the output destination, e.g., there is no longer any 'formatting' logic in the Outputters, but it's all in the 'Walkers'.
Rearrange code structures to take the 'support' classes to a different package.
This 'cleans' up the regular org.jdom2.output package. The support package should only be of interest to people who override/subclass/customize the default functionality.
I will put a wiki page together on the new details, and how overriders/customizers can benefit from the the structures.",bugfix
"Fixes #75 - Android Compatibility.
See https://github.com/hunterhacker/jdom/wiki/JDOM2-and-Android
Implements some workarounds for AssertionError.
adds a new layer in the XMLReader*Factory that makes it much easier to implement a new custom Reader factory.",bugfix
"Fixes Bug in FluidGridLayout when compute size

The old computeSize implementation used the parent bounds as the size
for the child. This is valid for the width but not for the height. This
commit fixes this issue by using the children sizes for computing the
height of the composite with the FluidGridLayout.

Change-Id: Icf91a6b93f83831f60906fbdbf7aa3102823fbf5
",bugfix
"Fixes JIRA issue SGF-244 involving the use of a ref attribute on the GatewaySender element's nested inner EventFilter element.
",bugfix
"Fixes bug with cyclic deps in explicit bindings.

git-svn-id: https://google-guice.googlecode.com/svn/trunk@362 d779f126-a31b-0410-b53b-1d3aecad763e
",bugfix
"Fixes for 1633683. BrokenNullCheck now also catches problems if there is an equality expression in the offending code. The rule now also matches array literals in the expressions, for slightly greater accuracy. Some comments + cleanups too.


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@4941 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
"Fixes for bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=180364, and for https://bugs.eclipse.org/bugs/show_bug.cgi?id=177014
",bugfix
"Fixes in Seam authentication filter and Seam sample application, based on Google IDP interoperability test.

git-svn-id: https://svn.jboss.org/repos/picketlink/federation/trunk@78 cbddccc4-e45a-42eb-be77-0d76e4b45d38
",bugfix
Fixing BotOperation to allow for testability for formatMessage,external
"Fixing bugs in Eager.slice when zero or one length iterables are supplied, adding tests around Eager.rest and using slice in the Eager.rest implementation.
",bugfix
"Fixing incorrect use of RowLocker in IndexUpdater: the return value should be checked to know if the lock has been obtained.
 * introduced a blocking RowLocker method which retries until the lock can be obtained (with some maximum timeout)
 * IndexUpdater skips pushing the message if the lock cannot be obtained within one minute.
 * introduced RowLockerMetrics to keep track of the frequency of lock contentions (= failures to take a lock because the row is already locked)
 * use a common RowLocker instance in the lily-server (in order to have a single corresponding metrics instance). For the Kauri-wiring this required the introduction of a RowLocker interface.
Meanwhile noticed that the lock-contentions (due to indexupdater taking a lock to push a message) are not really a rare thing (at least when running the tester & mbox tools), i.e. not only in the indexupdater but also in the client apps, likely leading to performance degration due to operations that need to be retried.


git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4742 b80d95f8-e103-0410-bd55-e03a9dc29394
",bugfix
Flesh out HBaseMetadata class.,code smell
Followup after review of LC code with ELZI - XmlTree is now more flexible in resolving paths  and a lot of duplicate code is removed. Javadoc is consistent with interface.,code smell
"Forbid prefix maps to become recursive and fail.

Certain simple maps (e.g. 'n' to 'nzz' or 'N' to 'Nzz') are made non-
recursive by Vim (most likely for vi compatibility). Vrapper doesn't
safely support recursive macros yet so detect simple cases like these
and make them non-recursive.

Fixes #598.
",bugfix
Forced metadata classes such as users  roles  etc to go into the metadata cluster to protect them.,code smell
"Foundation + Further work on parsing action-based extension points. + Introduction of CommandAction  which emulates the IAction interface using command-based managers + Moved the uncategorized category down to CommandManager from CommandService + Renamed all the IHandlerState related objects to be IState.  The ""handler"" qualifier  while indicating the primary use case  is an unnecessary qualification. + Made the state identifier a more integral part of how state works.  The id is used to identify which piece of state applies in a particular scenario.  This is used to distinguish ""name"" and ""description"" label state. + Refactored some common functionality related to property change listeners from Action to a new class AbstractAction. + Extracted some label parsing utilities (related to mnemonics and accelerators) from Action to LegacyActionTools. + Extracted some common constants into CommonCommandPersistence. + Created SelectionEnablerExpression to wrap the legacy SelectionEnabler framework. + Started work on a proxy for pulldown delegates.",external
"From: Peter T Mount <patches@maidast.demon.co.uk>

[This is a repost - it supercedes the previous one. It fixes the patch so
it doesn't bread aix port, plus there's a file missing out of the
original post because difforig doesn't pick up new files. It's now
attached. peter]

This patch brings the JDBC driver up to the current protocol spec.
Basically, the backend now tells the driver what authentication scheme to
use.

The patch also fixes a performance problem with large objects. In the
buffer manager, each fastpath call was sending multiple Notifications to
the backend (sometimes more data in the form of notifications were being
sent than blob data!).
",bugfix
Full support for X_Elemental injection of HtmlTemplate inheritance. ,internal
Fully implements core ModelService functionality,external
Functionality extended to include HUSACCT in build process. Furthermore refactoring improvement of the batch process + removal of password protection (since it did not work).,external
Functionality moved from from ConnectorGui and ../client/HubConnector into GuiHubConnector,external
"GMX Fixes

Fixed issue regarding drag and drop actions to do not have arguments.
Also implemented postponed resource references.
",bugfix
GTNPORTAL-155 Merge performance branch ( up to revision 473) into trunk,external
GUI changes due to BEAM 4.7 data model changes: new Mask and VectorData classes,code smell
GWT remote poller app refactor for performance and testing,external
"GameFrame update, new features used in classes that'd need them
Adds new features such as JFrame override methods
Also current FPS is kept track of
",functional
General cleanup for metadata classes. Moved and overhauled ome.xml test cases. Support for UUID value through re-run of code generation. (ome-xml:r613),code smell
Get Namespace support working. Fix bug in StAXStreamProcessor related to setPrefix declaration in stream prior to calling writeStartElement(). Add new features to NamespaceStack.,bugfix
Get password history data gui and backend service/dao functionality added  get password access audit log gui and backend service/dao functionality added  added ability to change max history on password edit screen  password search panel grid action is double click cell again  upgraded to Ext GWT 2.1.0 (dialog box field focus now works!)  tested integration  fixed bug in edit permissions access level combo box gui caused by Ext GWT upgrade.,external
"Getting ready for 0.1.3 release. 

Changes to file-lookup algorithm to support more flexible project structure
Bug fixes
Content-assist support for covergroups and coverpoints


",bugfix
Google App Engine compatibility as a plugin (.jar).,external
"Got delombok to work with JDK 1.7.
For now PrettyCommentsPrinter is not able to print new features like JCTypeUnion,
but first tests indicate that besides this it works just fine.
",functional
Got the first bits of vision working for homing Moved some code around Deleted some dead code,code smell
"HADOOP-2 - Support Splitting on Unsharded Clusters
* Done, fully works with customisation of several areas
* See new fields in /mongo-defaults.xml for docs on each feature and how to use until more formal docs are written up.
",functional
HADOOP-2471 Add reading/writing MapFile to PerformanceEvaluation suite,external
"HAMA-822: Add feature transformer interface to improve the power and flexibility of existing machine learning model

git-svn-id: https://svn.apache.org/repos/asf/hama/trunk@1548171 13f79535-47bb-0310-9956-ffa450edef68
",functional
"HAMA-868: Fix SemiClustering bugs (edwardyoon)

git-svn-id: https://svn.apache.org/repos/asf/hama/trunk@1569340 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
HBASE-11527 Cluster free memory limit check should consider L2 block cache size also when L2 cache is onheap. (Anoop),internal
HBASE-1364 [performance] Distributed splitting of regionserver commit logs,external
HBASE-14203 remove duplicate code getTableDescriptor in HTable (Heng Chen),code smell
HBASE-14901 Remove duplicate code to create/manage encryption keys,code smell
HBASE-528 table 'does not exist' when it does -Changed HStore and Memcache methods for computing closest row at or before -Added more test cases for verifying this functionality -Simplified the getClosestRowBefore interface so that it does not take timestamps -Noted that getClosestRowBefore is assumed to work correctly ONLY on tables where updates are always with ascending timestamps (method is still not a part of HTable interface  so not available to clients),external
HBASE-7255 KV size metric went missing from StoreScanner.,internal
HBX-1467: Move functionality of JDBCMetadataConfiguration into JdbcMetadataSources - Inline JDBCMetaDataConfiguration#getMetadata() in JDBCMetaDataConfiguration#readFromJDBC(),external
HEAD - removing dead code,code smell
HIVE-10028: LLAP: Create a fixed size execution queue for daemons (Prasanth Jayachandran),internal
HIVE-15076: Improve scalability of LDAP authentication provider group filter (Illya Yalovyy  reviewed by Aihua Xu  Naveen Gangam),external
HIVE-1631. JDBC driver returns wrong precision  scale  or column size for some data types (Patrick Hunt via cws),internal
HIVE-16392 : Remove hive.warehouse.subdir.inherit.perms and all permissions inheritance logic (Sahil Takiar via Ashutosh Chauhan),external
HSEARCH-2581 Add an abstraction layer over ES requests,internal
"HTTP Direct Digest Authenticator

-use apache Hex api
-rely on parent equals, hash functions
-use CommonHelper funciton to compose nonce random
-else statement on same line with closing if }
-enhance token parsing in Digest extractor instead of DigestCredentials - this is a better
separation of functionality because the extractor should be in charge with extracting data (same as basic extractor is)
DigestCredentials keep extending TokenCredentials, but now the token is actually the client response instead the full
Digest authorization header

User digest validation changes to: digestCredentials.getToken().equals(digestCredentials.calculateServerDigest(true, pwd))
",functional
"HTTPCLIENT-1035: begin adding functionality for flushing updated
entries mentioned by Content-Location in responses. Not yet hooked
in to be used.


git-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1051865 13f79535-47bb-0310-9956-ffa450edef68
",functional
"HTTPCLIENT-975: added CacheConfig settings to provide more detailed
control over the background revalidation thread pool, and enabled
the stale-while-revalidate feature by default with a single worker
thread and a max queue size of 100 pending revalidations, which
should be a pretty safe setting.


git-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk@1050360 13f79535-47bb-0310-9956-ffa450edef68
",functional
"HV-1441 Separate CascadingMetaData in 2 classes: one very lightweight
for non containers and the other full featured for containers
",functional
"HV-755 Extracting overrides functionality into ReflectionHelper and making use of it in ValidationExtension to properly detect all override cases, especially the ones using generics.
",functional
HV-912 Reducing accessibility of some classes and methods,external
"Have menu set up by UIStarter, not ResultsTable

All this functionality used to be in UIStarter (and ResultsTable didn't exist).  I created ResultsTable to break out the functionality that was specific to the table.  I should not have included the menu generation; that is more generic and better fits in UIStarter.  Now UIStarter does things like initialize the Cocoa functionality, which makes a lot more sense than having a class that represents a Table do it.
",functional
"Head commit of:
Fix bug in pick list page where selection was not reset after the display group was updated (e.g. our selected object could have gone away)
added willUpdate and didUpdate hooks to ERD2WListPage
in ERD2WPickListPage.didUpdate(), update our selection based on the freshly fetched display group


",bugfix
"Heatmap trellis modifications

Changing the border type.
Adding the code to trunkate the barcode if necessairy.
Setting the background color of the HeatScreen panel to the color corresponding to empty wells according to the ScreenColorScheme.
Fixing a minor bug in the zoom functionality. (The widht/height ratio was deteriorating because of the ""rounding"" operation, now the ratio is approximated each zoom action again.)
",bugfix
"I hate Java. I hate everything about the Java ecosystem. I have moved this project to Maven with no small amount of difficutly. Honestly most of the pom.xml file is just magic to me. I understand parts   but like most things in java I have no idea how its doing most of what its doing. Its a large cryptic XML document with very little human readable meaning. I mean Makefiles were considered arcaic  however you can find a dozen or so simple introductions on how to construct a Makefile that doesn't depend on magic to build your project. Not so with Maven. The only official Documentation is a 100+ line document that has no coorliation to what is actually happening to build your file. Take for example the fact that i know have a whole target folder that has lots of stuff in it. At no place in my pom.xml did I say create a target folder  nor did I say run javac. The closest I came to either of those was set my ""source"" tag to 1.5 ( I only knew to do this because Bukkit does it ). Furthermore the comand to compile the project into a jar ( again no mention of a jar file in the pom.xml ) is to issue a mvn install command. That clearly makes sense. mvn build anyone mvn package  nope mvn install. Its like java heads have a fetish for complexity.",external
ICE-5960 Factored out duplicate code into updateBundle() private method. Clarified boolean tests.,code smell
IDE-943: added abstraction to make IContentAssistCalculators independent from WTP's internal classes,internal
ISIS-109: fixes for json viewer (compatibility with spec),external
ISIS-1194: removing more dead code (in FrameworkSynchronizer),code smell
ISIS-1411: removing DomainObjectContainerResolve helper class (inlining its functionality); removing inner interfaces only implemented by PersistenceSession.,external
ISIS-1711: removes dead code  renames method,code smell
ISIS-993: factored out LayoutMetadataService  renamed the metadata classes,code smell
ISIS-993: improving the usability of the schema; minor stuff for wicket components,external
ISIS-993: optional left and right columns either side of tab groups; tweaks to CSS; HasPath for all elements of the layout metadata classes (working towards support for persistence of widget state and hints),code smell
"Implement ""rename but don't move"" in new FileMover.

This essential functionality got left out of the commit that reworked the FileMover.
",functional
"Implement #59: Add support for serialization/deserialization of cglib proxies to javolution-serializer. Added new javolution-serializer-cglib module. This feature includes intoducing the new CustomXMLFormat for javolution custom xml formats. Custom formats are now checked before other known xmlformats to allow users to override existing formats.
",functional
Implement ClassPath class  refactor analysis code to use new ClassPath functionality  start adding verification for individual opcodes,external
Implement cascading functionality for triggers,external
Implement framework code to support for Resource-per-class-hierarchy approach to hiding inheritance - RESTWS-243,internal
"Implement my old patch for issue #366, with some tweaks.  This does the
following:
* Fixes @Provides injection so that parameters are checked for nullability.
By default this will error.  The flag is named:
guice_check_nullable_provides_params and can be set to ERROR, WARNING or IGNORE.
* Adds InjectionPoint.forMethod to build an InjectionPoint off an arbitrary
method.
* Adds Binder.getProvider(Dependency) to a get a Provider for a given
dependency (with all its nullability & injection points maintained).
* Update ProviderLookup to accept a Dependency in addition to a Key.

This is in preparation for two things:
1) Allowing multibindings/mapbindings/optionalbindings to be specified as
annotations on methods in a module.
2) Adding a dagger compatibility module.
... the general idea will be that I'll also add a hook into
ProvidesMethodModule somehow to look at arbitrary other annotations and let
folks process them specially.
-------------
Created by MOE: http://code.google.com/p/moe-java
MOE_MIGRATED_REVID=85353820
",bugfix
Implement new  high-performance cipher in native code. Currently available only for Linux-x64  other platforms will fallback to Java cipher.,external
"Implement overlays.

With this feature you can have a line style that is formed by over laying two lines.
By using a TYP file with appropriate definitions, you can create some useful effects.

To use this create an overlays file in the style.  Lines in the file look like this:

0x142: 0x12, 0x17, 0x18

This means that if you have a line of type 0x142, it will be written as three lines with
types 0x12, 0x17 and 0x18 respectively instead of 0x142.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@801 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"Implement write translation for XLIFF and Properties

https://bugzilla.redhat.com/show_bug.cgi?id=1186972

Squashed commit of the following:

commit 324d70f8c1d43d9ccbfe7f1ec15036b9e8dc3af8
Author: Alex Eng <aeng@redhat.com>
Date:   Wed May 6 12:33:52 2015 +1000

    Update charset used for properties writer

commit 3a2f48d74cd675a27799bd570fb7342862991b9d
Author: Alex Eng <aeng@redhat.com>
Date:   Wed Apr 8 16:09:42 2015 +1000

    Implement write translation for properties file with given translations and resId: https://bugzilla.redhat.com/show_bug.cgi?id=1186972
",bugfix
"Implemented 'forgot password' functionality
* Added secret question and answer to edit login details form
* Added 'My Profile' page where users can change their password and secret question/answer
* Added 'Forgot password' link to login page
* Added 'Forgot password' form which asks secret question, checks answer and redirects to password change page
",functional
"Implemented Gael Marziou's exclude rule feature


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@1854 51baf565-9d33-0410-a72c-fc3788e3496d
",functional
"Implemented basic path editing, plus several related fixes.
 * Added an option for the initial value in `NumberField`'s constructors, added some more constructors with defaults and modified several classes to use those.
 * Renamed `PathCanvas` to `PathEditor` and added editing functionality.
  * Added enum properties for showing the grid and selecting points.
  * Added mouse handling for adding, selecting, removing, inserting (Shift + click existing point) and moving points. Ctrl for precise positioning (not using Alt because it's reserved for the window manager).
  * Fixed ""array index out of bounds"" in `PathArrow`.
 * Made it possible for `VisualPanel` to lock its bounds. This is used by `PathEditor` when dragging points to prevent crazy scrolling.
 * Added ability to remove layers in `VisualPanel` by using `set(layer,null)`.
 * Converted `RoomFrame.ArrayListModel` to a top level class.
 * Made the list (selection) and x/y/speed fields in `PathFrame` use property links instead of manually updating them. A new button linked to the editor's grid property has also been added. The list now also uses the `ArrayListModel` class for automatic list updates.
 * Fixed a bug in `BinVisual.remove`. The method would in some cases fail to update the bounds.
 * `BinVisual` now has a method that returns all visuals that intersect a given rectangle. This method uses one of two new iterators in `BinPlane`.
 * Fixed a bug in `BinPlane.Candidate.setDepth`. It would remove the candidate from all its bins instead of re-inserting it.

git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm/LateralGM/branches/graphical-path-editor@378 8f422083-7f27-0410-bc82-93e204be8cd2
",bugfix
"Implemented between in LuceneSerializer. Fixed phrase queries (like query ""foo bar"" is transformed to ""+*foo* +*bar*""  this is as close as I could get result-wise). Improved LuceneSerialize encapsulation by splitting into methods. Updated tests in SimpleTest.",internal
"Implemented feature #46: Support reconfiguration of memcached nodes at runtime via jmx (failover nodes can also be reconfigured)
",functional
"Implemented gathering runtime statistics and publishing them via jmx, this was feature #43 (Calculate statistics for serialization time / backup time / load time / skips etc).
",functional
"Implemented mechanisms to allow for more control over inclusion rules

- Inclusion: Implemented a mechanism to control the inclusion of
    properties of specific object types.

- Inclusion: Implemented a mechanism to register custom inclusion
    resolvers to support inclusion rules far beyond the built-in ones.

- Introspection: The introspector now returns a TypeInfo object
    containing all the information gathered during introspection. The
    type info can later be retrieved from any node that represents an
    introspected object.

[Fixes #108]
",bugfix
"Implemented most of the functionality described in the projection section of the spec. Just need some clarification on the module and protocol declaration names. Will revisit after working on well-formedness.
",functional
"Implemented some Tabs in GameSettingFrame, fixed loading of resources from jar, added event replace

+ ColorSelect
 * Basic colour choose panel

IndexButtonGroup
 * made it possible to have decimal indexed groups, rather than bitwise
 * Added basic ActionListener functionality

Listener
 * Added a line to the save as code to commit the changes of LGM.gameSet if it is open

Gm6File
 * Corrected default icon code to work from within a jar
 * Changed colorOutsideRoom to Color rather than int

Gm6FileReader/Writer
 * modified to read/write colorOutsideRoom correctly

GmStreamDecoder
 * Added some alternate constructors

GmStreamEncoder
 * Added some alternate constructors
 * renamed writei to write4
 * added write2 and writeStr1 functions

Prefs
 * Added String[] defaultLibs for use when in a jar (dynamic detection is planned for 1.7)

Util
 * Modified getValidImage() to display error messages so that the method doesn't throw Exceptions
 * moved the addDim method to here and removed the convenience version to make it thread safe

Constant
 * overrode equals and hashCode (hashCode is just because of CheckStyle)
 * made Comparable for sorting
 * Added a copy function

LibManager
 * Corrected autoLoad to work from within a jar

BackgroundFrame
 * modified to use the new version of addDim
 * removed try-catch in image loading code

EventFrame
 * modified to use the new version of addDim
 * small correction to linked frame selector (frame is now selected as well as being put on top)

GameSettingFrame
 * Implemented Resolution, Loading, and Constants  tabs - All fully functional
 * Modified Other tab to use IndexButtonGroup
 * Modified Graphics tab
 * * Added scale factor field
 * * Changed the background colour selector to a ColorSelect component

GmObjectFrame
 * Implemented DnD event replacing

ResourceFrame
 * Removed the addDim method

SpriteFrame
 * modified to use the new version of addDim
 * removed try-catch in image loading code

TimelineFrame
 * made FRAME_ICON final

checkstyle.xml
 * changed to ignore lines with trailing line comments

git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@122 8f422083-7f27-0410-bc82-93e204be8cd2
",bugfix
Implemented sort() Fixed missing so that it works correctly with the formal argument has a default value Implemented cat() Implemented stdout() Corrected bug in unique() Removed special handling for classpath: files and created simple abstraction over file system so that library and other files can be read from jar files.  library paths are now constructed from the classpath.,internal
"Implemented the shift key and number key functionality into the swipe keyboard... I think i'm finally done with it for this release.
",functional
"Implementing Feature: 579401

Changed sort order of the RuleViolations to have reports
make more sense as well.


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@292 51baf565-9d33-0410-a72c-fc3788e3496d
",functional
"Implementing Review feature (RFE#787086)


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@2196 51baf565-9d33-0410-a72c-fc3788e3496d
",functional
Implementing code review comment from r428: Using Polymorphism for exclusion strategies for expose annotations.,internal
Implements Editors functionality  single ok but infinite editors partially First shot of serialisation of the MapContext in the GUI (the map is automatically saved by the map editor),external
"Implements JIRA feature request SGF-309 adding support for compression of GemFire Cache Region data using the new Compressor attribute and property in the RegionAttributes API.
",functional
"Imporve IoBuffer

Squashed commit of the following:

commit 5fb7b37bcee6490ea9409843c4e81b4b25ab2324
Author: Raphae??l P. Barazzutti <raphael.barazzutti@gmail.com>
Date:   Mon Jun 24 07:03:54 2013 +0200

    IoBuffer.compact() fix and dedicated test

commit 3462c4785a72b7dc77753ad12d76b3a27f10504e
Author: Raphae??l P. Barazzutti <raphael.barazzutti@gmail.com>
Date:   Mon Jun 24 01:43:54 2013 +0200

    added a few tests for IoBuffer

commit c19c4917ca6fd62efdd4d128e2d400204fc253e2
Author: Raphae??l P. Barazzutti <raphael.barazzutti@gmail.com>
Date:   Mon Jun 24 01:43:26 2013 +0200

    IoBuffer with some new features

commit 60d85e2dc000437c3b0d1d715cde8a5a83192d6d
Author: Raphae??l P. Barazzutti <raphael.barazzutti@gmail.com>
Date:   Sun Jun 23 23:16:19 2013 +0200

    It is possible to set the position to the last index + 1 on a IoBuffer (like on java.nio.Buffer)

commit fbc4085eb446795c08f2693a75cd53ab7570ee7e
Author: Raphae??l P. Barazzutti <raphael.barazzutti@gmail.com>
Date:   Sun Jun 23 23:08:33 2013 +0200

    IoBuffer's contains the available bytes of the ByteBuffers used for it's creation

commit 61b6b7431a637c89e3c0fda7c39ab32b9e169f21
Author: Raphae??l P. Barazzutti <raphael.barazzutti@gmail.com>
Date:   Sun Jun 23 23:06:11 2013 +0200

    Endianness at the IoBuffer level

commit 5348a560805c53a4c5ead81c403d0b3348fa51eb
Author: Raphae??l P. Barazzutti <raphael.barazzutti@gmail.com>
Date:   Sun Jun 23 23:02:40 2013 +0200

    mixed typed buffers should be handled by IoBuffers

commit 68c48c5e9b247b2e67dd551b67b8b8b113a6db81
Author: Raphae??l P. Barazzutti <raphael.barazzutti@gmail.com>
Date:   Sun Jun 23 22:51:22 2013 +0200

    the endianness is handled at the IoBuffer level

commit 4e3f5a5d6e0627ee876514a6d3ff6e489f9529c3
Author: Raphae??l P. Barazzutti <raphael.barazzutti@gmail.com>
Date:   Sun Jun 23 22:38:52 2013 +0200

    This test scenario doesn't match the array() specifications of the ByteBuffer class

commit a1c93c922d12b56459e6f8c53c2052c5805bcaf8
Author: Raphae??l P. Barazzutti <raphael.barazzutti@gmail.com>
Date:   Sun Jun 23 22:30:45 2013 +0200

    when available it should return the array really backing the buffer
",bugfix
Improve Collect Earth performances,external
"Improve EJBUtils performance, abstract unit test improvements, WS injection inherited from SafeOnline and fixed to do cleanup.
",bugfix
Improve JAX-RS stability and move to WildFly 9,external
Improve LoggerManager compatibility,external
Improve handling of /reload  clean up dead code,code smell
Improve performance of MessageSource condition,external
Improved Attributes Management using Composition instead of Inheritance,internal
Improved Keyboard stability and performance (#1239),external
Improved ProjectMetadata class.,code smell
Improved communicate protocol performance by keeping socket and database connection alive,external
Improved configuration options; improved efficiency to algorithms; minor bug fixes,external
Improved mmap management by computing the right size of blocks avoiding overlapping,internal
Improved parsing  usability and oo design,external
Improved reliability by adding priority execution for System Operations.,external
"Improved removeContent() logic to solve a Crimson performance issue
and avoid a bug if there are duplicate string entries.  Contributed
by Joseph Bowbeer <jozart@csi.com>.
",bugfix
Improved robustness for download failure cases,external
Improved the performance for clearing reference attributes when the attribute they reference is deleted.,external
"Improvements to Launcher.java

Use a regular static method for logging initialization instead of a static initializer block.

Also break out the UI launcher into a separate static method.  I intend to change it so that Launcher could potentially launch different functionality depending on the command-line argument.  This is a first step to allowing it to do so.

Prepare the main method to be able to dispatch to different functionality, depending on command-line arguments.

Add a logger, even if it's currently unused.
",functional
"Improvements to checking in/out functionality
* Active visit list now updated automatically
* Fixed potential bug with stopping visits
",bugfix
Improvements to system tests readability,external
Included 0.7 API. Note that there is a lot to implement. This just includes the API and changes for non-code-breaking functionality for the impl/unit tests/examples.,external
Increased Findbugs sensitivity and fixed a bunch of minor style issues  removed dead code  ...,code smell
"Initial support for features/hierachy and features/genes in ES implementation.
Modified the regions/inorganism to return features with types.

git-svn-id: svn+ssh://svn.internal.sanger.ac.uk/repos/svn/pathsoft/psu/trunk/genlib/java/crawl@15660 ee4ac58c-ac51-4696-9907-e4b3aa274f04
",functional
Inline method for decoupling. Not used anywhere else yet.,internal
Inproved I/O Manager performance.,external
Instead of initializing imported classes immediately  they are only initialized if constants (heuristic: upper case!) are used. Static method and constructor calls are intercepted by a class-initializing wrapper method  anyway. This makes lazy class initialization effective! It may also allow later to introduce extended scopes (*-imports  same package  statics of super classes) when preloading all classes. All Jangaroo examples and Jangaron have been adapted to work with the new semantics.,code smell
Integrate Statistics modules in the trunk with large refactoring. Clean API and split StatisticsAPI module with a new DesktopStatistics  where the TopComponent and desktop UI  controller and model is located. Build a MVC architecture to support workspace encapsulation and adapt Panels code to support asynchronous model-based refresh. Reimplement Panels with better layout. Adapt StatisticsStandard with new API  delete front-ends and migrate to use current Graph API access. Increase consistency of Statistics settings panel.,internal
"Integrate continue with_actions to style branch.
This includes duplicating nodes/ways that are resulting in more than
one element in the map.

I belive that the branch is now feature comparable with the trunk.

Only light testing so far.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/style@1544 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"Integrating more optional components - we have an optional spring package now
Also integrating a beta feature that should shut dynamo down on startup if a patch fails
",functional
"Interface for getting Feature Model-Informations extended
add Method setFeatureModel to FSTGenComposerExtension
Implemented optimized Metaproduct-Generation for explicit Contracting
fixed Bugs in Metaproduct-Generation vor Cumulative, consecutiv and
conjunctive Contracting",functional
InternalLockService Extracted. Classes should not depend on final impl classes as it creates tight coupling and makes testing hard.,internal
Introduce Writeback to reduce duplicate codes,code smell
"Introduce a package-private way to add ""value of:"" without also adding ""root object was:""

Also, use it from the array subjects.
Using it from array subjects has pros and cons:
+ It allows us to give the right message for `assertThat(someObject).someArrayProperty().asList().isEqualTo(...)`. Previously, we would have claimed that we were testing ""someObject.someArrayProperty()""; with this CL, we'll display it as ""someObject.someArrayProperty().asList()."" (I somewhat doubt that anyone has actual assertions like this, but it might come up.)
- It adds ""value of: array.asList()"" to the beginning of messages where it doesn't add useful information -- along the lines of ""value of: array.asList(): should have contained <foo>,"" which is no better than ""should have contained <foo>."" Unfortunately, there's no good way to distinguish between cases in which the extra information is useful and cases in which it isn't. The right fix here might be for us to stop requiring users to call asList() at all, instead providing methods like contains() directly on the subject, as we do for StreamSubject.
+ It lets us simplify the asList() implementations. Previously, they needed to manually propagate any name specified by a call to named(). With this CL, the name is included automatically (""value of: theName.asList()"").

Overall, I have mixed feelings about what this does to the array subjects, but I'm forging ahead anyway:
- This feature *will* be useful for Optional.
- We can always hope that most people won't use arrays :)

RELNOTES=Tweaked failure messages for array `asList()` assertions.

-------------
Created by MOE: https://github.com/google/moe
MOE_MIGRATED_REVID=187170839
",bugfix
Introduce environment variable controlling page size of nitro requests,internal
Introduced Data interface and TransposableData implementation to replace Data class  added getTranspose method. Further extended Data interface into DataVisualizer interface  its TransposableDataVisualizer and CompositeDataVisualizer implementations  and related DataVisualizerBoundingBox class. Introduced Viewer interface & its DefaultView implementation  Drawer interface & its LineDrawer implementation. Changed dataset type from ArrayList<int[]> into List<Object> for better generality  which slightly impacted all Filters & Readers. Finally  implemented test cases for all new classes listed above.  ,code smell
Introduced Datastream abstraction for use with DatastreamService,internal
Introduced Miner level child injector for miner based singletons and other sub-application super-device functionality,external
"Introduced an abstract superclass for pan/zoom controls to consolidate
common functionality between the two. Implemented zoom controls, and
re-implemented pan controls.
",functional
Introduced path API to deal with resources of both disk and ZIP archives that fixes #52. Classpath and regex support totally reviewed with this API. Also simplify the code  remove useless sample files and dead code.,code smell
"IsmAvatar Commit 1.6.0.0.2 (Alpha)
MDI Management stuff started
Updated some loading/saving code and efficiency
Moved prefixes to prefs

git-svn-id: https://lateralgm.svn.sourceforge.net/svnroot/lateralgm@32 8f422083-7f27-0410-bc82-93e204be8cd2
",bugfix
"Issue #109 - Using p6spy with Oracle JDBC driver results in 'java.sql.SQLException: Unsupported feature' when logging prepared or callable statements
",functional
Issue #1698. Map of temporary and new rids is returned and IndentiyChangedEvent implementation was reverted because of possible performance issues.,external
Issue #4873   methods to gather WAL and full checkpoint performance  were added.,external
"Issue #64 - contrib to core: Location-information for SAX Parser.
Add support for location information to all the JDOMFactories. This
creates a new compatibility issue with JDOM 1.x (you need to add 'int line, int col, ' to all the JDMFcatory methods that create JDOM Content instances)",functional
Issue #851: Initial implementation of batch-push functionality,external
Issue 130: fleshed out compute abstraction and hardened TemplateBuilder design,internal
Issue 176: size can now test compatibility with images; refactored vcloud config logic; updated to support latest bluelock,internal
Issue 176: size can now test compatibility with images; refactored vcloud config logic; updated to support latest bluelock,external
Issue 183: Adds support for detecting multiple barcodes  and simplifies ResultPoint abstraction,internal
ItEr22S12CUVistaRecursosTempoPorProxectoItEr21S07: Creating package for resourceload data classes,code smell
ItEr34S12CUCreacionUnidadesPlanificacionItEr33S14: Extracting methods in order to keep the same abstraction level,internal
JBIDE-9588 Poor performance of XHTML template validation,external
JBIDE-9763 https://issues.jboss.org/browse/JBIDE-9763 When building inheritance for parameted types  resolved parameters are reused from base types.,internal
JBRULES-1450 De-couple drools-core from the java dialect's PackageCompilationData -Initial de-coupling attempt -also updated to mvel 2.0 alpha 2,internal
"JCBC-1012: Add support for BigInteger and BigDecimal

Motivation
----------
It has been reported several times (on the forums and through customer
interactions) that BigDecimal and BigInteger support through the JsonObject
and JsonArray types would be appreciated.

Modifications
-------------
This changeset enables this functionality and adds test cases. Both JsonObject
and JsonArray now have more getters and setters for these types, but there
is one gotcha. By default jackson will read the BigDecimal as a double, which
is the type returned. For very long numbers there might be precision loss.

To combat this, the system property com.couchbase.json.decimalForFloat has
been introduced which, when set to true, will always read doubles as BigDecimal
on the jackson side and therefore trade speed for accuracy. Separate tests
have been added to assert this on a unit-test level.

Result
------
It is now possible to use BigInteger and BigDecimal types the same way as
one would do with other already supported types.

Change-Id: I357a9533692d705510018228fcadeec760f811f5
Reviewed-on: http://review.couchbase.org/71435
Tested-by: Michael Nitschinger <michael@nitschinger.at>
Reviewed-by: Subhashni Balakrishnan <b.subhashni@gmail.com>
Reviewed-by: Sergey Avseyev <sergey.avseyev@gmail.com>
",functional
"JCBC-1253: Support subdoc expansion of macro

Motivation
----------
Adding server-side expansion of xattrs macros such as ""${Mutation.CAS}""
This is required for the multi-document atomicity project.
As this is advanced functionality that we may not want users to access,
the elements added to the API are marked private.

Modifications
-------------
Added expandMacros fields to all required builders, and pass down a new
0x10 flag to the server to indicate that macros should be expanded for
a particular field.

Result
------
Tested that ${Mutation.CAS} is replaced with the doc's CAS as expected.

Change-Id: I0443578adbe57dae960389ddd9c7effce524ad15
Reviewed-on: http://review.couchbase.org/101059
Reviewed-by: Graham Pople <grahampople@gmail.com>
Tested-by: Graham Pople <grahampople@gmail.com>
",functional
"JCBC-343: Adding Listeners support.

This changeset builds on the foundation of spymemcached
(ticket SPY-132) and adds functionality for replica gets,
and views (http futures).

Change-Id: I1a2b189947484555e0d51654913d0dd9681de9dc
Reviewed-on: http://review.couchbase.org/28109
Tested-by: Michael Nitschinger <michael.nitschinger@couchbase.com>
Reviewed-by: Michael Nitschinger <michael.nitschinger@couchbase.com>
",functional
"JCBC-388: Rewrite View Connection Management

This changeset rewrites the connection management of the view layer
by utilizing newer mechanisms in apache httpcore nio.

	- It uses a built-in pooling mechanism
	- Reduces the amount of threads used to a minimum
	- Fixes severe connection issues under failover conditions
	- Massively reduces the amount of code needed
	- Streamlines the reconfiguration process in ViewConnection
	- Makes the worker threads and connection size configurable
	- Handles connection lease on rebalance out
	- Adds better testing for the provided functionality
	- Writes the HTTP_HOST automatically to avoid costly DNS
	  lookups, fixing JCBC-151.

Change-Id: Ie78466a0ec7e70118d1ed874684f690887ffb688
Reviewed-on: http://review.couchbase.org/31017
Reviewed-by: Matt Ingenthron <matt@couchbase.com>
Tested-by: Michael Nitschinger <michael.nitschinger@couchbase.com>
",bugfix
"JCBC-851: Cluster Level Querying

Motivation:
-----------
Breaking from the historical model of data manipulation at the bucket
level, N1QL allows to perform JOINS over multiple buckets.

Even though it *is* technically possible to perform such a query from
a Bucket (by making sure that all relevant credentials other than the
ones for the root bucket are provided in the N1qlQuery), it is a bit
counterintuitive.

Cluster-level querying aims at providing a more intuitive way of doing
such bucket-spanning queries.

Note that the configuration and resource management of the SDK makes it
so that performing a N1QL query still has the prerequisite that a
bucket is currently opened in the Cluster.

Modifications:
--------------
Mirrored the query API from Bucket/AsyncBucket to Cluster/AsyncCluster.

The sync version delegates to the AsyncCluster, while the async version
attempts to find an open AsyncBucket and delegate the execution of the
query to it. If no open bucket is found, the method will error with an
UnsupportedOperationException.

The query is enriched with the credentials taken from the currently
configured Authenticator. If none are available, the query method will
error with an IllegalStateException.

The function that allows to go from an AsyncN1qlQueryResult to a sync
one has been extracted in N1qlQueryExecutor. It is reused by the query
implementation in CouchbaseCluster.

Results:
--------
N1QL queries spanning multiple buckets (including password protected
ones) can be more intuitively performed from the Cluster/AsyncCluster.

This functionality and its specific error condition (no open bucket)
are tested in an integration test.

Change-Id: I4001c492a7829f713fe6bc98945a19102d9e9da1
Reviewed-on: http://review.couchbase.org/67630
Tested-by: Simon Basl+? <simon@couchbase.com>
Reviewed-by: Michael Nitschinger <michael@nitschinger.at>
",functional
JCLOUDS-458: Added Blobstore Abstraction,internal
JCLOUDS-826: Add blob operations,code smell
"JDBC checkin fixing the following bugs:
  Fixed support in the driver for notifications (added PGConnection.getNotifications()) - problem reported by Benjamin.Feinstein@guardent.com
  Worked around server problems with int8/int2 and constants; quote values when they are intended to bind to an int8/int2 column - reported by many
  Fixed bug in the Array interface with string parsing not handling escaped characters correctly - reported by devajx@yahoo.com
  Added workaround to support 'infinity' and '-infinity' for dates - reported bydmitry@openratings.com
  Fixed some performance issues with setBlob - reported by d.wall@computer.org
  Added support for using new prepared statements functionality in 7.3 (added PGStatement.setUseServerPrepare() and isUseServerPrepare() methods)

 Modified Files:
 	jdbc/org/postgresql/PGConnection.java
 	jdbc/org/postgresql/PGStatement.java
 	jdbc/org/postgresql/core/QueryExecutor.java
 	jdbc/org/postgresql/jdbc1/AbstractJdbc1Connection.java
 	jdbc/org/postgresql/jdbc1/AbstractJdbc1ResultSet.java
 	jdbc/org/postgresql/jdbc1/AbstractJdbc1Statement.java
 	jdbc/org/postgresql/jdbc2/AbstractJdbc2Statement.java
 	jdbc/org/postgresql/jdbc2/Array.java
 Added Files:
 	jdbc/org/postgresql/PGNotification.java
 	jdbc/org/postgresql/core/Notification.java
",bugfix
"JENKINS-25832: Launch multiple slaves in parallel

This commit changes the behaviour of core functionality: raising new
nodes. It implements very simple algorithm:
- if NodeProvisioner requested X executors, start to raise
X/N nodes (N is number of executors on each node).
- if there is any orphant nodes (~non known by Jenkins at all), take
them in account (and start if it's neccessary)
- if there not enough orphant nodes - raise needed nodes in parallel
- give them back to NodeProvisioner in connected state
- nodes are connected by Jenkins itself: nodes are not connected
explicitly anymore (as it's needed by NodeProvisioner contract)
- EC2Cloud always returns instance in valid (RUNNING) state, it allows
to simplify logic of launcher

And reduce amount of duplicated code a little bit.
",functional
"JENKINS-40088# Configurable stapler serialization behavior (#106)

* JENKINS-40088# Configurable stapler serialization behavior

* Incorporated Jesse feedback on PR

* Reverted unnecessary edit

* Revert ExportedConfig changes to address compatibility concerns

* Incorporated Kohsuke's comments

- Fix javadoc
- ExportInterceptor should work off ExportConfig to use skipIfFail flag

* ExportInterceptor constat Skip.True to be used to skip writing property

* Use constnat object to represent SKIP
",bugfix
"JFG-738
session scope plots have been added to the webUI
with follow features:

-Tests are sorted by startime
-Pause between end of previous test and next test also considered
",functional
"JS-196 Fix FeatureType to recognize Strong's Numbers
Some modules are missing FeatureType=StrongsNumbers, but indicate Strong's Numbers by a GlobalOptionFilter.
This fix allows Strong's Numbers to be found as a FeatureType for those modules.
",bugfix
"JS-200 Fix Bible book name lookup errors
Lookup now prioritizes NT over OT over NC (non-canonical) and only sees Bible books in the current versification. Note, the Bible, NT and OT intros are classed as NC. This means that deuterocanonical books won't be found in a versification that does not have them.
This was a large change moving the name lookup into Versification with it having BibleNames per locale using Chris B's locale provider.
In KeyUtil, went back to not requiring a v11n. Also improved performance by requiring that all Keys provided are Verse, VerseRange or Passage, throwing ClassCastException otherwise.
Did misc cleanup.
",bugfix
"JS-247 Don't use concatenation when creating log messages.
Let the logger class take a formatted message with arguments and only do message assembly when message is to be logged.
This is a feature of slf4j.
",functional
"JS-287 Added getRawTextLength and refactored Backend.
Created interface Backend for AbstractBackend.
Improved OpenFileState implementations to have testament vectored file retrieval.
Made AbstractBook require a non null Backend.
Created NullBackend.
Removed getVersification from AbstractBackend. It wasn't used and is not true of all Backends.
Changed IOUtil.close(state) to OpenFileStateManager.release(state), a bug fix.
Removed Activation and Lock from SwordDictionary (GenBook remains).
",bugfix
"JSON import: support ignoring empty fields

Add a new feature to the from-json conversion of records: the ability to ignore fields containing empty values and add them as fields-to-delete if they belong to a root record. Furthermore, empty lists and empty nested records can be ignored.

Of course, this is optional, on the import cli it can be activated with a CLI option, in the API it is by using a subclass of the default RecordReader.

This feature is very useful when JSON import files are generated by some tool, in which case it is much simpler for the tool to have a fixed json structure in which it replaces some placeholders, rather than having to adjust the json structure (adding json props depending on whether a field has a value, adding fields-to-delete entries) for each record.

Had to do quite some refactoring to the RecordReader to make this possible. It allows now for much more customisations during the deserialization, of which the already existing LinkTransformer was a very specific case.

On JsonImport, replaced the wildgrowing number of load methods with an ImportSettings object (pre 2.2 methods are kept for compatibility).

Properties for which there are native types in json, like numbers and booleans, can now also be defined as strings, which is useful in combination with the ignore-empty-fields option (since you can't have an empty number or boolean).
",bugfix
"JSP refactoring (backlog.jsp  project.jsp) A visual indication on the backlog of which features are ""must haves"" Rename the ""Stop"" feature to be ""Blocked"" Headings for size and importance columns on backlog Notes with quotation marks are not displayed correctly A column without WIP limits should mouse over with no WIP limit not WIP limit: -1",internal
Java 7 source compatibility updates,external
JavaCL: - complete rewrite of CLBuffer genericity to unify with the BridJ port : CLBuffer<DoubleBuffer> is now CLBuffer<Double>  and CLBuffer.read/write/map are no longer strongly typed (it is implicitely typed with Buffer subclasses for compatibility with existing code). The BridJ port will be favoured  and its read/write/map methods use typed Pointer<T>. - complete rewrite of UJMP Matrix implementation  using coding style borrowed from ScalaCL,external
JaxbCollection: Renamed size to maxLength,internal
"Json interface (#60): adding more resources and more functionality to the existing resources. Added an ExceptionMapper to format the error responses. All resources (URIs + methods on them) should now be present, but many of them still completely untested.

Some changes/fixes to the repository code:
 - Repository.delete(): throw RecordNotFoundException, previously delete silently skipped a non-existing record. Fixes #101.
 - Repository.create(): removed unused but declared throws of RecordNotFoundException, this exception makes no sense for record creation.
 - Repository.getRow: the test to check if a record exists did not make sense, now it checks for the presence of the record type column. Fixes #102.


git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4216 b80d95f8-e103-0410-bd55-e03a9dc29394
",functional
KARAF-1243 First part. Refactoring on trunk to remove duplicate code on mbeans and shell. Bugfix for delayed update not yet included,code smell
Keep the original signature intact for backward compatibility,external
Keep track of top-most rank; remove unused abstractions,internal
"LILY-352: changed implementation of scanners that return IdRecord in stead of Record such that this functionality is now accessible via a separate method in the repository API. This prevents clients from casting the resulting Record into an IdRecord
",functional
"LILY-505: added functionality in hbase-index to allow reading index fields from query results. This has the advantage of not having to duplicate the variant properties pattern in the data section of the index entries.
",functional
LOG4J2-1412 Unbox test increasing the cache size should run later,internal
"Last of the planned major changes to the SPI. Aside from Javadoc I consider the SPI to be complete for v2. (with a possible addition of a ProviderMethodBinding feature also)


This change changes the interface of 3 methods of BindingTargetVisitor to take a Set<InjectionPoint>, which replaces the HasInjections interface.

Also, making the ProviderMethods class non-public.

Also, adding extra checks for serialization. I've still got to fix serialization of TypeLiteral.

git-svn-id: https://google-guice.googlecode.com/svn/trunk@616 d779f126-a31b-0410-b53b-1d3aecad763e
",bugfix
Less duplicate code ... I think.,code smell
"Lots and lots of bug fixes with a few minor functionality enhancements.

	modified:   src/main/java/edu/ucla/sspace/common/Similarity.java

- Added warnings for invalid KL-divergence computations

- Added Kruskal-Goodman Gamma

- Discovered Spearman's rho and Kendall's tau are both wrong (not fixed)  :(

	modified:   src/main/java/edu/ucla/sspace/common/statistics/LogLikelihoodTest.java

- Fixed implementation

	new file:   src/main/java/edu/ucla/sspace/graph/ChineseWhispersClustering.java

- Added CW clustering, but it doesn't appear to produce the same results as the
  existing code (needs investigation)

	modified:   src/main/java/edu/ucla/sspace/graph/GraphIO.java

- Tweaked logging

	modified:   src/main/java/edu/ucla/sspace/graph/LinkClustering.java

- Made thread count based on processors instead of fixed

	new file:   src/main/java/edu/ucla/sspace/graph/SimpleWeightedDirectedTypedEdge.java
	new file:   src/main/java/edu/ucla/sspace/graph/SimpleWeightedTypedEdge.java
	new file:   src/main/java/edu/ucla/sspace/graph/SparseWeightedDirectedEdgeSet.java
	new file:   src/main/java/edu/ucla/sspace/graph/SparseWeightedDirectedTypedEdgeSet.java
	new file:   src/main/java/edu/ucla/sspace/graph/WeightedDirectedMultigraph.java
	modified:   src/main/java/edu/ucla/sspace/graph/WeightedDirectedTypedEdge.java

- Added partial support for weighted multigraphs.  More features are probably needed eventually

	modified:   src/main/java/edu/ucla/sspace/graph/io/EdgeListReader.java

- Added better logging instead of printf

	new file:   src/main/java/edu/ucla/sspace/graph/io/GraphMLReader.java

- Added initial GraphML implementation for reading large GraphML files.  Only partial support is in place

	modified:   src/main/java/edu/ucla/sspace/index/DefaultPermutationFunction.java

- Fixed outstanding bug.  Not sure how the bug was there in the first place, as
  the code was currently very broken in an odd way.

	new file:   src/main/java/edu/ucla/sspace/text/AnnotatedDocument.java

- Added support for a new document that has a creation date and a label

	new file:   src/main/java/edu/ucla/sspace/text/BufferedFileListDocumentIterator.java

- Added a new iterator that pre-caches the contents of files in a file list
  using a separate thread to cut down on disk I/O

	modified:   src/main/java/edu/ucla/sspace/text/FileDocument.java

- Added support for a document back by a file whose contents are loaded into memory on demand

	new file:   src/main/java/edu/ucla/sspace/tools/IterativeBigramExtractor.java

- Added a tool for finding statistical associations between terms in an
  iterative pair-wise manner

	new file:   src/main/java/edu/ucla/sspace/tools/LinkClusteringTool.java

- Copied over code from the SVN branch for running link clustering from a jar

	modified:   src/main/java/edu/ucla/sspace/util/CombinedIterator.java

- Corrected the Exception to be thrown in remove()

	modified:   src/main/java/edu/ucla/sspace/util/HashMultiMap.java

- Correct a few errors in removing keys during iterator

- Fixed a bug where null was returned instead of the empty set

	new file:   src/main/java/edu/ucla/sspace/util/KrippendorffsAlpha.java

- Added a partial implementation of Krippendorff's alpha for ordinal-valued data

	modified:   src/main/java/edu/ucla/sspace/util/MultiMap.java

- Clarified the javadoc

	modified:   src/main/java/edu/ucla/sspace/util/ObjectCounter.java

- Implemented max() and min()

	modified:   src/main/java/edu/ucla/sspace/util/Pair.java

- Made Serializable

	modified:   src/main/java/edu/ucla/sspace/util/SetDecorator.java

- Clarified javadoc

	new file:   src/test/java/edu/ucla/sspace/graph/ChineseWhispersTest.java
	new file:   src/test/java/edu/ucla/sspace/graph/SparseWeightedDirectedTypedEdgeSetTest.java
	new file:   src/test/java/edu/ucla/sspace/graph/WeightedDirectedMultigraphTest.java

- More unit tests

	modified:   src/test/java/edu/ucla/sspace/index/DefaultPermutationFunctionTest.java

- Added some debugging output
",bugfix
"Lots of changes mostly just to make the StyledConverter work in a backward
compatible way with existing map-features.csv files.

New feature as suggested by Elrond:  you can give a default name
for each osm rule, that is used when there is no name.  This is useful in
areas that are not completely mapped as many osm features have to use the
same garmin symbol and if they don't have a name it might be difficult to
know what they are tagged as.



git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/style@591 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"Lots of nice updates:

* Colour syntax highlighting for all relevant editors & example viewers.
* User-selectable marker shapes and colours, violation decorators in the navigator tree
* New AST view and related XPath test editor
* Rule search (page form only, non-functional)

Disabled Quickfix views until its ready
Zapped several nevarious bugs in previous functionality

Note: for the time being, violation errors will not appear in the Problems
      page. There is a conflict between having unique markers and 'standard'
      error markers that denote inclusion in the error page. Will check out
      the use of annotations to deal with this...

For evaluation:
   The size and scope of the rule editor is (I believe) outgrowing its
   placement within its preference page and it needs to be parked within
   it own view. Besides, tracking all the edits being made to the rules
   goes beyond what the pref pages can handle (i.e. apply/cancel...
   which never worked properly for the rules in any case)

   To that end, I've copied the rule table into its own view for now and
   left the one in the preference page as is so we can compare & contrast.
   Only one will remain by the time the best approach is chosen.

git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@7115 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
Lots of refactoring and stripping out dead code. Removed the code dependency on the deprecated EAWT methods Renamed packages and introduced new ones to properly segregate the areas of concern. Added support for preferences.,code smell
Lucene Directory performance regression test (trunk),external
MAHOUT-706 use reusable TokenStream in Lucene for performance,external
MAHOUT-767 Improve RowSimilarityJob performance  threshold integration,external
"MATH-389 Duplicate code in ""MultivariateRealOptimizer"" and ""DifferentiableMultivariateRealOptimizer"" moved to new interface ""BaseMultivariateRealOptimizer"". New ""AbstractScalarOptimizer"" superclass allow implementations that do not use derivatives. Deprecated ""protected"" fields. ""NonLinearConjugateGradientOptimizer"" changed to make use of the newly added accessors instead of the ""protected"" fields.",code smell
"MATH-394  MATH-397  MATH-404 Overhaul of the ""optimization"" package. Removed lots of duplicate code. Removed methods referring to the concept of ""iteration"". Removed interface methods to access the number of evaluations of the gradient and Jacobian. Removed all references to ""OptimizationException"" (replaced by ""ConvergenceException""). Javadoc comments updated.",code smell
MEDIUM: Fixed old code generator because it is still needed for a while. Backward compatibility shall be maintained,external
MNG-5871 refactoring: put url extrapolation algorithm in inheritance model merger,internal
MODE-1334 Ported java sequencer from 2.x -removed old OriginalFormatSourceFileRecorder -refactored test code so that the class file and java file sequencers use the same test files -fixed JDT parser so that 1.5 files (and greater) are properly handled -refactored JDT metadata classes,code smell
MODE-2629 Fixes the issue with too many parameters for the IN clause This commit changes the queries that get sent down to the DB so that when the number of parameters exceeds a certain limit  the IN clause gets broken down into multiple IN OR IN clauses. It also adds Docker support for the modeshape-persistence-relational module so that low level DB operations can be tested against different DBs.,code smell
MONDRIAN  Enhanced support for native evaluation of virtual cubes.  Queries involving dimensions that do not join to all base cubes in the query can now be natively evaluated. This change involved refactoring of SqlTupleReader  HighCardSqlTupleReader and the Target classes used in each to eliminate duplicate code.  ,code smell
MONDRIAN: removed dead code  added package documentation for rolap package  activated tests for FastBatchingCellReader,code smell
MONDRIAN: rolling back removeoverlappingtuples optimization for distinct count.refer http://forums.pentaho.org/showthread.php?t=59308.By removing this tuple list optimization we get a boost in performance at the cost of losing capability to handle elimination of duplicates and duplicates occur in rare scenarios.,external
Made XReferenceType an interface.  Changed XObjectType to extend AbstractVertex.  Added InheritanceGraphEdge class. These changes allow us to create a graph of inheritance relationships.,internal
"Made all functional tests run for the bucket size feature.

Close #13 since running all functional
tests, means that this feature is done.
",functional
Made an InterfaceGenerator  renamed CSharpClassData to CSharpData for some abstraction reasons. Made ClassGenerator and NamespaceGenerator work together well  now it sees the nested namespaces  but cannot see which it is nested to. Will do that later. Fixed small typo in ModelCreatonService,internal
Made annotator tests extend abstract AnnotatorTestData class,code smell
"Made following UI changes:
- Added notes functionality
- Added tabbed results window
- Added distance function capibilities
- Added review panel (still work in progress)
- Added double click on item windows to add and remove items


git-svn-id: https://www.evllabs.com/svn/jgaap/trunk@160 bcaee279-2e94-4b2e-be96-a1d7c6f3fc26
",functional
"Major new functionality

Featues
- Added http file downloader, integrated into TVRageProvider
- Implemented 'check for updates' and preference option

Code changes
- FINALLY made preferences static (yay!)
- Renaming of many UIStarter variables to conform to nameType
- Moved string handling into StringUtils
- Updated tests",functional
Major performance update,external
Major refactor. Fiction scripts are now being parsed. There is still some dead code to trim  but now the fiction and parser configuration (vocabulary) are being loaded from the file. I still need to process expressions when verb messages are received.,code smell
Major refactoring of FormModel related code: * Reorganized interfaces and implementations * Reorganized package structure * Improved JavaDoc * Introduced validation abstraction * Removed dependency on Rules for validation * Dirty tracking now works for unbuffered form models * Dirty tracking now fires property change events * Revert now works for unbuffered form models * Improved unit test coverage to about 80%,internal
Major refactoring to remove duplicate code detected by Simian. Just demonstrates the power of the tools for find code that needs refactoring.,code smell
"Make IterableSubject.UsingCorrespondence.displayingDiffsPairedBy() work for containsExactly and containsExactlyElementsIn, and make it public.

This follows the precedent set in ef55cb75d588f8af387f69b39e6aac0259215b42 for containsNoneOf/In and says ""corresponds to"" instead of repeating the correspondence.toString() when in a loop. (I actually vaguely think that we should switch to always saying ""corresponds to"" on the second and subsequent occurrences. That would be possible, but it would create churn in several existing messages, so I'm not doing it here. At least, though, we should make sure we never repeat correspondence.toString() a number of times that scales with the size of the input.)

Also adds a TODO in fuzzy.md to remind me to update it in due course. (My plan is to do that when the feature is more-or-less complete, and to put something in the RELNOTES for that commit which can direct folks to the docs for more info.)

RELNOTES=n/a

-------------
Created by MOE: https://github.com/google/moe
MOE_MIGRATED_REVID=186598186
",functional
"Make Jedis Cluster more likely to antirez's redis-rb-cluster

JedisClusterCommand

* improvements on connection error handling
** if based on slot connection throws connection related exception, retry to random node
** if we retry with random node, but all nodes are unreachable, throw JedisConnectionException without retry
** try to release connection whether connection is broken or not

* bug fix : if asking flag is on, and success this time, set asking flag to off

JedisClusterConnectionHandler

* have flexibility on initializing slots cache
** allow some nodes connection failure - skip
** if current node is success initializing slots cache, skip other nodes
** if current node failed to initialize slots cache, discard all discovered nodes and slots

* set nodes if node does not exist in nodes
** it restricts JedisPool to replace - prevent IllegalStateException : Returned object not currently part of this pool

JedisSlotBasedConnectionGuaranteedConnectionHandler

* getConnection (random connection)
** check all connections by random sequence
** always return valid connection (able to ping-pong)
** throw exception if all connections are invalid

* some refactoring
",bugfix
"Make assertThat(doubleArray).hasValuesWithin(tolerance).of(expected) take double... instead of double[] for expected, and add .ofElementsIn(Iterable<? extends Number>). Similarly for float. While we're here, fix a couple of typos in text, and add tests for the case where the object (as well as the subject) are null.
-------------
Created by MOE: https://github.com/google/moe
MOE_MIGRATED_REVID=111610534
",bugfix
Make bitcoinSerialize() return a copy by default  provide an unsafeBitcoinSerialize() method for high performance applications that are willing to deal with the extra API complexity.,internal
Make bitcoinSerialize() return a copy by default  provide an unsafeBitcoinSerialize() method for high performance applications that are willing to deal with the extra API complexity.,external
"Make extending Zone easier, and many other fixes

This changes to allow overriding drawImpl(), touchImpl(), etc instead of
draw() touch(), so as to act the same as the reflection methods.

Changes built-in zones to use these methods for simplicity and testing

Also the warnings that the methods dont exist are not displayed when
these are overridden now

Change some of the example sketches to use this method too.

Also fixed textZone, and changed the pressed color on ButtonZone

Changed SMTTouchManager to use map<Touch,Zone> instead of map<Long,Zone>

Moved the tint/stroke/fill restore code to endPickDraw() instead of
beginDraw(), as there are other zones that would be affected by this
now, since the draw no longer occurs right after pickDraw always on a
zone (when direct, which has been the default for a while)
",bugfix
"Make new helper method, testGetEpisodeDataTitle

Just pull all the functionality out of the loop in testGetEpisodeTitle, and make it a separate method.  Add some javadoc.

Use ""ignore whitespace diffs"" to properly see the limited extent of the change in this commit.
",functional
"Makes the getAllDocIds() call more accepting of unexpected values. The
previous version couldn't handle arrays inside of a row object which was a
problem for CouchBase List for Android which tends to return _conflicts
even when it wasn't asked for.

Also added test for new functionality.
",functional
Many robustness improvements to the downloader,external
"MapSource installer improvements
* uses family name for directory name
* map can now be uninstalled from ""Add/Remove Programs"" (WinXP) or ""Programs and Features"" (Vista/Win7)
* uninstalls map if already installed (NEW: silently force uninstall if silently installing)
* installer and license files are now generated from templates for easier maintenance
--Nakor

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@1882 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"Massive efficiency updates to HAL: when dropping columns, only non-zero values are touched.  Fix entropy code to interpret given arrays as un-normalized probability distriubtions and not records of events
",bugfix
Massive update. - Infractions now is split into 3 parts. -- **Base** contains the main  cross-platform data classes that are shared between all implementations. -- **Bungee** is the default implementation as a BungeeCord plugin. -- **Spigot API** is an API that exists to allow for plugins to hook into Infractions from their spigot/bukkit plugins. - It is intended that individual servers will have their own take on Infractions  and thus a mere config file is unsuited for the majority of features (a la the Chitchat plugin). -- In this case  there is no default spigot/bukkit implementation  only an API that exists for accessing/manipulating the data. - Groundwork has been laid for the bungee plugin  various commands will be shared between servers. -- Many of these commands will probably be moved to the spigot API or completely removed (as we want each server to have their own implementation). - A default/barebones implementation for spigot/bukkit *may* exist in the future.,code smell
MassiveCore - Performance improvement for command argument readers.,external
Massively improved efficiency and performance of Criteria folder handling.,external
Measure coverage for equals/hashCode methods with inheritance generated by Lombok,internal
Merge compatibility APIs from `-hadoop{1 2}` branches.,external
"Merge fixes from Luna:

https://bugs.eclipse.org/bugs/show_bug.cgi?id=479851 - Kontextmenu
Documentation Dialog does not store correct Documentation object

https://bugzilla.redhat.com/show_bug.cgi?id=1227392 - Second level
sub-process connections not rendering correctly

https://bugzilla.redhat.com/show_bug.cgi?id=1265413 -  Multi Instance
subprocess not valid when validated

https://bugzilla.redhat.com/show_bug.cgi?id=1263551 - Missing General
tab in 'Edit Lane' popup.
Simple change: always display a Tab in the popup dialog, even if there
is only one Tab.

Change-Id: Ide169511e73baded7d1bee662c546cca83808ebe
",bugfix
"Merged ""feature-generation"" with current master  (#119)

* include feature instructions in README.md

* added example to demo basic feature bundles

* added dummy source

* added example for creating feature from pom

* Enable creation of features whilst generating p2 repo

* added missing file

* pom mod in examples

* update integration tests and README in line with enhancements for feature bundles

* fixed feature-bundle integration tests

* minor changes

* Reverted feature-bundle-01/02-tests and fixed Array index out of bounce error

* Changed version tag to 1.2.0-FOC-SNAPSHOT

* Fixed: Computation of symbolic name, if original jar is already a bundle

* FIXED: bundling of transitive features. (dependencies were not resolved)
CHANGED: generation of source features.
REVERTED the IP2Artifact interface.

* Source-Feature is a separate feature

* Code review as suggested from Tom

* 1.2.0-FOC

* increased version number to 1.2.1-FOC-SNAPSHOT

* FIX POM to integrate in Foconis CI environment

* ADD: SCM

* [maven-release-plugin] prepare release v1.2.1-FOC

* [maven-release-plugin] prepare for next development iteration

* FIX: Starter Version to compile on build server

* Revert ""FIX: Starter Version to compile on build server""

This reverts commit af949ab1b2d68d7360e876310eabd2e88526fcca.

* reverted CI-changes

* adjust parameter / fields type to new maven bundle plugin API

* fix broken test because of an broken import package (bndtool)
",bugfix
Merged duplicate code,code smell
"Merged revisions 391-416 via svnmerge from 
https://svn.parabola.me.uk/svn/mkgmap/branches/filters

........
  r391 | steve | 2007-12-01 17:22:34 +0000 (Sat, 01 Dec 2007) | 1 line
  
  Broke out the splitting of lines a little.
........
  r392 | steve | 2007-12-01 17:28:23 +0000 (Sat, 01 Dec 2007) | 1 line
  
  Remove the inline line splitting code.
........
  r393 | steve | 2007-12-01 20:29:03 +0000 (Sat, 01 Dec 2007) | 1 line
  
  Create filter infrastructure.
........
  r394 | steve | 2007-12-02 14:35:27 +0000 (Sun, 02 Dec 2007) | 2 lines
  
  A working implementation, although there is more to break out into filters and then we need to add some
  more functionality.
........
  r395 | steve | 2007-12-02 22:12:43 +0000 (Sun, 02 Dec 2007) | 1 line
  
  rename filter chain
........
  r396 | steve | 2007-12-02 22:13:25 +0000 (Sun, 02 Dec 2007) | 1 line
  
  rename line splitting filter
........
  r397 | steve | 2007-12-03 09:00:24 +0000 (Mon, 03 Dec 2007) | 1 line
  
  rename line splitting filter, add polygon splitter
........
  r398 | steve | 2007-12-03 10:28:16 +0000 (Mon, 03 Dec 2007) | 1 line
  
  Make sure that lines are always copied before changing their points as this would change them for all levels.
........
  r399 | steve | 2007-12-03 10:29:17 +0000 (Mon, 03 Dec 2007) | 1 line
  
  Add the copy constructors to the MapShape class too.
........
  r400 | steve | 2007-12-03 11:03:36 +0000 (Mon, 03 Dec 2007) | 1 line
  
  Add filtering for polygons and only add the line filter for lines and the polygon filters for polygons...
........
  r401 | steve | 2007-12-03 11:22:18 +0000 (Mon, 03 Dec 2007) | 1 line
  
  Some tidying
........
  r402 | steve | 2007-12-03 12:07:22 +0000 (Mon, 03 Dec 2007) | 1 line
  
  Split out files from the general package that do the actual general-->garmin conversion.
........
  r405 | steve | 2007-12-03 17:23:48 +0000 (Mon, 03 Dec 2007) | 1 line
  
  Useful amount of smothing applied.
........
  r406 | steve | 2007-12-03 20:58:29 +0000 (Mon, 03 Dec 2007) | 1 line
  
  Fix where was not returning after chaining the filter.
........
  r407 | steve | 2007-12-03 20:59:07 +0000 (Mon, 03 Dec 2007) | 1 line
  
  Now we have a polygon splitter.  Polygons that have too many points will be split.
........
  r408 | steve | 2007-12-03 21:16:07 +0000 (Mon, 03 Dec 2007) | 2 lines
  
  Remove println's
........
  r409 | steve | 2007-12-03 21:23:57 +0000 (Mon, 03 Dec 2007) | 1 line
  
  Now that the smoothing is in a filter, remove the old code to remove duplicate points.
........


git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@417 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",bugfix
Method name change to avoid confusion with visibility: hidden / Don't create empty inline boxes after all (inline layout will ignore them anyway) / Robustness improvements to generated content (treat display: table/table row groups/table-row as regular block boxes),external
MiniMaven: refactor a bit for readability,external
Minimize transient garbage volume by optimized serialization based on the 'Kryo' library * AutoKryo     extension of Kryo to allow classes to control their own registration  trigger registration of associated classes  and deserialize classes without no-arg constructors * KryoBinding     binding for use with BDB that uses AutoKryo serialization for a 2X-4X reduction in byte[] size * UURI     improved serialization via Externalizable and Kryo's CustomSerialization methods * BdbModule     discard deprecated CachedBDBMap option     (getObjectCache) extend with both declaredClass and valueClass (for when map values are specializations of the declared type  as with frontier.allQueues)     adjust type declarations * ObjectIdentityBdbCache     use KryoBinding rather than SerialBinding * CachedBdbMapTest     discarded * BdbFrontier  BdbServerCache  StatisticsTracker     adjust type declarations  objectCache creation * BdbMultipleWorkQueues     use KryoBinding rather than (Recycling)SerialBinding * BdbWorkQueue  CrawlServer  CrawlHost  CrawlURI     add autoregister support * LinkContext     public for kryo registration  ,internal
Minor Change: Transfer second cycle applications to other period functionality,external
Minor fixes: Removed dead code  fixed variable names.\n Also  using normalize method of WeightedIntDocVector when building weighted int doc vectors. We should do the same change to other places in code where there is normalization.,code smell
Minor performance improvements.,external
"Minor rationalisation of engine manager actions

* The bootstrap action no longer imports samples. (This change was made
as samples are now considered an optional feature, so arguably shouldn't
be loaded if they are not being used.)
* The reimportSamples action has been renamed importSamples
* The rebuildSchema action has been deleted, as it is now essentially
the same as bootstrap.
",functional
"Modified Tuple.compareTo() (#1573)

* Implemented ByteArrayComparator and added test codes.

* Modified Tuple.compareTo() and added test codes.

Tuple.compareTo() was not handled correctly. For example, following code used
to output 0, but it should not.

<java>
Tuple tuple1 = new Tuple(user1, 1d);
Tuple tuple2 = new Tuple(user2, 1d);
System.out.println(tuple1.compareTo(tuple2));
</java>

This update tries to fix this issue.

* SortedSet<Tuple> will maintain Redis order (when there is no precision issue).

Recent change in Tuple.compareTo() now allows SortedSet<Tuple> to maintain the
default order of Redis SortedSet as long as the precision issue does not come
into play.

Test codes are added for this feature.

* Test added for multiple elements with same score.

* Test ByteArrayComparatorTest where one array is prefix of another.
Also tests are changed to accept any positive or negative value, not just +1 or -1.
",bugfix
Modified unit test after having removed dead code,code smell
Modify some method calls  so they meet the LimitOffsetQueryData class.,code smell
MongoStore: Refactor to avoid to long methods,code smell
More abstractions in Adapter pattern + exercise for Bridge pattern,internal
More cleanup and following through on better encapsulation of Flags.dimension and Flags.seedlength.,internal
More flexible EC2 user data classes.,code smell
More sophisticated partial indexing which allows decisions based on other fields. Added ValueIf and PojoIf base classes. Fixed a bug in If class inheritance. Added unit test for PojoIf.,internal
More style stuff; use \n line separator always  unify use of log placeholders  fix unit tests that weren't cleaning up files (MAHOUT-217)  remove dead code  redundancies  etc.,code smell
"More work on Copy/Paste feature: still need to implement Lanes and
Pools.
Bug 411421 - Event Definition decorator appears inside Event Label.
Remove useless ""Morph Activity"" context button for Gateways.",bugfix
More work on abstraction.,internal
More work on abstraction.,internal
"More work on term mapper interface. Added in more functionality. Auto annotation according to score received from BioPortal. Clear all mappings.
",functional
Move *MetaData classes to meta subpackage  rename MetaData to ExchangeMetaData,code smell
Move SynchronizationAdapter to support and add compatibility stub,external
"Move calculations of road speed and road class before the RoadMerger. This is a preparation for the compatibility mode that performs the old behaviour with checking the flat access tags.

Probably this breaks the --link-pois-to-ways option which need to be fixed anyhow.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/mergeroads@2790 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",bugfix
Move enable jobs functionality over to the Jobs class  this also now runs code after everything has been initialized,external
Move shell abstraction into scan service package where it is used,external
Moved MD5 utils from WalkerTest to BaseTest for use by PipelineTests. Moved VariantEval validation from FCPTest to PipelineTest. Cleaned up some duplicate code for writing temp files during tests. Moved FCPTest to playground namespace to match move for FCP.q. Added a basic HelloWorldPipelineTest for the HelloWorld QScript.  Moved duplicated error handling from JobRunners into the FunctionEdge.,code smell
Moved as much duplicate code as possible into a different package.,code smell
Moved data classes to a more suitable package.,code smell
Moved worker thread spawner into new method (NPath Complexity is 80 (max allowed is 50)).,internal
Moved xml document creation into DBMetaData class  from NetKernel accessor.,code smell
Moving functionality to client. Some parts are in stub form  some are not done yet. Xml parsing is in flux,external
Moving setValues() into deserializer as logic shouldn't be within data classes,code smell
Moving some duplicate code into AttachmentUtil,code smell
Much less mockup in the updatetracker  and better performance for the summa integration,external
Multiple categories on tests  category inheritance  production classes in production package.,internal
Multiple code improvements - common-java:DuplicatedBlocks  squid:S00112  squid:S134  squid:MethodCyclomaticComplexity  squid:HiddenFieldCheck  squid:S1172,internal
Multiple code improvements - squid:MethodCyclomaticComplexity  squid:S00119  squid:S134  squid:RedundantThrowsDeclarationCheck  squid:SwitchLastCaseIsDefaultCheck  squid:UselessParenthesesCheck,internal
"NEW - bug 277813: RFC119: NPE when distributing services but no discovery provider is activated
https://bugs.eclipse.org/bugs/show_bug.cgi?id=277813
",bugfix
"NEW - bug 303667: [Discovery][jSLP] Write XML report for tests
https://bugs.eclipse.org/bugs/show_bug.cgi?id=303667
Write to System.out too
",bugfix
"NEW - bug 314999: [Discovery][DNS-SD] Implement IDiscoveryAdvertiser
https://bugs.eclipse.org/bugs/show_bug.cgi?id=314999
Unregister with service properties set",bugfix
"NEW - bug 331878: [Discovery][Zookeeper] Zookeeper unit tests crash the VM with system exit 10 due to FileNotFoundException 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=331878",bugfix
"NEW - bug 420290: Asynchronous Remote Services may support
java.util.concurrent.Future
https://bugs.eclipse.org/bugs/show_bug.cgi?id=420290
Signed-off-by: Markus Alexander Kuppe <bugs.eclipse.org@lemmster.de>

Change-Id: I903caca3f27fba87014ea30fc074fc4c8e7f0c4f
",bugfix
"NEW FEATURE: system properties can depend on other system properties. Simply usage:
mySpecializedPath=@@basePath@@/specialStuff
basePath=/Volumes/aDirectory
Now initializes Log4J, too.


",functional
"NOJIRA

Majority of functionality implemented. Will compile, however, contains bugs. Tested on 2.6.1 with Spring 2.5.1

In this release:
1.) Implemented IWeatherDao to retrieve from data and find locations from AccuWeather.com
2.) Implemented view mode
3.) Implemented edit mode
4.) Implemented test class
5.) Modified domain objects for broad functionality
6.) Added weather images
7.) Sized and added AccuWeather logo

TODO: 
1.) Fix edit mode bugs
2.) Address styling
3.) Add Caching
4.) Implement Yahoo Weather service

git-svn-id: https://source.jasig.org/sandbox/WeatherPortlet/trunk@15140 f5dbab47-78f9-eb45-b975-e544023573eb
",functional
"NOJIRA Adding AJAX functionality to calendar list.

git-svn-id: https://source.jasig.org/portlets/CalendarPortlet/trunk@15518 f5dbab47-78f9-eb45-b975-e544023573eb
",functional
"NOJIRA add search username functionality to ComplexStub dao

git-svn-id: https://source.jasig.org/person-directory/trunk@16467 f5dbab47-78f9-eb45-b975-e544023573eb
",functional
"NXCM-4446: Fixed references to old plugin
NXCM-4446: Bonus point: GAV is used in text messages
NXCM-4444: Fixed compatibility with Maven221
",bugfix
NetCDFReader code to be moved into ExperimentalData class,code smell
"New ""access"" system to replace old ownership system. Access can be granted to build, destroy, and fully interact within any chunk for specific players or factions. Access can also optionally be denied to normal members of the host faction.
Some further info display to go with this feature is yet to come, and further testing for possible bugs is also needed.

Related info:

New FPerm ""ACCESS"" which is granted to faction leaders and officers by default. This FPerm allows you to bypass access restrictions throughout your faction territory, and (along with the ""factions.access"" Bukkit permission below) allows you to change access settings for any chunk owned by your faction.

New permissions:
factions.access - Ability to grant territory access for your faction, if you have the proper ""ACCESS"" FPerm (defaults to leaders and officers only). Added to factions.kit.halfplayer permission kit.
factions.access.any - Ability to grant territory access for any faction on the server. Added to factions.kit.mod permission kit.
factions.access.view - Ability to view territory access info for your own faction. Added to factions.kit.halfplayer permission kit.

New command:
/f access [view|p|f|player|faction=view] [name=you] - view or change the access information for the chunk you are in. If ""view"" or nothing is specified, it will simply display the info. If ""p"" or ""player"" is specified, a player will be granted access, or removed from the list if they were already granted access. If ""f"" or ""faction"" is specified, the same will be done for the specified faction. The name defaults to yourself or your faction if not specified. If your own faction is specified, you will toggle restricted access for the chunk so that normal faction members can be denied access, unless they are in the access list.
Examples:
/f access - view access list, if in your own territory
/f access p SomePlayer - grant access to player ""SomePlayer"" for the current chunk, or remove them from the access list if already there
/f access f - toggle restricted access for the current chunk (since faction name isn't specified, uses your own faction), assuming you're in your own factions territory
",functional
"New Feature: FenixFrameworkThread

  * Internal threads created by the Framework should now extend FenixFrameworkThread.
  * All FenixFrameworkThread's are shut down whenever the Framework is shut down.
",functional
"New HTML report aggregating all the charts and data from CSV files
* More ways of retrieving data from SimpleStatistics
* Fixed bugs in HistogramStatistics, Table...
* Removed unused code (ChartGen, AbstractChartGen, PutGetChartGenerator...)
* chart.sh -> report.sh: generates whole report, not just single chart
",bugfix
"New compiler feature: track whether imports are actually used and only then generate a dependency to the imported class. Runtime update that takes advantage of this feature follows.
Also, updated detection and handling of packages to be more AS3 compatible.

[git-p4: depot-paths = ""//coremedia/jangaroo/"": change = 170532]
",functional
"New feature branch to allow a custom listener to be created for ERXStatisticsStore. Such a listener can be used to notify an external monitoring system (e.g. StatsD/Graphite) if request handling is slow.
",functional
"New feature: Integration of Jangaroo properties compiler (*.properties -> *.as).
Same pattern as EXML compiler: generate AS class out of another format (here: properties file).
+ version update.

[git-p4: depot-paths = ""//coremedia/jangaroo/"": change = 176493]
",functional
"New feature: Investment Plan

Investment plans allow the automatic generation of
recurring portfolio transactions - either as a BUY
or as a DELIVER_INBOUND transaction.

The editor enabled the user to manage his or her
investment plans and edit the resulting transactions.
",functional
"New feature: besides jangaroo-application.js which loads all scripts and modules, we now produce a file jangaroo-application-all.js which *contains all* script and generated JavaScript code. This allows to deploy a Jangaroo application as a single JavaScript file. Note that like with Flash, you still need a HTML wrapper and might need additional resources loaded by the application.
",functional
"New feature: dynamic fields for the indexer, avoids the need to specify a mapping for each field individually.


git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4764 b80d95f8-e103-0410-bd55-e03a9dc29394
",functional
"New functionality for the demonstration-framework

git-svn-id: http://svn.javaforge.com/svn/DockingFrames/trunk@125 3428d308-0d2e-0410-b3d4-94d0fefcacdf
",functional
New patch from Chris Wiebe to boost the performance of the TypeInfo  a separation is done via the Core and UI to provide more flexibility for clients using this service.,external
New performance tests for rename package  move compilation unit and move static members,external
New tests and fixes - inheritance  injection,internal
Now DocumentHandler uses DocumentProducer instead of duplicate code.,code smell
Now Includes Performance Improvements - All the maps iterators to for-each loops - Removed duplicate code - Other minor changes,code smell
"Now features store geo data, and marker display them. GeoDataReader loads features, which a MarkerFactory uses to create markers. Added and refactored examples.

Added Features to store geo data in. GeoDataReader implementations load
various data formats (gpx, geojson, georss), returning features.
A marker can be created from a feature via a MarkerFactory. Marker
still can be created on their own.
Changed properties hash map of Feature and Marker to HashMap<String,
Object>.
Refactored and cleaned up examples. Added examples.
",functional
"Now loads the new files: lines, polygons and points from a style.
The test style is set up to be identical to the default style except that it
uses the new files and not the map-features.csv file.  Verified that it
produces identical results.

Some things will not work that were hardcoded in however: contour lines will be the most obvious case.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/style@690 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
Now the compiler supports a switch statement.,code smell
OGM-146 Simplify PackagingRule  second pass: removing dead code,code smell
OGM-256 Provide support for InheritanceType.TABLE_PER_CLASS,internal
"OOZIE-1424 Improve SLA reliability on restart, fix bugs related to SLA and event generation (virag)

git-svn-id: https://svn.apache.org/repos/asf/oozie/trunk@1495272 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
OPENNLP-175 Removed duplicate code in parser train methods,code smell
"One more:
Integrations from IDEA 8 plugin:
* multiple source roots for jooc
* EXML now has its own Facet
* file templates
* minor bug fixes

[git-p4: depot-paths = ""//coremedia/jangaroo/"": change = 172251]
",bugfix
Op products and compositions,internal
Optimize SkipList flush by Sync thread to check if mem-table entry after sync-logMarker  which indicates the target checkpoint position. SkipList is augmented to capture last rolled-logMarker before inserting any entry  to indicate all entries are added after rolled log Marker (aka checkpoint). The sync thread simply move sync-logMarker on timeout or shutdown for checkpoint position  which allows SkipList size limit and sync-interval settings factored in the tuning.,internal
"Order by pub. date in sobi fragment dao.

Alters the ordering functionality of the sobi fragment dao to order by
published date rather than fragment id.  The intent is always to
retrieve the fragments in date order, and with fragments from 2
different sources, the fragment id order is no longer equal to the
published date order.
",functional
"PAXRUNNER-227 Implement smxk feature scanner

git-svn-id: https://scm.ops4j.org/repos/ops4j/projects/pax/runner@14736 9b982a3c-3ae5-0310-a4bc-d9a3335569bd
",functional
"PAXRUNNER-227 Reimplement features scanner using smx internals.

git-svn-id: https://scm.ops4j.org/repos/ops4j/projects/pax/runner@14808 9b982a3c-3ae5-0310-a4bc-d9a3335569bd
",functional
PDI-11201 - Modified processList  processRecord in NoAuthMongoClientWrapper to allow for null values  added fields to unit test json to validate  deleted dead code,code smell
"PLFED-73: password mask feature for PLFed config files

git-svn-id: https://svn.jboss.org/repos/picketlink/federation/trunk@259 cbddccc4-e45a-42eb-be77-0d76e4b45d38
",functional
PMD Rule:ExcessiveMethodLength Priority:3 Avoid really long methods . Issue #744,code smell
"PR: MNG-819
Submitted by: Edwin Punzalan
Reviewed by:  Brett Porter
Add maven1 features to the checkstyle plugin


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk/maven-plugins@267435 13f79535-47bb-0310-9956-ffa450edef68
",functional
PRD-4379: Metadata classes copyright update; API change AttributeRegistry has a put-semantic  not a classical getter/setter semantic.,code smell
"Part fix for issue #30: 1-N for QueuedLtiOutcome

I've added functionality for a CandidateSession having many
QueuedLtiOutcomes, and the CandidateItemSessionController now correctly
updated the closed flag for CandidateSessions after every action,
possibly registering a new QueuedLtiOutcome every time the session
closes.

I next need to update the LTI result returning to ensure that results
always go back in the correct order, which would normally be the case
but might go out of order if there is a transient failure somewhere.
",bugfix
Password complexity  force register and ip verification options  xauth.exclude permissions node to exclude a group/player from having to register  option to block players with blank names from joining the server  players are no longer kicked if someone with the same name joins the server  unregistering a player now notifies them and hides their inventory  registration.pw-min-length -> password.min-length  security.filter.* -> filter.*,internal
"Patch from Alex Rosen.  In his words:

--
I tried some more tests using different buffering strategies. I tried 5 new
strategies, mostly with Xerces 1 and Crimson on JDK 1.2.2, but also some
with Xerces 2 and some with JDK 1.4. Basically, it doesn't much matter what
strategy you use, as long as you don't try to reuse the StringBuffer. (The
strategies included using a new StringBuffer each time, plus 4 variations on
the idea of putting the first chunk into a String, and the rest into either
a StringBuffer or an explicitly-managed char array.)

- The beta 8 version is fine, because it uses StringBuffer.substring(),
which creates a String that doesn't share the underlying char array. But,
it's not JDK 1.1 compatible.

- The current CVS version, which is 1.1 compatible, has horrible
performance. I'm not 100% sure why that is. At least part of it has to do
with the fact that it's creating a minimum 16-char array for each string.
That eats up memory quickly when a lot of the text sections consist of only
a newline, for example.

- All 5 of the schemes I used come out about the same, and are comparible in
speed to beta 8. The only noticable difference is that when you use a
StringBuffer, you can end up with extra, unused memory laying around
(because StringBuffer.toString() tries to use its internal buffer, which
might be bigger than necessary). Even with Crimson, this is only significant
in edge-case documents, where characters() gets called many times per text
section, but I guess it's worth fixing.

So I used a TextBuffer class that Brad sent me, which puts the first chunk
into a String, and then for subsequent chunks it uses its own char array
instead of using a StringBuffer. This should get us pretty optimal
performance, and remain 1.1 compatible. This class could be reused if we
have other builders in the future, e.g. XNIBuilder.

I also changed name of the internal subset StringBuffer from ""buffer"" to
""internalSubset"", to avoid confusion.

Alex
--

In my own testing, under JDK 1.4 I don't see much difference before and
after this patch.  Sometimes it's faster, sometimes it's a little slower.
Under JDK 1.2.2 though this patch is a fantastic speedup, nearly cutting
in half the build times!

Interestingly, after this patch I see some builds are faster under
JDK 1.2.2 (JIT) than JDK 1.4 (HotSpot).  Ah, the joys of performance
tuning Java...

-jh-
",bugfix
"Patch from Kris Jurka to improve the performance of getImportedKeys().
Use explicit joins to avoid using the genetic query optimizer.  Also fixed
a regression test that was failing to compile.  This change also cleans up
how key names are reported as per:
A change to the value of the FK_NAME column.  Currently the returned value
is the triggers arguments which look like

""<unnamed>\000t2\000t1\000UNSPECIFIED\000a\000a\000""

This was required for server versions < 7.3 when a user did not supply
constraint names.  Every constraint was named ""<unnamed>""
.  7.3 has enforced unique constraint names per table so unnamed foreign
keys will have different names ""$1"", ""$2"" and so on.  I've used logic
along the lines of the following to preserve the unique names in the
original scheme, but allow people who go to the trouble of naming their
constraints to see them:

if (triggerargs.startsWith(""<unnamed>"")) {
	fkname = [the whole ugly trigger args name originally used];
} else {
	fkname = [the actual fk name];
}

 Modified Files:
 	jdbc/org/postgresql/jdbc1/AbstractJdbc1DatabaseMetaData.java
 	jdbc/org/postgresql/test/jdbc2/optional/ConnectionPoolTest.java
",bugfix
"Patch from Laurent Bihanic.  His description is below.

-jh-

Please find attached a new version of SAXOutputter patch which include:
  - Notification of EntityRef thru ContentHandler.skippedEntity() (new method
entityRef())
  - Notification of some errors to the registered SAX ErrorHandler (new
*protected* method handleError())

JDOMSource has been updated to support outputting portions of documents.
Finally I rewrote the list vs document handling in JDOMResult to avoid
destroying the original document (setDocument) to recreate it later (getDocument).


> Attached is a patch to SAXOutputter that fixes the following:
>
> - Added support for Comments as Element children;
>
> - Added support for CDATA (i.e. distinguish CDATA from plain text and
> use of the start/endCDATA callbacks of LexicalHandler): new method cdata();
>
> - Remove support for CDATA as children of the document node
> (Method output(Document) used to test on CDATA nodes and fired the
> corresponding events which seems invalid according to the XML spec. and
> the XML parsers I tried!);
>
> - Added support for outputting portions of documents (i.e. lists of JDOM
> nodes) as such output is valid when used as input of XSLT processors.
> This feature will be used by JDOMSource.
>
> Note: Method elementContent() has been rewritten to support CDATA. The
> optimization for text-only content has been removed as it did not seem
> to bring any performance improvement and made the code quite
> complicated. In order to make code clearer, this method now uses the
> same type of loop as used by output(Document).
>
> Regards,
>
> Laurent
>
>
> Laurent Bihanic wrote:
>
>>
>> Hi,
>>
>> While reading the SAXOutputter code (latest from CVS), I found 2
>> apparent bugs:
>>
>> 1. No support for Comments as Element children
>> SAXOutputter fires SAX events for Comment nodes in method
>> output(Document) but not in method elementContent(Element,
>> NamespaceStack). Hence only top level comments are outputted.
>>
>> 2. No support for CDATA
>> The method characters(String) should be changed (adding an argument or
>> a new method) to support reporting whether the outputted text is
>> regular or CDATA using LexicalHandler's start/endCDATA methods.
>>
>> Finally, SAXOutputter's code never checks for EntityRef nodes. Thus
>> these simply disappear from the outputted document. Is this on
>> purpose? Shouldn't JDOM at least use ContentHandler's skippedEntity?
>>
>> Laurent
",bugfix
"Perform all costly operations during session backup asynchronously (using the configured number of threads) if sessionBackupAsync is set to true (fix issue #51)
",bugfix
"Performance enhancement: use sets to define filters; add module paths mbean operation; add additional logging messages; use exact match for filters; reduce resize overhead on paths maps; fix bug in quoting glob escapes
",bugfix
Performance improvement :  client rest api change,external
"Performance improvement for the SingularField rule.

Scanning PMD src goes from 2minutes down to 25 seconds. Performance improvement is huge on larger sources - 7,000 classes scanned in 4 minutes down from 55!

Also fixed defect 1526530 SingularField False Negativesrule now detects problems inside static and constructor blocks


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@4472 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
Performance improvements,external
Performance improvements around anonymous entry points.,external
Performance improvements:  - Memoized MathUtil's cumulative binomial probability function.  - Reduced the default size of the read name map in reduced reads and handle its resets more efficiently.,external
Performance optimization of annotation processing/handling,external
Performance optimizations for Genotype field decoding for GT field,external
Performance tuning,external
Performance: Claim Lookup,external
"Playing a folder now sends path to server instead of long list or track IDs.  Reduces need for 2 ajax calls and resolves problem when URL exceeds browser limit (fixes #44)
",bugfix
"Port functionality from B2009_03_26_HBasePersistence to trunk:
 * OID generation that does not depend on OJB (not yet enabled, but ready to use)
 * Add ownerObj and slotName attributes to VBox
 * Make all VBoxes serializable, including arbitrary composition of value types (still not implemented for SQL)



",functional
Portals and inheritance,internal
Portlet: Created JBDS7CompatibilityGatein test with artefact updated on nexus,external
Preload backgrounds during population overview gen. Extract common preload functionality into sps-gamelib. Move preloader UI elements into sps-gamelib. Cleanup unpackaged game source code files.,external
Prismtech JAC#429: performance enhancements,external
Private: Added functionality to end game.,external
"Progress of each PMD action execution now displays in its own dialog box,
with a Cancel button that will stop it. Resolves Feature Request 687119.


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@1955 51baf565-9d33-0410-a72c-fc3788e3496d
",functional
"Proposed fix for bug
https://bugs.eclipse.org/bugs/show_bug.cgi?id=430704
for the httpclient3 provider

Change-Id: I0000000000000000000000000000000000000000
",bugfix
"Put all initializations of the Rental UI 'feature' in the RentalAddon,
and namely the PreferenceStore instance. The RentalUIActivator is no
more used for initialization because injection can not be used at this
level. Only Addons provide injection mechanism. Unfortunately I had to
create a static accessor method in RentalAddon to use the
PreferenceStore in the classes that are not instanciated using
ContextInjectionFactory (prefinit and NonePalette)... I will change it
later...
Last point : the preferenceStore for Rental can be injected using the
@Named(RentalUIConstants.RENTAL_UI_PREF_STORE) name.",functional
Put duplicate code in a UTIL class,code smell
"Put in support for most of the anticipated StAX functionality.
Put in tests for it too.
But...
StAX is poorly specified, does not support DocTypes properly, has loose
specifications for lots of things. Makes it very hard to do the right
thing.",functional
"QuaMeter actually stores results as separate columns.

This would make it easier to consume the data from Access/Excel.

BugzId: 3074
",bugfix
Query has lost fluid language and improved usability.,external
QuickCloud: Remove reference to unused code QuickCloud: remove some dead code in ConsoleProxyManager,code smell
REPLACED log4j2 logger with slf4j/logback REFORMATTED code to align with general code formatting guidelines REFACTORED some code with lambda expressions and some duplicate code with method or object replacements,code smell
REPLACED log4j2 logger with slf4j/logback UPDATED meta data extraction logic by refactoring duplicate code,code smell
"RESOLVED - bug 266539: [Discovery][ui] zeroconf services not being shown in ui
https://bugs.eclipse.org/bugs/show_bug.cgi?id=266539
",bugfix
"RESOLVED - bug 302433: [Discovery][Tests] Adapt remote extender bundle to new OSGi remote services
https://bugs.eclipse.org/bugs/show_bug.cgi?id=302433
",bugfix
RESOLVED - issue RF-10987: Improve GraphValidator performance  https://issues.jboss.org/browse/RF-10987,external
RESOLVED - issue SEAMSOCIAL-27: Enhance loose coupling by having more CDI bean associated to the service and less standard objects  https://issues.jboss.org/browse/SEAMSOCIAL-27,internal
"RF-11417: Made the abstract toggle panel broadcast events to active children. Immediate attribute functionality remains. Action is invoked in the necessary phase.
",functional
RHQ-1315 - subsystem view for alert definitions   implemented all functionality listed in corresponding description of JIRA; ,external
ROO-1251: Method naming conventions provided by Json addon need to be adjusted to take inheritance relationships into account,internal
ROO-2018: Roo 1.1.1 does not support inheritanceType TABLE_PER_CLASS with GWT 2.1.1,internal
ROO-2337: Post 1.1.3.RELEASE code refactor and clean up - opened up type location and removed duplicate code from GwtOperationsImpl,code smell
ROO-3353: Make GAE and GWT version properties ROO-3352: setAccetableValues(Collection collection) method is still added to EditViews when field is marked read-only in proxies. ROO-3211: Modify the inheritance chain of activities and views in order to increase flexibility. ROO-3208: setEntityPickerValues method not being added to View interface in EditActivityWrapper ROO-3204: Use existing renderers in mobile list views rather than defining new ones ROO-3179: Better organize the scaffolded views in a GWT application ROO-3178: If a user adds a field to an unmanaged edit view  do not add it to the managed edit view,internal
Re-factored limit functionality for including specific genes in fusions,external
Readability: changed populateFedoraRoles to populateFedoraAttributes and updated comments/javadocs  since the method has the effect of populating FEDORA_AUX_SUBJECT_ATTRIBUTES with fedoraRole in additional to all other subject attributes.,external
"Reassembled the ""startlistfile"" code - the pieces were in there for the most part. However  using a small startlistfile within an iterative process (other than at the very end of one) is liable to lead to inefficiency downstream with -incrementaldocvectors  as currently we depend upon there being perfect alignment between the generate docvectors.bin and the documents in the Lucene index - i.e. we will end up with many zero vectors on disk. ",external
Reduce complexity of tool framework,internal
Reduce duplicate code and code complexity,code smell
Reduce move generator complexity,internal
Reduce size of feature list in request URL,internal
Reduce size/complexity of app.js serialization (#959),internal
Reduce some duplicate code between the various HTTP providers,code smell
Reduce the size of calculation job result messages.,internal
Reduced NPath Complexity of HostAdressPicker (CheckStyle issue).,external
Reduced complexity in getIgnoredFields(),internal
Reduced coupling by extracting an interface from the StateFlowGraph,internal
Reduced duplicate code in ClientConnector.,code smell
Reduced duplicate code in CoordinatorCli.,code smell
Reduced synchronization in GenericObjectPool  GenericKeyedObjectPool.  Factory method activations within synchronized blocks were causing performance problems in DBCP and other applications where factory methods could block. ,external
Refactor GlobalTypeInfo into a data class and a separate pass.,code smell
Refactor Main test class to have higher abstraction,internal
Refactor People Project & Inheritance Projects,internal
Refactor ProcessInstanceUtil & StartProcessInstanceCmd for extensibility,external
Refactor and removal og duplicate code.,code smell
Refactor and remove duplicate code between Movies and Episodes,code smell
Refactor code for better cohesion,internal
Refactor demos for readability  better comments and configuration,external
Refactor duplicate code,code smell
Refactor duplicate code into a method.,code smell
Refactor event store benchmark and benchmark tracking performance as well,external
Refactor of XMPPChatClient for generality and simplicity,external
Refactor some duplicate code.,code smell
Refactor some of the inheritance providers.,internal
Refactor the KeyOutWriter and DailyKeyOutWriter to create a slf4j logger. Remove duplicate code from DailyKeyOutWriter. Add the ability to create a Logback based out writer with size and time based rolling and with no filename on rollover. Update slf4j to the version used by Logback.,code smell
Refactor to eliminate duplicate code between Loggers and Handlers,code smell
Refactor to improve readability of comparisons,external
Refactored Generic CertificateStore + SslUtil and CertificateDialog classes.  Updated API and removed dead code. ,code smell
Refactored Long Method,code smell
Refactored ManagementContext to  improve encapsulation - so all registrations of MBeans happen in one place,internal
"Refactored SailGraph and LinkedDataSailGraph for compatibility with manageable thread-local connections.  This should be a definitive fix to the 'danging connections' issue.
",bugfix
Refactored all operations to use OperationsParams and GenericOptionsParser. Let operations access command line arguments directly for flexibility,external
Refactored and improved performance of validator generator,external
Refactored away some duplicate code,code smell
Refactored call ordering in builder API: extracted duplicate code into method,code smell
Refactored command line argument and configuration file handling * Improved and refactored Configuration class * Added extensive unit test for Configuration class * Tried to reduce tight coupling with Main and Configuration class * addresses issues SERVER-43  SERVER-44,internal
Refactored compiler to be able to select different code generation sinks (single file vs. merged output) - Refactored compiler configuration to remove duplicate code from CLI  Ant task  Maven plug-in - extended Maven plugin to select output mode,code smell
Refactored dead code elimination,code smell
Refactored dead code elimination,code smell
Refactored duplicate code into separate method.,code smell
Refactored duplicate code into separate method.,code smell
Refactored duplicate code into separate method.,code smell
Refactored event listening  fixed group invalidation  fixed inheritance of rights from main wiki  added unit test.,internal
Refactored everything out of SenderOptionsPanel and SenderOptionsPanelController that I could  so adding new sub preferences should require no duplicate code.,code smell
Refactored gradebook data classes.,code smell
Refactored into polling and direct route selection.  Required new abstraction and inheritance.  Simplified/moved data types and utils.  ,internal
Refactored messy UI setup into named methods  renamed variables  general cleanup for readability.,external
Refactored service integration tests to use inheritance. (v1 TK-09243),internal
Refactored the FieldConverter stuff to remove a lot of duplicate code.  Created a BaseFieldConverter class.,code smell
Refactored the StringData class to simplify its most common use  which is to render a properly quoted string for use in SQL statements.,code smell
"Refactored the Thymeleaf implementation All abstract processors now contain utilities to facilitate the creation of processors Added new processors allowing to write a ""configuring div"" inside a template  just before the table tag. This div allows to configure: exports  callback  extraFile and configuration properties. Comments updated/added in almost all processors Renamed some processors for the sake of consistency Removed all processors related to export and callback (now handled by the new ""configuring div"") Removed dead code Updated integration tests with the new features and cleaned all test templates Closes dandelion/issues#161 Closes dandelion/issues#201 Closes dandelion/issues#202",code smell
"Refactored the installer to a new package.
Fixed a bug in the indexer to use OSIS names.
Fixed a bug in the English names.
Did some optimizing.


",bugfix
Refactored to prefer composition over inheritance,internal
Refactored to use a sensible MantaMetadata class.,code smell
Refactored to use annotations instead of inheritance.,internal
"Refactored, to fix broken unit test (issue with cross-package access of
package-private data).  Result is even cleaner than before.",functional
Refactored: inlined serialization filter classes to reduce complexity,internal
Refactored: made RestService protected and moved all functionality to LeanEntity.,external
Refactored: removed ConvertEntityToBytes and moved its functionality to GcAwareEntityRepository,external
Refactored: replaced BigInteger with EntityId  to solve Primitive Obsession,code smell
Refactoring  * move ASHelper methods to appropriate classes (to ensures abstraction)  * rename WS_ENDPOINTS_KEY -> JAXWS_ENDPOINTS_KEY  * getJaxwsPojos & getJaxwsEjbs should never return null collection,internal
Refactoring  translation and removing dead code,code smell
Refactoring - pushed property mgmt functionality into new superclass now shared by the report renderers,external
Refactoring of DSS and Definition  for performance,external
Refactoring of JML generation related utility functionality to promote reuse,external
Refactoring of JML test execution functionality,external
Refactoring of SlidingWindow class in RR to reduce complexity and fix important bug.,internal
Refactoring of core data classes. Implementation of RefactoringRegistry.,code smell
Refactoring of filters to make better use of inheritance hierarchy.,internal
Refactoring to remove duplicate code,code smell
Refactoring to separate Bugzilla/Github/Jira functionality,external
"Refactoring, fix cursor close, use OPLOG_REPLAY

- Move MongoClientOptions in MongoDBRiverDefinition
- Close cursor and Mongo when river is deleted or stopped
- Use QUERYOPTION_OPLOGREPLAY to improve performance
",bugfix
Refactoring: moving ExternalSensorDescriptor and MeasurementLevel to better packages  deleting dead code,code smell
Refining HttpServiceProxy abstraction.,internal
Refining HttpServiceProxy abstraction.,internal
Refs #100331 Add test for ContentName print (toString) performance.  Fix name of parse performance test.  Fix parse performace so no overflow if it gets faster.,external
"Refs #3052  #2939: Adds default ENTER and ESC key mappings to Preferences and Bookmarks dialogs. Also increases the size of the ""Filter Displayed Data"" dialog  so the title end is not cropped.",internal
"Register runWhenSmart callback with DumbService directly from LuaPsiManager constructor, avoiding StartupManager. (fixes bug #100)

--HG--
branch : idea11
",bugfix
"Regrettably replacing jarjar'd Google Collections with minimal copies of the parts that we use.

The main benefit is a (significant) reduction in size of the Guice+AOP .jar - from 1004KB to 641KB. The drawback is that it's now a lot harder to use new Google Collections features, or to keep up-to-date with Google Collections bugfixes and optimizations.



git-svn-id: https://google-guice.googlecode.com/svn/trunk@859 d779f126-a31b-0410-b53b-1d3aecad763e
",bugfix
Remove User/Item abstractions. Preference values are now floats. Lots of API changes to reflect and rationalize these changes. Replace Preference[] with PreferenceArray implementations for memory efficiency.,external
Remove dead code,code smell
Remove dead code ExaminationSolutionInitializer,code smell
Remove dead code and optimize boolean filter,code smell
Remove dead code from method visitor and method helper,code smell
Remove dead code related to Elasticsearch utilities,code smell
Remove dead code.,code smell
Remove dead code: entity delta gui code (because planning entity's cloned don't equals() true so the Set/Map gets always return null),code smell
Remove duplicate code,code smell
Remove duplicate code by making hierarchy between Indy and Basic interpreting visitors.,code smell
Remove duplicate code from between Movies and Episodes,code smell
Remove duplicate code in new metrics code,code smell
Remove duplicate code related to SNMPv1 vs SNMPv2 traps from TrapQueueProcessor,code smell
Remove duplicate code when handling PING,code smell
Remove some dead code. ------------- Created by MOE: https://github.com/google/moe MOE_MIGRATED_REVID=103318387,code smell
Remove some duplicate code from heterogeneity minor fixes,code smell
Remove uneeded abstraction,internal
Remove write functionality from Source.,external
Removed MetaData class. Lots of refactoring.,code smell
Removed a lot of duplicate code in the CommandManagers Added missing cmds. Removed useless code.,code smell
Removed abstractions - we're only supporting Bukkit API,internal
Removed complexity.,internal
Removed coupling between XT Ajax and Prototype: + Prototype-specific actions have now their proper package. + Two different directories for JS libs: core and opt.,internal
Removed dead code  more coverage,code smell
Removed dead code  moved testing target into test package,code smell
Removed dead code since DegreeCurricularPlans and StudentCurricularPlans now always have a root group.,code smell
Removed dead code.  Moved generic read and write methods to FileReader  FileWriter. ,code smell
Removed dead code. Added a bit of clarification.,code smell
Removed dead code. If we aren't needing the page name  no reason to loop around doing stuff to find it. Cleaned up javadocs a bit.,code smell
"Removed destructive ""all"" view from all ResourceProviders  added ""doNotSort"" flag when only UUID query is executed in SearchCommand  added session timeout to Jetty configuration  some other performance optimizations and code cleanup.",external
Removed duplicate code,code smell
Removed duplicate code and added outlines for how to add version to the start log entry.,code smell
Removed duplicate code and added outlines for how to add version to the start log entry.,code smell
Removed duplicate code and added outlines for how to add version to the start log entry.,code smell
Removed duplicate code and put it in a function,code smell
Removed duplicate code from FileHandle,code smell
Removed duplicate code.,code smell
Removed performance monitor as it is unneeded and didn't work  Made a Game interface for the API  Added a chat perm,external
Removed responsibility of getExportExtension to abstraction service layer,internal
Removed some dead code  implemented LinearGradientPaintFactory and RadialGradientPaintFactory in preparation for enhanced passthrough gradients  and changed lists of custom graphics to be sorted to improve the UX somewhat.,code smell
Removed the MGRast export functionality since it's just dead code. Added ISAconverter integration. Some small additions to add  but functionality is there. Improvements are just focused on UI. Closes #12,code smell
Removed the obnoxious size pair and replaced it with two ints. NEW - # 348: Provide a TileStore implementation for accessing remote WMS instances  http://tracker.deegree.org/deegree-services/ticket/348,internal
Removed unnecessary abstraction,internal
Removed: dead code; increase testing,code smell
Removes untyped App.get() method to avoid performance problems in large databases due to unsupported relationship indexing in Neo4j.,external
Removing AS2 functionality from oxalis-outbound.,external
Removing PrimitiveValueType and merging its functionality with the ValueType. The multivalue and hierarchy flags are removed and ListValueType and PathValueType are created instead. To the ListValueType and PathValueType it is possible to give as extra 'typeParams' the ValueType that should be put in the List or Path.,external
Removing duplicate code from import/export wizards. JUnits were corrected.,code smell
Removing player index to reduce complexity since I doubt its required. Decouble and nullify faction descriptions.,internal
Removing some duplicate code.,code smell
Rename ClientData class to Client,code smell
Rename MulticastMain and PerformanceMain to PerfTest and PerfTestMulti.,external
Rename Scenegraph to Scene for simplicity,external
"Rename TouchClient to SMT, TouchClient still exists as an alias

Fixes #105

This makes the name shorter, but also makes more sense given that the
TouchClient is the core class, so its methods make sense as
SMT.someMethod()

This keeps backwards compatibility of the API by defining TouchClient to
extend SMT
",bugfix
Rename directory to better reflect functionality.,external
Rename new grammar class and new complexity visitor,internal
Rename subject data classes for brevity,code smell
Renamed GraphSail property default.namespace --> default-namespace for compatibility with OrientDB. OrientGraphSailTest now passes. Other lightweight changes.,external
Renamed SingleTaskRenderingExecutor to DefaultRenderingExecutor and simplified the code. GEOT-3784: reduced coupling between JMapPane and MapLayerTable. GEOT-3746: work towards map pane with multiple backing images GEOT-3780: start of new JLayeredMapPane (not usable yet) Simplified RenderingTask class and RenderingExecutor interface. Removed renderer setter from JMapFrame (assumes StreamingRenderer instead) Removed unnecessary event constants and related methods in listeners. More unit tests.,internal
Renamed TrafficCompositionInputData to VehicleTypeInput to more closely correspond with the XML element name.,internal
Renamed performance test. Introduced AbstractModule to support more concise configuration code.,external
Renames the ComplexData classes that will be kept.,code smell
"Reorganisation of controllers codes. BookingRoomController now uses BookRoomCommand. AddBookingRoomViewParamsController uses static methods from BookRoomCommand.
Fixed little bug in JSP.
Working fine on Tomcat 7.

git-svn-id: https://svn.origo.ethz.ch/eeg-database/trunk@794 1a751040-f3c7-4aaa-98da-1e85aacc1d30
",bugfix
Repackage compatibility,external
Repackaging to remove remaining cycles and increase cohesion,internal
"Replace ""delete_selected"" flag with option menu.

It's hard to understand the meaning of the ""delete_selected"" flag, and
certainly the inverse. Change the flag to an ""operation"" menu with
options ""delete selected"" and ""delete non-selected"".

This fixes #257.
",bugfix
"Replace coordinate by index throughout the application.

This also fixes a bug in physics.grid.Grid.getGaussContraintSquared():
coor1 and coor2 have not been reset in the loop before
increasing/decreasing individual direction coordinates.
",bugfix
"Replace truth.FailureStrategy with truth.FailureMetadata in custom Subjects.

Also changed truth.SubjectFactory to truth.Subject.Factory (plain renaming) and use method reference instead of anonymous class to create the factory when applicable.

FailureMetadata, an opaque object to its users, is introduced to replace FailureStrategy in in custom Subject in order to resolve some existing flaws of FailureStrategy as well as enable new features to be added to Truth.

-------------
Created by MOE: https://github.com/google/moe
MOE_MIGRATED_REVID=171466733
",functional
"Replaced Commons Codec/IO usage with Guava

I have removed the sole usage of Commons Codec (for Base64 encoding) -
plus all remaining usage of Apache Commons IO - with equivalent
functionality provided by Google Guava.

(Note that we still need the Commons FileUpload library, which pulls in
Commons IO as a dependency. But let's not use Commons IO directly within
QTIWorks.)
",functional
Replaced uses of MetadataConstants with the new Dictionary and Metadata classes,code smell
ReplacedBlock data class,code smell
RepositoryUtil: Remove dead code found during testing,code smell
"Resolve issue #39 (sync tool extra password prompt) in release 2.4 issues list: https://wiki.duraspace.org/display/DSPINT/Release+2.4+Tasks. This was actually two problems, both are fixed here. The first problem was that the default work directory was not being set early enough in the execution (if there was not user-specified work directory), so the sync configuration files were not being placed in the work directory. The second problem was that if a password was not included as a command line value on the previous run, when trying to parse the previous config (to determine if a restart could occur) the password prompt was being displayed.

git-svn-id: https://svn.duraspace.org/duracloud/trunk@1201 1005ed41-97cd-4a8f-848c-be5b5fe45bcb
",bugfix
"Resolved issue: DIRMINA-564 - Make KeepAliveFilter to work with other IdleStatuses then READER_IDLE
* Fixed a silly bug that KeepAliveFilter doesn't use READER_IDLE status to handle ping timeout.
* Added forwardEvent property as requested

git-svn-id: https://svn.apache.org/repos/asf/mina/trunk@646263 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
Restore compatibility with 1.8,external
Restored functionality of DrugGroup. There are no related JUnit tests yet.,external
Restoring logics without size fields caching,internal
Restructuting to get file layout closer to maven standard  remove complexity of poms,internal
"Revert ""Mercurial Integration is now done with java native library hg4j. Refactoring to clean up the code and to allow easy adoption of other java native libraries in the future. Some unit tests added and classes moved to dedicated packages for better maintainability""",external
"Revert ""Revert ""[MIFOS-4052] removed original loan schedule and fees inheritance""""",internal
"Revert back to the package name ""org.kohsuke.stapler"" to avoid backward compatibility issues",external
"Reverted Node.equals() and Node.hashCode()

Back to identity (object) comparisons, as deep content inspection had
negative performance impacts and hashkey stability problems.
Functionality replaced with Node.hasSameContent().

Fixes #688
",bugfix
"Reverted some changes in CommonProxy.java
Attempting to use the new Side.Server and Side.Client checks to separate out code to fix bugs.
",bugfix
Reviewed by tlerios  Colin & Will per ENG-508 1. Added 2 new constructors to ExpectedFailure. one default and another one that accepts I18NBoundMessage. Updated all usages of the single arg constructor with a null value  to prevent compilation errors. 2. Added a mechanism to abstract out instrument specific functionality into pluggable classes. All the instrument functions in this checkin are abstracted out except for XML serialization  which requires the specific Instrument classes to be included in an annotation. 3. Added new option position APIs & option symbol <=> option root lookup APIs to the client. 4. Added pluggable mechanism to extract & insert instrument from / into FIX messages 5. Updated PositionKeyComparator to use new pluggable mechanism for position comparison 6. Updated orderloader to support options 7. Removed OptionSymbolSplitterMessageModifier & its unit test as it doesn't make sense for options any more. 8. Updated ORS to save the fields for options for position computation. Added implementations for the new client services. 9. Updated FIXConverter and RequestHandler to add a particular FIX field to the message only if it is supported for the specific message. 10. Added OptionRootUnderlyingMap abstraction to the ORS for carrying out option symbol to option root symbol mapping. 11. Fixed an issue in the suggestions view that was preventing the photon strategy perspective from opening up.,internal
"Reworking the auto-submit feature one more time. We now have a lightweight submit that only queries parameters (without doing pagination) and a normal parameter submit. 

On init, we always fire the lightweight submit, validate the parameters and if then autosubmit is reported to be enabled we fire the pagination request. Therefore we ensure that we do heavy work only if autosubmit is enabled.

The pagination controls act as auxillary submit buttons - so browsing through the pages submits the parameter content and paginates the report (same behaviour as before).
",functional
Rewrite all the possible Blocks for the If  While  For  ForEach and Switch statements. This rewriting handles modifications in the Block type from curly to non-curly ('Alternative') forms of blocks.,code smell
"Rewrite configuration system

This commit refactors almost all of the configuration section to make it more friendly for further development. In addition, files being saved without comments has been fixed.

 Emphasis has been put on retaining backwards compatibility, so most actual configuration options in flatfile have stayed the same. Minor changes are automatically upgraded.
",bugfix
"Rewrite substitution resolver, use explicit immutable ResolveSource

The immediate motivation here was to fix #177, which this does,
but in this commit a couple of existing test cases are broken
in a way which seems to relate to order of resolution and resolve
memoization. So we need to layer on to this commit better solutions
for caching and cycle detection to get rid of yet more mutable state.

The previous setup used a side-effect-based lookup table of ""replacement""
values to conceptually modify the tree without actually modifying it.
Unfortunately that setup was hacky and hard to reason about and,
apparently, broken in cases such as #177.

This new setup actually creates a modified tree and passes it
around explicitly instead of inside ResolveContext.

In this commit, ResolveContext still unfortunately has a mutable
cache and a mutable table of ""cycle markers."" Both of those
in theory could also be replaced by simply modifying the tree.

The main downside to this commit - and to cleaning up the remaining
mutable state - is that we're using Java collections which have to
be copied wholesale for every mutation (they are not persistent
functional data structures). This will have an unknown performance
impact, though in a sane world Config.resolve() is not a bottleneck in
anyone's production app.

Some other details of this commit:

 * resolve concerns removed from peekPath in AbstractConfigObject
   and relocated into ResolveSource
 * recursive resolution removed from lookupSubst and moved to
   ConfigReference
 * new hasDescendant() method used only in debug tracing,
   it is grossly inefficient to ever call this full tree
   traversal
 * new replaceChild() method is inefficient due to Java
   collections but could in theory be made efficient
 * most complexity relates to always knowing the parent of
   a node that we might have to replace, so we can walk
   up replacing it in its ancestor chain

TODO in subsequent commits:

 * fix failing test cases
 * we cannot replaceChild if we are a descendant of ConfigConcatenation,
   but we probably (?) need to be able to; consider / fix this
 * instead of memoizing resolve results in a hash table, just
   continuously modify the ResolveSource to have the most recent
   results
 * instead of using the ""cycle markers"" table, change the
   ConfigReference to a cycle detector value
",bugfix
Rewrite the ImmutableSortedMultiset implementation for improved efficiency and reduced memory consumption. From Louis: http://codereview.appspot.com/6203097/ ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=30340746,external
"Robustness improvements

Bugfix: vSphereCloudSlaveTemplate.provision method now ensures that it always disconnects from vSphere.  Previously there were some error cases where this might not happen.
Refactor: vSphereCloudSlaveTemplate.provision method now passes in the extra config parameters when the VM is initially created (instead of as a second vSphere operation).  This ensures that the meta-data (that we rely on for recognizing our own VMs) is there from the outset and hence we should now be less vulnerable to vSphere failing to power-on the VM after cloning it or to vSphere belatedly starting a VM it claimed to have failed to create.
Enhancement: If vSphereCloudSlaveTemplate.provision method failed to clone a new VM, we now attempt to delete the VM, as vSphere can partially-create a VM.
Enhancement: VSphere.cloneOrDeployVm method can (optionally) now set extra config parameters.",bugfix
"RuleReference will make a best effort to not considering the setting of the same value as an attempt to override.  StringUtil.isSame() added to compare Strings, can pass options indicating to a) trim before compare, b) ignore internal whitespace, c) ignore case.

Also added some // FUTURE comments related to Rule/RuleSet cloning.  This would be a nice feature to have.  I'm seeing various Rule copying logic in the PMD eclipse plugin which could be reduced if PMD core supported a Rule deep copy semantic via clone().

git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@5784 51baf565-9d33-0410-a72c-fc3788e3496d
",functional
SAK-1756 -- Merged sections-dev-branch into trunk.  Section Info and SectionAwareness now rely on (and decorate) the framework's generic grouping functionality.,external
SAM-2151 Allow the instructor to include extra calculations within the calculated question Also includes some cleanup and improvements to the calculated question (reduced duplicate code  etc.),code smell
SB-713:  LayoutProviders draft implementation using Path abstraction,internal
SCHEMA-37. Adds stability annotations to all classes.,external
SCRUM-285: code review: inherit -> enabled. Using InheritanceContentWrapper temporarily to be replaced with inheritance wrapper.,internal
SCRUM-500 refactored AbstractRegistry to be used with composition rather than inheritance,internal
SLE-127 Bad performance while handling Markers,external
SOAP-653: Removed duplicate code and fixed compilation errors,code smell
SOC-2371 | Avatar : Native english usability review,external
SOC-890 | Improve Code quality - avoid duplicate code,code smell
SONAR-4087 fix compatibility of Tinkerpop Blueprints with Java 5,external
SONAR-7705 remove dead code and dead sql in purge,code smell
SONARCS-601 complexity metrics for functions and classes (#99),internal
SONARDOTNT-49 Replace complexity distribution by class -> by file,internal
SONARJS-509 FunctionComplexity: ignore AMD pattern and IIFE,internal
SONARJS-729 Do not include complexity of nested functions into nesting one complexity (#309),internal
"SONARPHP-451 Add parameter for (S107) ""Functions should not have too many parameters""",code smell
SONARPHP-613 Improve ClassComplexityCheck,internal
SONARPHP-664 Correct Cyclomatic Complexity implementation (#172),internal
SONARPLUGINS-3168  SONARPLUGINS-3423 Compatibility with multi-language plugins and no more compute file hashes as it is already done by the core.,external
SPR-6093 - MVC Annotation Inheritance,internal
"SPY-128: Adding support for CAS Delete.

This changeset uses the functionality that was already there and
just exposes it to the outside. It is now possible to use delete
with CAS if needed.

Change-Id: I72652587424297b3373bf4914a5c54799ebd6179
Reviewed-on: http://review.couchbase.org/27107
Reviewed-by: Matt Ingenthron <matt@couchbase.com>
Tested-by: Michael Nitschinger <michael.nitschinger@couchbase.com>
",functional
STS-3056: introduced interface for annotation metadata classes to allow introduction of adapters,code smell
"Saving work.
Added default width/height to preferences.
Fixed ShapeStyle preference persistence.
Fixed Lane moving algorithms.
Factored out some more stuff from ModelHandler that is only used in
MoveLaneFeature.
Started adding context menu to Outline viewer.",bugfix
"Scoring API (NUTCH-240).

Development of this functionality was supported by Krugle.net. Thank you!


git-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@405967 13f79535-47bb-0310-9956-ffa450edef68
",functional
Semantin analysis decoupling Integration with prototype e4 DI integration New extension point,internal
"Separate Map Handling from Collections

Extracting all map logic and annotation from collections because
each of these have different needs and trying to use the same
structure for both is not sufficiently flexible.

This involves:
- new MapProperty annotation
- new MapProperty class to represent destination properties which are maps
- MapFieldProperty and MapMethodProperty subclasses to handle fields and methods
- Extracting logic from CollectionTranslator and putting it in new MapTranslator
- Extracting logic from CollectionTranslation tests and putting it in new MapTranslation tests.

This commit does not add new functionality to Moo, simply prepares the way for new functionality to be added.

Related to #37.
",functional
Separated C++ and C Physical Implementations to provide Andrew more flexibility. Added ICPPASTTemplateId and implementation.,external
"Serialize session internal fields in a dedicated byte array. Introduced mockito for test (seems to be nicer than jmock while providing the required features, here mocking classes not interfaces)
",functional
"Several bug fixes:
* OutputItems must have a source file, so we cannot add one for the XSD, since it does not have one source file (but many).
* files generated by ""external"" tools need to be refreshed in the VFS, so that the next compile step finds them.
* ExmlCompiler created OutputItems with source root dir instead of output root dir. After I corrected this, the workaround to add the *.as output file as ""filesToRecompile"" was no longer necessary.
Now, EXML and Jangaroo compiler plugins seem to work together smoothly!

[git-p4: depot-paths = ""//coremedia/jangaroo/"": change = 166188]
",bugfix
Short the length of the field_type in order to reduce the size of the document.,internal
Slight abstraction,internal
Slightly reduced duplicate code.,code smell
Small changes around composition over inheritance.,internal
"SnakeSettingsPanel has been updated with a cooler ui.
The layout is slightly buggy atm, but all functionality is there.
Work in progress.
",bugfix
"Some bug fixes after testing all BPMN2 Examples from OMG.
Refactored DIGenerator out of DIImport class.
Added import diagnostics reporting dialog.
Added Resource List to UserTask property page
Removed Start Quantity and Completion Quantity from Activity property
page.",bugfix
Some changes to counter store      removed dead code      fixed bug on handling display of ethtypes with MSB set      replaced counterkey string processing on every packet-in with tuple keys      removed collection of traffic type per switch-port,code smell
"Some cleanup and fixes from FindBugs report.

git-svn-id: https://svn.jboss.org/repos/hibernate/validator/trunk@17610 1b8cb986-b30d-0410-93ca-fae66ebed9b2
",bugfix
"Some halfway work on introducing hideNulls feature to toString. Aborted because it is a lot more work than anticipated, but this code is prettier and slightly more bugfree so worth checking in.
",bugfix
Some minor abstraction in SPARQLParserBase to make it easier to extend sub-query parsing,internal
"Some more changes for jBPM.
Append Node feature now aligns more with tool palette.
Fixed an oversight in DataAssociationDetailComposite.
Check for availability of connection create features.",bugfix
Some new tests added and functionality for detection of errors related to events and observers.,external
Some refactoring to lessen class dependencies  reduce number of parameters and duplicate code,code smell
"Somewhat re-wrote cities, regions and countries in
preparation of the next step.

Lots of code changes, but should not be any change in functionality.
mdr20 re-enabled, so transfer to device will not work (probably).

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/index@1806 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"Sonar fixes, Doc Fixes and Resolution for Issue #418 (#430)

* Fixing Javadoc Errors
* SonarQube Fix: Performance - Method invokes inefficient Number constructor; use static valueOf instead
* SonarQube: Security - Array is stored directly
* Fixing null pointer issues with new clone method
* Issue #418 - Fixing Topic matching for sport/# and sport

Signed-off-by: James Sutton <james.sutton@uk.ibm.com>
",bugfix
Source attribution is now consistent across all registered Problems + Various pruning of dead code and polish,code smell
Split responsabilities between CompatibilitySuite and TestContext,external
Split the loader functionality in 3 classes - now need to sort the tests out to match (not TDD  but quicker this way),external
"Split the thumbnail path-related functionality out of the thread that downloads the thumbnails, to clean up another tangle.


git-svn-id: svn://svn.jbidwatcher.com/jbidwatcher/trunk@506 b1acfa68-eb39-11db-b167-a3a8cd6b847e
",functional
Splits a long method into multiple shorter methods.,code smell
Splitting long method to load settings,code smell
Stage / InstrumentType decoupling.,internal
Standalone Atlas: NetCDF generation performance tuning  using Deque class to make sure refs to Future aren't retained.  Renamed Deque append() method to offerLast() though  so method names are identical to their equivalent in Java 6 Deque - it'll make it easier if we want to switch.  Updated context.xml and loaderContext.xml to use connection pool properties that seem to nullify the pool exhausted exception: due to maxIdle value?,external
Standarize solution and entity classes annotation inheritance behaviour + Check interfaces too. + add unit tests,internal
Start to build BWT abstractions  so we can present a reasonable facsimile of the BWT to the user no matter how it's represented on disk.,internal
Start with testing activiti 5 unit tests with activiti 6 engine for backwards compatibility,external
Started cleaning up modules - introduced a 'lang' module for shared functionality.  This might even make its way back into core - just flushing out things at the moment.,external
"Started on basic proctoring functionality

* New AssessmentProctoringService
* Can currently terminate a single or all sessions for a delivery
* Some minor preparatory tweaks to existing reporting MVC
",functional
Started refactoring Media Channels by decoupling RTP  RTCP  ICE and DTLS components from the RTP Connection,internal
Starting to remove some duplicate code,code smell
Starts decoupling from old span type; untangles ServerRequestInterceptor (#299),internal
Static utility class renamed for JUnit compatibility.,external
StewartSingularValueDecomposition: re-factor monolithic code and ugly switch statement into multiple methods,internal
StewartSingularValueDecomposition: re-factor monolithic code and ugly switch statement into multiple methods,code smell
"SubscriptionExecutionState: drop the use of Avro in favor of our DataInput/Output classes. The structure is simple enough not to use Avro, code becomes simpler and performance better. The internal structure is optimized to use two fixed size arrays instead of a map: there's no need for it to grow or shrink (set of subscriptions is known and fixed), and given that number of subscriptions is small, lookup performance should be the same or better.
This is a backwards incompatible change.


git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4835 b80d95f8-e103-0410-bd55-e03a9dc29394
",bugfix
Supplier interface and BuiltLazy class.,code smell
"Support diff/patch generation via the Github API

The Github API can generate .diff and .patch files server-side for individual
commits and ranges of commits. This feature is very useful, as it permits one
to fetch the contents of file changes without needing to download an entire
repository. See: https://developer.github.com/v3/repos/commits/.

This change adds support for these features to the CommitService.

Bug: 529255
Change-Id: I9c700f0030578299283021b8f645d052bccca3c6
Signed-off-by: Christian Barcenas <christian@cbarcenas.com>
",bugfix
Support for scale relations and checking them in coupling,internal
"Support nested documents, arrays, and values for mongo.input.key.
Make sure this functionality is consistent across the project.
",functional
Supported bound data columns and added backward compatibility.,external
"Switched to jackson, implemented sp over x

The output has been verfied for some test cases to be
exactly the same as from the old version (md5sum) however
it somehow crashes the Android client. Still need to investigate.

The conversion has also been used for some massive improvement
in the interface design of GraphAlgorithms and makes the server
a little bit faster too.

Also changed simpleSP.json to Stuttgart->Hamburg->Berlin
to test the shorttest path over another point functionality.

So long...
",functional
TEZ-444.  Rename *.new* packages back to what they should be  remove dead code from the old packages - mapreduce module (part of TEZ-398). (sseth),code smell
TEZ-558. Optionally send broadcast output in the DataMovementEvent if the size of the data is small. (sseth),internal
"TFJ-26 : added debugging feature
now user can add -Dtwitter4j.debug=true to dump request and response to the standard output

git-svn-id: http://yusuke.homeip.net/svn/twitter4j/trunk@83 117b7e0d-5933-0410-9d29-ab41bb01d86b
",functional
"TFJ-83 fixed OAuth compatibility

git-svn-id: http://yusuke.homeip.net/svn/twitter4j/trunk@215 117b7e0d-5933-0410-9d29-ab41bb01d86b
",bugfix
"Task #38:
* Replaced internals of ModuleInterpolator with new Features- and
SitesInterpolator
* Added support for ${feature.requires} property in feature.xml template
and FeatureProjectGenerator",functional
"Task #38: Finalizes Feature and Site properties generation

* Renamed property sourceClassifierLabel -> sourceFeatureLabelAppendix
* Implemented SiteProjectGeneratorTest
* Set several default property values :
** b2.includesCategoryLabelAppendix -> (included Features), (enthaltene
Features)
** b2.sourceFeatureLabelAppendix -> (Sources), (Quelldateien)
** b2.facets.doc.classifierLabel -> Documentation, Dokumentation",functional
Test the metadata class with JDO,code smell
"The ""create branch"" feature fails if ""create tag"" is selected and the
new tag location already exists.
Creating a tag is not applicable when attaching to an existing branch.",bugfix
The FieldsetPanels option and page size are now created by AbstractListForm.,internal
The lions share of work on issue #636. Checkstyle errors have gone from a count of 383 at release of 0.0.2 to 488 errors after almost all of 0.0.3 is finished  to a count of 300 errors now that a good bit of work has been done on that front. Along with that  some complexity reduction work was done. Play and Fling actions got refactored as well as the mouseWheel zooming code both in EntireGraphingPanel.java. Bugs found and fixed were a play delay int roll-over catch that didn't work in the slowDown() method of EntireGraphingPanel.java and the method getTransferDataFlavors() in GenericDataElement.java was returning a reference to the interal array instead of a copy.,internal
"The logger and class name converters now consider zero as
having special meaning, and will return the simple class name,
removing the package name prefix. This feature was asked by
Silvano Maffeis.
    
",functional
The performance enhancements may conflict with some setting methods. Uses the ActivityStackListener to clear the cache flag.,external
Thirs commit for Roller 3.1 Theme Encapsulation work ...,internal
"This change is big, and it makes Guice slower. I'll need to follow-up with some optimizations that make TypeResolver quicker.

Suppose you have a parameterized class:

class Foo<T> {
  @Inject Set<T> tees;
} 

This change makes it so that as long as you have the required dependencies, parameterized injection points will be resolved. For example:
  Injector injector = Guice.createInjector(new AbstractModule() {
    protected void configure() {
      bind(new TypeLiteral<Set<String>>() {})
          .toInstance(ImmutableSet.of(""A"", ""B"", ""C""));
      }
  });
  Foo<String> foo = injector.getInstance(new TypeLiteral<Foo<String>>() {});
  assertEquals(ImmutableSet.of(""A"", ""B"", ""C""), foo.tees);

This builds on my earlier work for TypeResolver. That class is currently pretty slow (it builds a ton of HashMaps eagerly), but it shouldn't be too hard to make it lazy - that way everything will work nice and fast if you're not leveraging this feature.

git-svn-id: https://google-guice.googlecode.com/svn/trunk@660 d779f126-a31b-0410-b53b-1d3aecad763e
",functional
This update adds additional functionality to dfr-syn in partial fulfillment of dfr-91.  Given the existence of a directory /tmp/dfr-test/ with several files in it and a locally running duracloud instance on 8080 with admin/apw credentials  files are being uploaded  and active and queue status info is being reported.,external
"This update closes https://jira.duraspace.org/browse/DURACLOUD-265 .
The update rolls back the update to the FileCopier so that hadoop services do not pull each content-item through durastore (that was creating an extreme performance bottleneck), but now uses durastore to retrieve content-item-metadata to verify that downloaded items have expected MD5s.
If the MD5 does not match, the item is redownloaded.
Also, the MD5 is passed up to the caller to use as needed.
For example, the amazonfixityservice uses this generated MD5 instead of calculating it all over again.
Additionally, this update sets the max number of hadoop instances from 20 to 19. 19 is an Amazon-defined hard cap.




git-svn-id: https://svn.duraspace.org/duracloud/trunk@190 1005ed41-97cd-4a8f-848c-be5b5fe45bcb
",bugfix
"This update mostly completes https://jira.duraspace.org/browse/DURACLOUD-594 pending minor adjustments that come up.  In the process of implementing this feature, I also reorganized the spaces manager code into more clearly defined widgets that can be easily separated into separate, more easily managed files, though that breakup has not yet happened yet.  I also took the opportunity to jettison the technique of using the hashmark as a way of making pages bookmarkable in favor of the more standard approach of using the html5 history api.  One motivation here was to make use of query parameters to specify more fine grained state of the ui, such as which detail pane is open.  Another nice feature is that back and forward buttons behave normally.  One note: there may be an issue with the storage report apis getLatestReport() method.  The latest report should be loading by default, but it does not seem to be working.  So in order to see the pie charts, you must click on one of the data points.



git-svn-id: https://svn.duraspace.org/duracloud/trunk@859 1005ed41-97cd-4a8f-848c-be5b5fe45bcb
",functional
Throwing out the Key and Value classes for now to reduce the overall complexity,internal
Tighter coupling of subscription expiry logic with other subscription management. The previous implementation could detect an expired subscription  allow another client to subscribe to it  and then stop the (now active) subscription.,internal
Tons of dead code,code smell
Tools developed for multiresolution signal processing using the available filter classes/functions. Filter classes expanded with minor additional functionality.,external
Traceability has no API,external
Translation of imports and log checkers done. Basic log fw abstractions implemented,internal
Trying to fix incompatibility of handlings png on Windows and Mac (second try),external
Turnning invoke method performance,external
Tweaks to tests  BasePerson class  common inheritance to test classes  tweaks to complex/simple type detection.,internal
"Two new features. ModLists can have a ""parent"" mod list. Circularity will
result in a crash, so be careful. Mods specified in a child will override
ones from a parent (using the maven group:name:classifier triple to identify -
ignoring the version component)

Finally, ModSide is now doable in MANIFEST.MF. If you have this, it can tell
a mod to only load on a client, or on a dedicated server (though I'd watch out
before using the dediserver one, you'll never load in integrated servers then).
The default value is BOTH, which means you'll load both sides, other values are
CLIENT and SERVER, obviously. Perhaps, also, CAULDRON might be possible?
",functional
Type converters for easy access to XDS meta data classes within routes. Adapted tests to use meta data classes.,code smell
UOM management for symbol's size in value classif for points Everything is updated  that's beautiful.,internal
UPDATED readme to reflect changes REFACTORED some methods from disk writer to the file handle class to reduce the number of objects to keep as members UPDATED the shutdown of the application as there were cases when the remaining data was not written correctly ADDED hashCode and equals methods to FlippableData class to minimize the chance of randomly appearing further elements in the flipped queue (though this sometimes still occurs for no obvious reason),code smell
"Update MongoDBJobStore.java

Multiple fixes.

Fix misfire handling such that triggers whose next fire time after misfire handling is outside of the current acquisition time are no longer returned.

Support batches.  While I don't believe that batches add any efficiency with a Mongo back end, the back end should not break if the batches are used configured.  Supporting batches requires the recursion for lock retries to work properly and remember already acquired triggers.  Code must also not attempt to acquire a trigger it has already acquired.  After all recursion done, triggers must be resorted in ascending fire time.

When rescheduling a job, which uses replaceTrigger, do not use the removeTrigger method as it will remove the job also if the job is not durable.  

Update the slf4j logging to use parametrized messages such that the use of isDebugEnabled is not required.

If there is no next fire time, remove the trigger.  It is no longer required.",bugfix
Update for Sprite class. There is much less difference from Sprite2 now. Performance is just a tiny bit better than Sprite2 on desktop and G1  and the same on Droid.,external
"Update itests in order to use ""dynamic"" version for Cellar feature

git-svn-id: https://svn.apache.org/repos/asf/karaf/cellar/trunk@1239703 13f79535-47bb-0310-9956-ffa450edef68
",functional
"Updated items sql, Fixed a onDamage bug, allowed usage of animals for /spawnmob,fixed /i bug.

Also cleaned up/reorganized some stuff to improve performance.
",bugfix
"Updated movement functions to support the new way of snake representation. Made tick() more readable by moving a lot of the functionality to own methods.
",functional
"Updated readme, Fixed admin bypass command and corresponding permissions, Swapped colors for ally and truce, added new faction permissions, improved explosion protection and implemented firespread protection, fixed painbuild check order, flags can only be changed by server admins now and implemented type adapters for some enumerations for future changes to be non breaking. That it \:D /
",functional
"Updated sample importer to exclud 2 stomp samples

(These ones don't run yet as they use features of printedVariable
that are not currently implemented.)
",functional
Updated test method names to new API of data classes,code smell
"Updated the Preferences class to use a simple properties file rather than the Java 1.4 built in Preferences functionality (didn't like the structure of the config file, properties files are easier to understand and manually edit, code looks simpler as well)
",functional
"Updated the button images.  Fixed the code for ""Check Urine Output"", ""Check Activity Level"", and ""Catecholamine"".

git-svn-id: https://ecmojo.svn.sourceforge.net/svnroot/ecmojo@100 6adee215-725e-4b28-87c1-af44a2b16021
",bugfix
"Updated the core S-RAMP repository and the associated Atom API:
* Separated the JCR provider from the core repository
* Added a s-ramp-core module to hold common s-ramp classes (type enum,
visitors, etc)
* Updated the repository interfaces
* Added several new features to the persistence layer (get single
artifact, get artifact content, etc)
* Added new Atom API endpoints (get an xsd document artifact, get xsd
document content, get feed of all xsd documents, etc)",functional
"Updated to change stream chooser to be typeahead, fixed bug with global variable usage (builds could overwrite value), added error checking and logging if cannot get server config
",bugfix
Updated to fix issues with inheritance and tree branching in querying,internal
"Updates the hadoop file processor classes to be more easily extended, in order to build on this base for further processing capabilities. Pulls all of the file transfer code into the mapper class, to allow this functionality to be more easily reused or reimplemented. Adds tests.

git-svn-id: https://svn.duraspace.org/duracloud/trunk@73 1005ed41-97cd-4a8f-848c-be5b5fe45bcb
",functional
Updates to events and session list functionality.  Started adding twitter feed for events.,external
"Updates to resolve the following branch issues:

gReview probelm - bamboo is checking out master branch #30
How to restrict bamboo to poll the changes only on a particular branch #26

You can now configure which branch to poll, master, 'All Branches', or specify a custom branch of your choice. Otherwise, you can leave the new default setting, master, and just use Bamboo's features for maintaining builds for specific branches.
",bugfix
"Updating API & Document Formatting 
API is ready to add cullers to EventDrivers but currently previous
functionality is being preserved
Output has been updated to allow for Cullers attached to EventDrivers
and for Multiple EventDrivers
",functional
"Upgrading Netty from 3.5.2 to 3.6.5 appears to have changed how netty threads behave. There doesn't seem to be a predictable pattern about how threads are created and destroyed. That's unfortunate, but I still prefer to upgrade Netty to deal with other bugfixes such as #104.
",bugfix
"Use ""media type"" rather than ""mime type"", fixes #147.


git-svn-id: svn+ssh://dev.outerthought.org/outerthought/lilyproject/trunk@4423 b80d95f8-e103-0410-bd55-e03a9dc29394
",bugfix
"Use SAX parser as main way of loading documents

This restores previous behavior of always using any configured parser
via ""xr.load.xml-reader"".  Also restores some configuration dropped
at the time (0e5408111fc08eb73e2cecc90c86fb87731496d7):

-   xr.load.configure-features
-   xr.load.validation
-   xr.load.string-interning
-   xr.load.namespaces
-   xr.load.namespace-prefixes
",functional
"Use SpellCheckedMetadata only when necessary, i.e. only when collecting
metadata from unreliable sources such as HTTP headers.

* Metadata: fix a bug where SpellCheckedMetadata would try to normalize
  metadata names during (de)serialization.

* Content: should use regular Metadata by default, and when de-serializing.

* fix HTTP protocol plugins to use SpellCheckedMetadata, where it's really
  necessary.



git-svn-id: https://svn.apache.org/repos/asf/lucene/nutch/trunk@480207 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
Use a data class for the sonic resultset,code smell
Use composition  not inheritance,internal
Use object model renderable abstraction to generate layout builders instead of templates w/ spaghetti code. Removed code generation hooks from Directive  should not be possible for directives to insert arbitrary code  as convenient as it may seem. Still not as clean as it could be.,internal
Use the 'Source' abstraction in the Parser,internal
Use the FringeTile multi-image functionality to allow different base tilesets to simultaneously fringe upon another base.,external
"Used ComponentSuiteRegistry more consequently to avoid new (empty) CSRs to be created non-intentionally. Changed API of XsdScanner to be created with a CSR instead of just an error handler (which is now contained in the CSR). Before, it was not possible to scan the XSD of the current module and re-generate a single class, because the XsdScanner would always create a new CSR. This feature is needed for the IDEA EXML Plugin.

[git-p4: depot-paths = ""//coremedia/jangaroo/"": change = 161938]
",functional
User can touch the clusterized diffs on result picture and they are fading. Need to be improve the layout and add saving functionality.,external
Uses DEV_NULL instead of SYSTEM StringLogger in many places  as well as abstractions instead of printStackTrace() and such. This greatly reduces amount of logging to the console when running kernel tests.,internal
"Using htmlunit instead of the older httpclient access.
HtmlUnit should have functionality to make automating web page access easier.
",functional
"VIM-632 Restored visual block mode that was broken due to multiple carets support

Vim actions with multiple carets in modes other than visual block are
not supported yet. It will be a separate feature. The idea behind this
commit is to fix the regression in visual block mode.

Bounds of visual selection are no longer reversed if they are
overlapped, this fixes expanding the block selection in all directions.

IdeaVim no longer uses SelectionModel.hasBlockSelection() since it
always returns 'true' now.

There are a couple of places where we remove secondary carets when
moving the primary caret or re-setting visual mode. It may be
incompatible with the forthcoming support for multi-caret Vim actions.
",bugfix
Validate/Define: One InheritanceConvention rule instead of two. Conversion included in 'open workspace process' from old workspaces to new format.,internal
Various cleanups in tosa-loader to kill dead code,code smell
Various fixes and changes: removed operations abstraction and merged with Request abstraction. Refactored Request (now ClientRequest) out of the server behaviour and added a LocalServerRequest subclass that is aware of the local server instance. The base request only operates on the CF Java client. Updated junits with further harness changes  fixing several failing test cases. Additional bug fixes  including bugs in URL domain and org and spaces lookups.,internal
Various minor fixes and performance improvement.,external
Various refactoring & renaming  and JUnit tests. Added surefire and cobertura to the maven pom. Removing dead code and adding Asserts to the mix.,code smell
WAL max size limit was restored. Free space detection bug was fixed. (cherry picked from commit b23efd9),internal
WAL max size limit was restored. Free space detection bug was fixed. Additional improvements.,internal
WELD-1784 Remove dead code,code smell
WFLY-4303 Allow expressions in jboss-ejb-client.xml remove duplicate code and allow expressions for all versions of namespace,code smell
WICKET-3730 extremely slow performance in development mode WICKET-3731 PackageResourceReference.lookupStream(IResourceStreamLocator  Locale  String  String) creates wrong PackageResourceReference.StreamInfo,external
WICKET-4028 Improve PageInstanceMapper#getCompatibilityScore() to return higher value if the request starts with 'wicket/page',external
WICKET-4802 Add functionality to be able to export DataTable content,external
WINDUP-523: Fix up some code-style issues and clean up dead code/comments,code smell
"WPT-1 Adding AJAX add and delete functionality, removing the cities.js file and related code (WPT-6), and making the portlet compatible with 3.1 jQuery namespacing (WPT-24)

git-svn-id: https://source.jasig.org/sandbox/WeatherPortlet/trunk@18728 f5dbab47-78f9-eb45-b975-e544023573eb
",functional
"Well, realized that the fragment shader can't composite or blend.  So I think this is  the closest I'll get to a decent implementation of the Duff-Porter blend functionality.",functional
"Winter Wonderland!

This commit adds several new features:

UseTemperatureForSnowHieght: By Default, all snow is 1 layer high.
When this setting is set to true, snow height is determined by biome
temperature and therefore height. For now: A block temp > -.5 yields
a single snow layer. A block temp < -.75 yields max snow layers. All
values in the range -.75 < temp < -.5 are evenly distributed. Defaults
to False. This was in the biomeConfig a couple commits back, it's a
little more user friendly when set on a per-world basis.

BetterSnowFall: By Default, snow falls on the highest block only.
Setting this to true will cause snow to fall through leaves but leave
a little snow on the way. Defaults to False

FullyFreezeLakes: By Default in cold biomes, lakes freeze but only
water exposed to sky is frozen. Setting this to true causes any lake
in a cold biome with at least one block exposed to sky to completely
freeze. Defaults to False

CooledLavaBlock: Block used as cooled or frozen lava. Set this to
OBSIDIAN for ""frozen"" lava lakes in cold biomes. Defaults to
STATIONARY_LAVA. NOTE: This has a setting in both World and Biome configs
and follows the same behavior as WaterBlock and IceBlock when using
the UseWorldWaterLevel setting.
",functional
Working on drivers for Plink's MAP and PED formats. Added a helper function to count the number of trailing newline characters at the end of a file to correctly get the number of elements. Restructured into packages. Introduced class 'Biallele' for the data types. Applied inheritance to data types to avoid duplicate variables.,internal
"Working test map with streets that test various features of the code.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@23 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
XLCLOUD-216 user creation functionality for selected account [vcms-gui],external
XRENDERING-187: Implement a Rendering Compatibility Test Suite * Add inherit for the HTML syntax * Provide safety to make the test not applicable if no parser or renderer exists for the syntax,external
XSKINX-29: Refactor duplicate code Refactor JsxAction and SsxAction. Patch from Caleb James DeLisle  applied with minor changes.,code smell
XWIKI-11460: Allow filesystem skins to indicate a base skin * better handling of cross inheritance,internal
XWIKI-4906: Includes are not taken into account when renaming a page - Fixed checkstyle warnings and refactored to minimise some of the duplicate code - Added tests,code smell
YARN-1335. Move duplicate code from FSSchedulerApp and FiCaSchedulerApp into SchedulerApplication (Sandy Ryza),code smell
YARN-2980. Move health check script related functionality to hadoop-common (Varun Saxena via aw),external
"You can now set the level definitions from the command line and choose another map-features file too.
--map-features=file
--levels=0:24,1:22,2:20  (or you can use 0=24 etc)

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@256 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"You can now set the level definitions from the command line and choose another map-features file too.
--map-features=file
--levels=0:24,1:22,2:20  (or you can use 0=24 etc)

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@257 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
"[#3481] Help link on the bottom of the page not working [#3527] Lazy init exception when viewing Cherry Pick Request [#3520] Show compound name column in the study annotation viewer [#3528] Add a total Lab Cherry Picks column to the CherryPickRequestSearchResults [#3529] Server crash on export of library images to xls format [#3511] ""Medicinal Chemist User"" Facility Usage Role should be changed to ""Medicinal Chemistry User"" [#3531] Facility User Role ""QPRC User"" is incorrect [#3510] Increase the size of the confidentiality notice on the login page [#3478] Modifications for #3478 - PropertyPathDataFetcher based Search results sort null values higher than non-null values (in PostgreSQL)",internal
[#LIB-15] Support Device Extensions by composition alternatively to inheritance,external
[1065461] readOnly configuration is editable via CLI - Fix a regression in List of Maps handling by relaxing size assumptions - on the old and new list entries. - Add equals checking for read-only Maps and Lists,internal
[1120417] Break up transaction of updatePluginConfigurationDefinition into smaller pieces Another pass here given some oracle test failures in the CI env. - Fix an issue with PropertyDefinitionSimple.removeEnumeratedValues.   An unexpected problem brought out  I guess  by the Tx reworking    must be careful not to replace hibernate proxy dealing with   orphanRemoval. - remove unnecessary REQUIRES_NEW that could lead to locking issues - remove some dead code - start shortening xxxInNewTransaction to xxxInNewTx  purely for selfish reasons.,code smell
"[377386] CHILDREN Feature is created/missing 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=377386

Serialization produces the expected empty XML element in case
features with (isMany=true, unsettable=true) that are explicitly set to
an empty collection.",bugfix
[ARQ-193] Create auxillary OSGi test bundle Add TestClass abstraction. ClassEvent uses TestClass internally Add Context parameter to DeploymentPackager Add Context parameter to ApplicationArchiveGenerator  ApplicationArchiveProcessor,internal
"[ARQ-680] Extracted DBUnit database connection creation to dedicated EventContext listener. Made @Transactional first class citizen. Tests can now use only this feature if needed.

[ARQ-680] Extracted DBUnit database connection creation to dedicated EventContext listener. Made @Transactional first class citizen. Tests can now use only this feature if needed.

[ARQ-680] Extracted DBUnit database connection creation to dedicated EventContext listener. Made @Transactional first class citizen. Tests can now use only this feature if needed.
",functional
[AS7-462] Cleanup metadata classes,code smell
"[BACKLOG-4709] - Small changes in platform to improve performance - UserSettingService    - replace keySet() + get() combination with entrySet()    - remove useless object instantiation    - remove useless explicit map.remove() - AbstractSpringPentahoObjectFactory    - add logger.isDebugEnabled()    - remove useless non-null validation - OrderedApplicationEventMulticaster    - replace ArrayList with array for faster sorting    - extract stateless Comparator to a final field to avoid useless instantiation    - replace new Integer.compareTo() with Integer.compare()    - add tests - RoleAuthorizationPolicy    - create ArrayLists of exact size - JcrRepositoryFileAclUtils    - iterate through List  not Set - DefaultPermissionConversionHelper    - replace indexOf("":"") with indexOf(':') as it is more effective - AuditConnection    - change the order: first try to obtain a connection and only then sleep",internal
"[BACKLOG-4709] - Small changes in platform to improve performance - UserSettingService    - replace keySet() + get() combination with entrySet()    - remove useless object instantiation    - remove useless explicit map.remove() - AbstractSpringPentahoObjectFactory    - add logger.isDebugEnabled()    - remove useless non-null validation - OrderedApplicationEventMulticaster    - replace ArrayList with array for faster sorting    - extract stateless Comparator to a final field to avoid useless instantiation    - replace new Integer.compareTo() with Integer.compare()    - add tests - RoleAuthorizationPolicy    - create ArrayLists of exact size - JcrRepositoryFileAclUtils    - iterate through List  not Set - DefaultPermissionConversionHelper    - replace indexOf("":"") with indexOf(':') as it is more effective - AuditConnection    - change the order: first try to obtain a connection and only then sleep",external
"[BEAM-1184] - Reprojection dialog does not remember values (""Output Parameters"") [BEAM-1183] - Improve reprojection UI usability",external
[BISERVER-7317] More test cases  javadoc and some dead code removal,code smell
[BZ 1089108] File Systems -> Free Space graph off by a factor of 1000. Refactored to a much cleaner solution with no IF logic. Removed some dead code from Measurement helper classes.,code smell
[Bleeding] Add new MaterialData classes for new blocks and update existing blocks with new data,code smell
[C#] Updated complexity distribution computation,internal
[CLEANUP] - Refactored some duplicate code and checkstyle.,code smell
[CLEANUP] - Split overly long method into smaller chunks.,code smell
[CORE] Add RANDOM functionality and more filters.,external
"[CVE-2012-2098] Integrate fallback sort into the rest, add some more tests and fix bug in bucket boundary calculation

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1340786 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
"[CXF-1500] Remove duplicate code from the tools ""Stax2DOM"" thing and move it into StaxUtils.   Allow WSDLManager to have line numbers of elements recorded into DOM that the wsdls schemas use so an error with a line number can be displayed.",code smell
[CXF-3675] Add a classloader based map of DocumentBuilder instances in DOMUtils to improve performances when building documents. This also restores the former behaviour  with the DocumentBuilder being cached in DOMUtils.,external
[DOXIA-184] make parser emit tableRows() correctly. Refactor some private methods for code readability.,external
[DROOLS-1026] improve equals/hashCode performances for all rete nodes,external
[DS-247] [DS-243] [DSB-37] extend functionality of ContextUtil so request object can be used as parameter.,external
"[FIXED HUDSON-3028] in 1.319. In a long run, I believe doing this control in the queue with ResourceController is better, because (1) scheduling one at a time can create unnecessary wait time --- say if one of the configuration needs to run on a slave that's blocked, then it's better to schedule others first, and (2) the notion of shared resources spans beyond a single job, so doing that coordination at a job level isn't general enough. That said, I think it'll be easy enough to maintain data compatibility when this happens, so I'm committing this change now.

git-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@20445 71c3de6d-444a-0410-be80-ed276b4c234a

Originally-Committed-As: ae28f88a1ff99214da66fa495e06b26032209f0d
",bugfix
"[FIXED JENKINS-23393] Skip rebase on main branch

Skip automatic rebase action when the project does not build a Subversion feature branch.",bugfix
"[HER-1636] H3: Failed get of replay char sequence due the OutOfMemoryError: Map failed (port HER-1482)
(from nlevitt's H2 commit message:)
* InMemoryReplayCharSequence.java
    new, simple ReplayCharSequence that supports any encoding, keeping everything in memory
* GenericReplayCharSequence.java
    If the encoding supports random access, memory maps the backing file directly; otherwise decodes to UTF-16 and maps that. Supports the first Integer.MAX_VALUE bytes of the file. Maps up to 64M; moves the map around as necessary for larger files.
* Latin1ByteReplayCharSequence.java
    removed, functionality split between InMemoryReplayCharSequence and GenericReplayCharSequence
* ReplayCharSequenceTest.java
    xestHugeReplayCharSequence() - uncomment to test a huge replay char sequence
    testReplayCharSequenceByteToStringOverflow() - test both UTF-8 and windows-1252
* RecordingOutputStream.java
    use the new ReplayCharSequences
",functional
[ISPN-59] (Add unit test that verifies number of written bytes) Implemented more efficient marshalling framework based on JBoss Marshaller where size of payloads are reduced and faster code path is used.,internal
"[ISSUE-#29] Create test for CommandLine

The commit also fixes some parsing issues and improves --hash
argument (class can be now specified either as file name or
as java name - it is determined automatically).
",bugfix
"[JBIDE-6828] renamed ""Open Management Console"" to ""Web Management Console""  moved duplicate code in ServerLogActionProvider & OpenManagementConsole to CommonActionProviderUtils. Made sure ""Web Management Console"" is only enabled if the server is started",code smell
"[JENKINS-22859] Don't fail revprop validation as easily

Only print an error if both of the following are false:
* Field is empty (option 'exclusion revprop' unused)
* Error is authentication failure (there's other fields for that)

The first is a bit shaky due to the global exclusion revprop feature,
but chances are you're not going to see that 'not supported' error
anyway when not explicitly using a per-project setting.
",functional
"[KARAF-1294] Improve features/repositories management and add related commands

git-svn-id: https://svn.apache.org/repos/asf/karaf/cellar/trunk@1334961 13f79535-47bb-0310-9956-ffa450edef68
",functional
"[KARAF-2251] - Cellar: features:install ignores incoming and outgoing blacklist


git-svn-id: https://svn.apache.org/repos/asf/karaf/cellar/trunk@1461350 13f79535-47bb-0310-9956-ffa450edef68
",functional
"[KARAF-4322] Improve features repository parsing to update the cluster map. Leverage support of install/uninstall flag of the features service.
",functional
[KARAF-831] Added cluster:group-pick command. Also added output suppression support for all group commands. This is really useful for command composition.,internal
"[MASSEMBLY-278] Adding parameter ignoreMissingDescriptor (default value: false) to allow reuse of a single assembly configuration throughout a multimodule build, without failing on submodules that don't contain the assembly descriptor referenced by the configuration...instead, simply don't run for these cases.

Patch submitted by: Sejal Patel
NOTE: I added two unit tests to DefaultAssemblyReaderTest to test this new functionality.


git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@628867 13f79535-47bb-0310-9956-ffa450edef68
",functional
"[MCHANGES-375] Add stop between issue text and "" Fixes issue-number""

When there is a description of the issue and it doesn't end with a period, this change adds a period so that the final text is easier to read. This closes #94.

git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1763092 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
[MCHECKSTYLE-123] refactoring to prevent duplicate codes.,code smell
"[MDEP-476] Add dependency ignores to the analyze-* targets.
    
Allow ignoring of ""declared but unused"" and ""undeclared but used""
dependencies. This is a sorely missed feature especially with
dependencies that can not be detected properly from looking at the
byte code.



git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1649454 13f79535-47bb-0310-9956-ffa450edef68
",functional
"[MGWT-229] Include Google private changes into codehaus mojo plugin
add a feature to start gwt app tru appengine sdk.
Modified code from the google sources to be able so set appengine sdk version used and to be able to use an already installed appengine-sdk.


git-svn-id: https://svn.codehaus.org/mojo/trunk/mojo/gwt-maven-plugin@13127 52ab4f32-60fc-0310-b215-8acea882cd1b
",functional
"[MJAVADOC-385] Fix documentation of <additionalDependencies> feature

Contributed by: Stephan Schroevers <stephan.schroevers@teampicnic.com>

This fixes #74.

git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@1720965 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
[MOD] ArrayList replaced with ObjList [FIX] GUI: drag'n'drop functionality fixed [MOD] local session support for JAX-RX added,external
"[MONDRIAN-2390] - Poor performance when accessing RolapSchemaPool from many threads - replace ""synchronized"" sections with ReentrantReadWriteLock-embraced - increase the amount of cycles in the concurrency test to make it more exhaustive - add one more test case",external
[MRM-1025] remove database cleanup consumers and centralise functionality in RepositoryListener Note: this commit requires that a following work item be completed to add a service for scanning metadata and cleaning up if a file is erased. Workflow will be documented first.,external
[MRM-1283] moved browseGroup() functionality over to metadata repository,external
[MRM-1551] add rest method to delete artifact. reuse service in webapp action to avoid too much duplicate code.,code smell
"[NGRINDER-28] Develop performance test module
Fixed some problem of search, sort and paging (on server side).
Server side paging is not tested yet.",bugfix
"[NGRINDER-28] Develop performance test module: test listing and editing
function 
- several fixes...
- add the script resource viewing..
- add the various test limitation..
- provide the single point of test termination..",bugfix
"[NGRINDER-86] Quick test support 
- Now quick test test script generation feature is completed.
- depending on the URL.. It can generate the folder structure.",functional
[PAXEXAM-383] Do not duplicate code for JUnit and TestNG drivers,code smell
[PAXURL-242] removed duplicate code,code smell
[PLAT-2500] Initial work on dynamic composition of market data providers,internal
[PLAT-5246] Adding support for legal entity information in calculators and curve construction. Backwards compatibility is ensured by using the short name meta data filter where necessary,external
[SHRINKWRAP-12] - Cleaned up some duplicate code from the exporter test cases,code smell
[SPARK-9453] [SQL] support records larger than page size in UnsafeShuffleExternalSorter,internal
[SSHD-82] reame listFiles() to listSshFiles() to allow implementation using FtpServer file abstraction,internal
"[SUREFIRE-141] Feature complete, including simple first version docs and javadoc.

A little fine tuning and some more docs remain before I close the issue

git-svn-id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1042820 13f79535-47bb-0310-9956-ffa450edef68
",functional
[SUREFIRE-695] Avoid duplicate code in SurefirePlugin and IntegrationTestMojo,code smell
"[SUREFIRE-743] run-level RunListener method support for junit4

Updated IT to cover 4.x and 4.7 provider feature

git-svn-id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1132744 13f79535-47bb-0310-9956-ffa450edef68
",functional
"[SUREFIRE-806] Adding parameter 'failIfNoSpecifiedTests' and separating -Dtest=... specified tests from includes, so they will not be included in every execution of the test mojo automatically. If a -Dtest=... class is not already included via the <includes/> of an execution, it will not be run in that execution. If -DfailIfNoSpecifiedTests=true and no specified tests are available in a particular execution of the plugin, the build will fail. When using -Dtest=... the plugin will now check if a value is set for -DfailIfNoSpecifiedTests, then -DfailIfNoTests, then default to fail if no specified test is present in a particular execution.

Still need integration tests for this feature, and may need a more careful examination of what happens with -Dtest using some test class that's not normally included, when there's only a single execution.


git-svn-id: https://svn.apache.org/repos/asf/maven/surefire/trunk@1232091 13f79535-47bb-0310-9956-ffa450edef68
",functional
"[Scenario] Fix bug in removal portion of repository move

Moving multiple components between repositories would
sometimes fail because getReferencingComponents may
return new versions of parent objects, which were
being used as keys to a map in the removal procedure.
Changing to track parents by ids, and maintaining the
most recently-returned version of each parent.

Additionally, clarify some variable names and fix
some logic in progress reporting.
",bugfix
"[WAGON-348] reuse http connection for ASF httpclient provider
add programmatic access to the feature : no only tru sys props

git-svn-id: https://svn.apache.org/repos/asf/maven/wagon/trunk@1161070 13f79535-47bb-0310-9956-ffa450edef68
",functional
"[WAGON-474] Upgrade and revise all tests for Jetty 8

* Upgrade all test code to Jetty 8.1.22 and Servlet 3.0
* Unify variable names in redirect usecases to realServer and
  redirectServer
* RedirectHandler: redirect code is passed but completely ignored because
  sendRedirect() always sends 302
* Chronologically sort checkHandlerResult() calls
** Set redirect code (See Other (303)) as requested
** Update checkHandlerResult() for requested status codes rather sent
   chosen by server (mismatched previously)
* testPreemptiveAuthentication*(): properly check for OK for GET and
  CREATED for PUT instead of OK only for both
* WebDavWagonTest: replace status code literal for
  HttpServletResponse.SC_* for better readability
* testRedirect*(): add more checkHandlerResults
* Fix concurrency issues/race conditions in testSecuredGet() and
  testSecuredGetToStream() where Jetty workers weren't finished yet,
  but assert() has already been started. Waiting for 2000 ms avoids
  this in a cheap manner.
* Fix potential memory leaks from open sockets and Wagons
* HugeFileDownloadTest improvements:
** Add log lines before/after the creation of the test file (4 GiB) and
   download, to measure how much time this actually takes
** Use IOUtil#copy and hand-copy file with content length to avoid too
   large buffers from Jetty's IO class
* Increase Surefire forked VM timeout to 800 s to avoid timeouts of
  HugeFileDownloadTest on Windows
",bugfix
[WFLY-405] make core-service=patching:show-history return all the history (instead of the current patching state)  modified the history format to patch-id  type  applied-at  make CliUtilsForPatching.rollbackAll() actually rollback all the ever applied patches  introduced PatchingHistory abstraction with the possibility to iterate over the patching history  added ageout-history handler which deletes history past the last active cp,internal
[WFLY-8561] fixing test for @RunAs functionality which was ported from eap5 testsuite (JBPAPP-7897),external
[XQUF] fast replace  fixed missing attribute size update for parent. still deactivated though,internal
"[bplustree] New Feature: Special version of B+Trees to hold domain objects.

  * The serialization of the backing maps is done via JSON objects, avoiding
    serialization of byte[]. This shows greater performance as well as allowing
    the trees to be portable across backends and Framework versions
  * The new tree shares the code base with the regular tree, differing only in
    the serialization.
",functional
[bs-15] Integrate audit abstraction into Spring Security setup,internal
[changed] common | feature: multi subscriptions - Connection type to MapServerConnection [added] common | feature: multi subscriptions - equals for Data [added] common | feature: multi subscriptions - new SubscribtionData class,code smell
[cleanup] Reduce fanout complexity (but still not enough),internal
[core kraken coinmate] removed additional data map from Trade  replaced it with KrakenUserTrade  added inheritance to Trade.Builders  renamed Coinmate integration test classes,internal
"[core/api]  Re-enable programmatic config with auto appName discovery

  * After commit 58e7c2740da731caa8a8f13da90c13ee3835b52a, appName discovery
    became automatic when such property was not provided in a configuration
    file.  However, that feature also disabled the ability to detect explicit
    (programmatic) configuration.  This commit reenables it.

  * Automatic discovery of the appName value occurs if any of the following is
    true:

      - there is at least (any) one property set (either via
        fenix-framework.properties, fenix-framework-<backendName>.properties
        or -Dfenixframweork.PROPERTY=)

      - the property appName is set and its value is either """" (empty string)
        or ""INFER_APP_NAME""

  * As a corollary, backends that do not require extra configuration
    properties (other than appName) and still would like to use the appName
    auto-discovery feature, MUST set appName to either """" or ""INFER_APP_NAME"".
",functional
[dsx] fixed fields for data class for getOrderStatus method,code smell
[duplicate code] Unify scheduling of merge jobs,code smell
"[feature] Command Line (no profile) Identification of OLE2 (work in progress...). Its basically working!

git-svn-id: https://wb-d-tfs2.web.local/svn/dp/trunk/droid@98 8cb85be0-0016-d946-ad3d-90027f349634
",functional
[feature] FieldNameConstants now works like Builder: Make whatever bits it does by hand and lombok fills in whatever is missing.,functional
"[feature] testStartProfileSpecPersistsJobsForEachFileInANonRecursiveDirResourceNode corrected. Was failing because win doesn't pick up hidden .svn and linux does. Modified so looks for 8 resources on windows 9 on linux. Not the most satisfactory of fixes. Need to understand behavior more in future. 



git-svn-id: https://wb-d-tfs2.web.local/svn/dp/trunk/droid@40 8cb85be0-0016-d946-ad3d-90027f349634
",bugfix
"[fixes #2011] If you have a field named `build` or `toString`, and you generate a builder, that builder wouldn’t make the build or toString methods because it thinks the builder-setter methods it just generated that so happen to have that name indicate you don’t want lombok to do that.

You really shouldn’t name any fields builder or toString, though.",bugfix
"[issue:1850] Introduced FeatureInfoDisplayRepository using Lookup facilities as a proper way of defining different FeatureInfoDisplays to different layers and servers
",functional
"[issue:1963] improved DefaultFeatureCollection's FeatureCollectionListener event handling by minimising synchronisation overhead, improved RasterDocumentFeature handling in PFeature by removing previously added rdf.BufferedImages, additionally improved rdf handling by drawing feature boundaries if feature is not rectangular
",functional
"[issue:2562] added marker interface Attachable which is implemented by PureNewFeature -> the AttachFeatureListener only considers Attachable instances now
",functional
"[travis] Added Riak service for testing purposes.
[riak] Added test unit.
[riak] Set eventual consistency as default in both README.md and riak.properties file, as strong consistency it's not the main model adopted by the db (check http://docs.basho.com/riak/kv/2.1.4/developing/app-guide/strong-consistency/ for further info).
[riak] Fixed getFields() function by transforming it into createResultHashMap(). This function creates the HashMap to give as result appropriately.
[riak] Removed scan transaction support for strong consistency model. 2i search is not allowed for this model, neither there is a suitable search mean to use to achieve a proper scan transaction.
[riak] Done minor fixes to code and comments.
",functional
accounting for changed inheritance - Renamed method to more sensible wording,internal
add of blob class with relative cluster management methods.,code smell
add pojo metadata caching  optimized sql2o performance test  underscore to camel case performance tests,external
add support for Lucene indexes configuration: directory (mmap  fs)  analyzers  stopwords  size of buffers,internal
"added Charles Lloyd's AppName extensions (in spite of some overlap with similar functionality already on the head but not the branch)


",functional
added EntityManagerImpl.persist(Collection<Object> objColl) - the main advantage over persist(Object obj) is that   a single batch mutation will be used for performance,external
"added FluentPipeline, renamed AggregatorPipe to AggregatePipe, abstracted CollectionFilterPipe and GraphElementPipe. Really setting the stage to completely migrate all functionality out of Gremlin.
",functional
"added JDBCInfo.plist feature to FrontBasePlugIn and moved JDBCInfo.plist into the jar because NSBundle doesn't exist for Entity Modeler


",functional
added Join operations to Criteria; modifications to increase JPA performance; upgraded to latest eclipselink - rjrjr,external
"added LogicOperation and MathOperation to generalize functionality in each respect class of the type. Went through and 'final'ed variables and arguments here and there. Added test cases for errors with true/false in AND/OR operations.
",functional
"added a new test for text performance
added the supported features webpage
Issue number:
Obtained from:
Submitted by:
Reviewed by:
",functional
"added abstraction level to navigation renamed ""scheduler()"" method of EntityAI to ""tick()""",internal
"added additional constructors to AbstractCassandraUnit4TestCase

These constructors simply pass the args to CassandraUnit so that you can
specify the configurationFile and host you wanna use when you subclass
AbstractCassandraUnit4TestCase.  This allows for the same functionality
whether you're using the CassandraUnit with @Rule or subclassing
AbstractCassandraUnit4TestCase",functional
added additional device and component abstractions / added device and component event listeners,internal
added algorithm to marshalling generator to guestimate a more appropriate allocation size for the StringBuilder used to construct the marshalled object.,internal
added an InstallTask abstraction so we can use it to resolve profiles / bundles or copy/change files from inside a profile,external
added codemodel switch statement for careRecordType parameter,code smell
added condition set command  cleaned up some unnecessary duplicate code,code smell
"added custom tool tips, always visible tool tips & example chart tester

Added custom tooltip feature
Added tooltips always visible option
Added ExampleChartTester
",functional
"added directory popup feature


git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@1243 51baf565-9d33-0410-a72c-fc3788e3496d
",functional
"added function putZoneOnTop(zone)

This function makes it possible to have correct behaviour of the
photo_app, and any other app where it is needed to be able to move a
zone to the top surface for proper functionality
",functional
"added initial GFF to elastic search functionality

git-svn-id: svn+ssh://svn.internal.sanger.ac.uk/repos/svn/pathsoft/psu/trunk/genlib/java/crawl@15422 ee4ac58c-ac51-4696-9907-e4b3aa274f04
",functional
added metadata abstraction,internal
"added new application-wide validation style using toValidate property of AwRequest; implemented validation, services, and fixed bugs in campaign/read feature
",bugfix
added new performance data,external
added params inheritance test for spring,internal
"added projectLocale feature to ProperterFileDescriptor

needed to read the project propertyfile options. regenerated the model +
test code and used the new feature in the load method",functional
"added replace feature for Add-Changes

git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@766455 13f79535-47bb-0310-9956-ffa450edef68
",functional
added separate states for separate downloaders to give us more flexibility,external
"added support to recognize rendezvous-based addresses in testing mode; added support for new multiple currencies features from PayPal


",functional
"added test cases for Foreach, Repeat, While statements. Added Modulo opeartion to the mix. Added test case for Modulo. Added OperateValueFunction -- op-value() (makes use of operations). Wrote test cases for some of the functionality of OperateValueFunction. Will do more later. Small tweak to GremlinScriptEngineFactory.
",functional
"adding functionality for known types and xml type decorators.


git-svn-id: https://svn.codehaus.org/enunciate/trunk/enunciate@24 c2b6a248-b21b-0410-9d80-82131e002806
",functional
"adding legend functionality

creating a new OverlayLegend class, a cleaned up version combining OverlayLegendDialog and OverlayLegendPanel.
adding automatic resizing functionality of the legend window.
adding KeyEvent Meta-L to short-cut the legend.
",functional
"adding log filtering functionality

also added filtering to the p4 sync output, so only the first 50 lines are stored, and the rest are thrown away. This should solve most of the OOM issues described by JENKINS-2142.
",functional
adding valiation to Jaxb. Replacing strings with statics. correcting the composition of the specicmeasures xml,internal
allow inheritance of @UseModules,internal
another pass of data classes  and some cleanup in client code,code smell
applied patch from Marc Portier to improve extensibility of DefaultApplicaitonWindow/LifecycleAdvisor,external
"basic clojure compiler functionality implemented

git-svn-id: http://svn.jetbrains.org/idea/Trunk/clojure-plugin@23380 59f64563-22e8-0310-8d2c-98a15e1539f2
",functional
"branch:      javabot
Most of this checkin is related to the patches from avalys, which will be added
to the patches directory.  jdom.jar was updated to Beta 10 because some classes
were moved around inside it.  docs/BUGS should have been added some time ago.
build.xml now has a buildxml (maybe that's badly named) target to build the javadoc-related XML.  docref.xml is a rather large XML file that the javadoc functionality uses.
",bugfix
bug #5154 : incorrect sender for pdc notification - taking the opportunity to fix a little problem around the footer of the mail sent by delayed notification mechanism - refactoring the inheritance of created PDC user notification classes and renaming them in order to be homogeneous with the existing ones,internal
"bug 509100 - [http servlet] performance tuning

LPS-67139 Defer toString() value calculation
LPS-69622 Dead field, never initialized, never used.
LPS-69622 Use ConcurrentHashMap rather than synchronized all methods.
LPS-69622 Use AtomicInteger to prevent lost counting.
LPS-69622 Fallback to JDK6 only api. To ensure thread safety, createContextAttributes()/destroyContextAttributes() must still have the synchronized protection, consider they are only used during application initialization/destroy, there is no runtime overhead. At least this way getContextAttributes() is synchronized free, which is the most important thing to have.
LPS-69622 Avoid using Hashtable, it just needs to be a Dictionary, delegate to ConcurrentHashMap
LPS-69880 Avoid creating HttpSessionEvent unless there is any HttpSessionListener registered
LPS-69882 Avoid duplicated path string indexing and splitting
LPS-69883 The only creation of HttpServiceRuntimeImpl in Activator.addingService() is already wrapping the serviceProperties with UMDictionaryMap, inside HttpServiceRuntimeImpl constructor, there is no need to wrap it.
LPS-69903 Shortcut as early as possible
LPS-69903 Avoid using java.util.Stack, use LinkedList instead

Signed-off-by: shuyangzhou <shuyang.zhou@liferay.com>
Signed-off-by: Matthew Tambara <matthew.tambara@liferay.com>
Signed-off-by: Raymond Auge <raymond.auge@liferay.com>
",bugfix
"bug fix in InsertionAdapter
FeatureEditingDialog now subclasses ObjectEditingDialog
bug fix in CreateParticipantFeature
remember Attributes section collapse state in Details Composite
added ""Show ID attribute"" checkbox User Preference
updated OCL validation delegate client selector to filter bpmn2 package and runtime packages
",bugfix
bugfix; 3136650; problem with inheritance mappings;,internal
bugfix; 3385226; 1953410; inheritance with more than two levels deep causes same mappings done multiple times;,internal
"bugs and minor features.


git-svn-id: https://svn.codehaus.org/enunciate/trunk/enunciate@620 c2b6a248-b21b-0410-9d80-82131e002806
",bugfix
callgraph: Remove dead code.,code smell
can now set font size for UI (in code),internal
change performance testcase  add proxool/tomcat-jdbc,external
"change the constructor and the configure methods

... since the functionality was screwed (probably tired to simplify once before)
",bugfix
changed inheritance and moved stuff to ERXComponent,internal
"changed size to averageCaseEstimate
PET uses isTopLevel instead of ""feature""
worst case estimate is editable in the feature/story editor
",functional
"changed the sort function to not sort on keys as this causes compartor issues if you have non comparable keys. in order to get previous behavior you have to sort twice--sort keys, then sort on values. Started work on tranformers for getting edge weights and excluding (or including) certain edge labels from JUNG algorithm calculations. Also, added the .gremlinrc file for Ian --- havent implemented the functionality yet, just stubbed it.
",functional
changes for readability,external
changing CreatedResources to be a Map indexed by key to make lookup easier based on creatable definition includes: - updates to all the tests and samples affected by this - tested and passing - some cleanups of the affected samples for better efficiency  simplicity and coding patterns - simplification of the CreatedResourcesImpl,external
chor(engine): change ManualActivation rule to reduce cyclomatic complexity,internal
"chore: further improve GC performance in CoreShader.

Replace all uses of prefix/argument concatenation in CoreShader with CoreLogger and/or CoreGL.checkGLError calls.

CoreLogger optimizations:
- Add setLoggingPrefix/getLoggingPrefix methods for automating a preset line prefix for a logger instance.
- Reduce varargs pollution by making use of varargs methods conditional. The varargs log methods (as well as checkGLError messages) are now overloaded with non-varargs methods, so runtime-intensive code (like the setUniform methods in CoreShader) that doesn't need to use the argument processing can log messages directly instead. This *significantly* reduces varargs pollution by eliminating needless creation of empty Object[] objects by the JVM when making simple checkGLError or other log calls to CoreGL/CoreLogger.

Update CoreGL + implementations to support overloaded checkGLError methods with no varargs.

See #17 for related discussion on this issue.
",bugfix
cleanup  delete dead code,code smell
cleanup - javadoc   improved code readability   replaced full object stub with mockito's mock,external
cleanup abstractions by pulling out State interface  implement StatefulBolt for regular topologies,internal
cleanup of Encapsulation class,internal
cleanup: move data classes to new packages,code smell
cleanup; added functionality to select on collection associated fields - rjrjr,external
"closes #218 - Exception for Stale Objects  

not clear if this commit really fixes the issue, but if not we should at
least get something in the log now",bugfix
code reorganization  moved files around to better seperate functionality,external
completed missing functionality from idmconsole example,external
continued cleanup  made tables joined inheritance and matched nullable/sizes,internal
continued cleanup  made tables joined inheritance and matched nullable/sizes,internal
convert to switch statement; added document and comment node constructors,code smell
core: Remove duplicate code in HotPlugDiskToVmCommandTest,code smell
"core: analysis version save and previous versions compatibility bug fixed.
ui: lead selection fixed,
Export names implemented for visible rows and columns,
Menu actions work.

git-svn-id: https://bg.upf.edu/svn/gitools/trunk@113 1b512f91-3386-4a98-81e7-b8836ddf8916
",bugfix
core: long method refactor,code smell
"correction: tables are aligned on 64 byte, no need to add additional 64 zeros.
This fixes gaps reported by NodCheck. 
Probably only effect is a slightly decrease of img size.

git-svn-id: http://svn.mkgmap.org.uk/mkgmap/branches/high-prec-coord@3038 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",bugfix
create ThresholdGroup abstraction to make configuration more clear -- reviewed by mhuot,internal
created new functionality to phd candidacy process to allow associate any active candidacy from student ,external
created sketch of type handling removed unnecessary abstraction reuse for declaring type,internal
ctf: remove duplicate code in array/sequence declarations,code smell
define OptionData class 2,code smell
"deleted featured list because not sufficient for laser cutter, added search list with filter input field within the search tab
",functional
did not like the fact that the method was getting big; refactored my logic to a private method to increase readability,external
"disabling the multi classloader support, since this is breaking things too much and we need more time before introducing this feature.

git-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@21356 71c3de6d-444a-0410-be80-ed276b4c234a
",functional
dynect: replace usage of UnsignedInteger with int and fixed serialized form of rdata classes,code smell
embellish DuplicateBranches detector to look at switch statements. TODO: Need to convert relative offsets to absolute offsets so that branches inside the case statement match when the target is the same.,code smell
engine: Moving Duplicate Code to Base Class,code smell
"enhance ERXArrayUtilities

G?? use interfaces as params where possible
G?? prefer methods defined in Java interfaces instead of NS-specific ones (add() vs. addObject(), G?)
G?? some performance enhancements
G?? give some methods shorter names
G?? fix Javadocs
G?? add tests
",bugfix
expaning writer abstractions  refactor packages  removed unused,internal
experiment to support inheritance during parsing of inlined entities,internal
externalized a minor duplicate code section in JestHttpClient's execute method(s).,code smell
"extracted Ide.usageInExpr() from Ide.analyzeAsExpr() which is just the functionality needed in Catch to analyze the type clause

[git-p4: depot-paths = ""//coremedia/jangaroo/"": change = 179440]
",functional
extracted createArguments() and removed duplicate code,code smell
extracted functionality removed unnecessary working directory code replaced with environment user.dir property added javadocs,external
extracting LexicalEnvironment abstraction,internal
factored out some duplicate code,code smell
"feat(repl tooling): timeouts everywhere for tooling connection

Timeouts have been added for interactions with the background REPL.
Nothing should prevent the user to type in an Editor, instead Counterclockwise
should gracefully downgrade its features. This is a step in this direction.
- code completion: 1 second timeout, and stop using after 2 timeouts
- text hover: 1 second timeout
- hyperlink detector: 1 second timeout
- repl start: 15 seconds timeout on some initialization interactions
- namespace browser: 10 seconds timeout
",functional
"feat: improve waiting for notifications by providing a timeout option (#778)

* Improves waiting for notifications by adding a timeout to the PGConnection.getNotifications() method. The change does not have any effects for users that don't use this functionality and the API remain fully backwards compatible.
",functional
"feat: replace CoreVBO with more general CoreBuffer and add missing features

(Attention: this change breaks API compatibility to previous versions)

CoreVBO was too limiting and didn't support all features. The underlying
OpenGL buffer object can be used more general for different types of buffer
targets. So instead of duplicating lots of code we generalised the CoreVBO
to the more broader usable CoreBuffer.

Additionally lots of missing buffer targets / buffer usage and buffer access
policies has been added.

An additional copy of the buffer data from the user given data to the interal
NIO buffer has been removed which would benefit performance critical
applications.

The mapping of the CoreBuffer*Type enums to actual GL constants has been
moved to the CoreGL implementation - which is a little suboptimal since it
adds (minor) additional burden to CoreGL implementations. However, it is
currently the best way since there is no lazy initialisation of the mapping
necessary anymore.
",functional
"feat: reset server-prepared statements on deallocate/discard, ability to autorollback on sqlexception from executing a query

Bug report: http://stackoverflow.com/questions/34180932/error-cached-plan-must-not-change-result-type-when-mixing-ddl-with-select-via

1) If ""DEALLOCATE"" or ""DISCARD"" command status is observed, the driver would invalidate cached statements,
and subsequent executions would go through parse, describe, etc.

This feature is enabled by deafault.

2) If fails with ""cached plan must not change result type"", then re-parse might solve the problem.
However, if there a pending transaction, then the error would kill the transaction.
For that purpose, the driver sets a savepoint before each statement.

Automatic savepoint is configured via autosave property that can take the following values:
 * conservative (default) -- rollback to savepoint only in case of ""prepared statement does not exist"" and
   ""cached plan must not change result type"". Then the driver would re-execute the statement ant it would pass through
 * never -- never set automatic safepoint. Note: in this mode statements might still fail with ""cached plan must not change result type""
   in autoCommit=FALSE mode
 * always -- always rollback to ""before statement execution"" state in case of failure. This mode prevents ""current transaction aborted"" errors.
   It is similar to psql's ON_ERROR_ROLLBACK.

The overhead of additional savepoint is like 3us (see #477).

fixes #451
closes #423
fixes #617
closes #477
",bugfix
"feature #46 - create a karaf distribution

retires the old standalone distribution in favor of a karaf 4.1.0
distribution.
Also updated the eclipse launch confgurations which still launch a
regular OSGi framework (no karaf)

closes #46",functional
feature #907 sprint5 : The user can now view all its suggestions whatever their status. For doing  the identifier of a user can be now passed to the REST web service in the getting of published suggestions. Improve the JQL query construct in JPQLQueryBuilder. Fix some discovered bugs. Clean up dead codes in JS and in JSP.,code smell
"feature(osgi-agent): Update authMode to support ""service-any"" and ""service-all""

service-any: A single Authenticator is enough to succeed
service-all: All Authenticator services need to be positive

Also, switched ""Authenticator"" from an abstract base class to an
interface. So existing code might need a recompile, not sure.
But since the security package was not exposed previously, I don't think
this is an issue.
",functional
finalized functionality and tests,external
first steps to refactor the database layout code to use class inheritance,internal
"fix backward compatibility in nuget tools management
a bit earlier installed nuget tool id format was changed, distribution package file extension (.nupkg) is not reflected in tool id anymore
as a result already installed nuget tools became inaccessible after installing new plugin version
 this change brings tool id runtime normalization (NuGet.CommandLine.2.8.6.nupkg -> NuGet.CommandLine.2.8.6)
  as a result old configurations work without converting data
finished fixing of TW-42215
",bugfix
"fix cancelTimer bug reported by Andri Redko.
now cancel timer when connection is closed
make sure timer is cancelled if there is an exception in execute
",bugfix
fix configuration abstraction for c + tests + minor fixes,internal
fix duplicate code,code smell
fix eomodeler sql gen bugs for: when you only select a single single table inheritance entity (bring in the parents and children) drop tables produces multiple entries for single table inheritance allows null is set for single table inheritance attributes that aren't inherited ,internal
"fix separate classes with methods used by Zones

This changes the SeparateClass Example and most of the functionality
used in it.

See the release_notes.txt changes for a full summary.
",bugfix
"fix some issues in the dependency report (wrong dependency versions included), and simplify

git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@405686 13f79535-47bb-0310-9956-ffa450edef68
",bugfix
fix subscription/feeding extract common database encapsulation types,internal
"fix to a bug reported by Kieran Kelleher:

""3) setText( String aValue ) should check for null (in the case of no HTML content) so that it does not try and gzip the
null value and cause a null pointer exception in ERXCompressionUtilities.gzipStringAsByteArray( ... )""


",bugfix
fix typo in PerformanceNode class name,external
"fix(#1075) set the appropriate converter per profile attribute (#1084)

* fix(#1075) set the appropriate converter per profile attribute

Compatible with the previous configuration

* update the doc

Add Features:
Set the appropriate converter per profile attribute

* Add attention information
",bugfix
fix(engine): Changed size to totalJobs in MockBuilder for Batch,internal
"fix: adjust date, hour, minute, second when rounding timestamp (#1212)

PostgreSQL supports microsecond resolution only, so PgJDBC rounds
nanoseconds to micros. When that happens the number of years, days, hours, seconds, minutes, etc
might change as well

fixes #1211
",bugfix
"fixed #231

PFeature.insertCoordinate now checks for snapped segments in
the FeatureCollection, and inserts the Coordinate in them too.

Before, this was done in the SimpleMoveListener, but not reliably
because the entity/ring/coord-indices wasn't calculate correctly.

The PFeature manages now also the Undo-Actions for AddHandle and
RemoveHandle.
",functional
"fixed Bug in \original-Replacement (if clause contains more than once
\forall, \equals, ... the clause was splittet at "";""

introduced Metaproduct-generation for method based contracting

created Fallback if no featuremodel is given
",bugfix
fixed EtcdBasedConfigurator context refresh stacktrace printing and some refactoring of duplicate code,code smell
"fixed a bug using the transition when getting the value, it was using
the currentTime incremented but that wasnt correct if using the
Transition.update, because the updated state was inside the
Transition.
changed the API of the InterpolatedProperty to use directly
Transitions instead InterpolatedValue.",bugfix
fixed bug 201861 loop in inheritance caused stack overflow.,internal
"fixed camp radius calculation
removed ecoUW wrapper for Wolf class
removed uQuest options from ecoCreature.yml
massive code renaming and reformatting for readability and my sanity",bugfix
"fixed decoding of captured data: - packets with a timestamp of 0xffffff start with 4 bytes unknown data that are not included in the header size - don't decode ""notify"" packets with a stream id as they contain stream metadata",internal
fixed inheritance recursion,internal
"fixed issue 75: Fixup of feature method name in stack trace doesn't work for base specs
fixed issue 80: Truncate stack trace below invocation of fixture method
",bugfix
"fixed security bug resulting in disclosure of token. added httpsessionlistener responsible for initializing context. tag library forcefully creates session.
",bugfix
"fixed the sorting functionality

it was screwed badly, looks and works nice now though.
tried to fix some layout problem of the HeatMapToolBar along the way. I don't like the FlowLayout at all!!!
",bugfix
fixes  refactor parser - TODO performance check,external
fixes #4568. Nearcache eviction will run again if cache size is not below under max size in first run.,internal
fixes #591 we are now a bit smarter about the size of tables that we create by default  which was the root of the time and memory consumption problems here.,internal
fixes #743 made data classes final,code smell
"fixes #88: Switch default selection color of features  from Table.selectionBackground to Cismap.featureSelectionForeground (with Table.selectionBackground as default)
",bugfix
"fixes JOO-58; new test for compiler added; integration test for recursive functions added. Yes, we know that fib can be implemented more efficiently.
",functional
fixing inheritance issues (Issue #256).  thx rrotmark,internal
"fixing the NPE that can result from cobbling together a list when its the value of a property, especially when its tagged as 'isList' -- to get the true expected behavior you need to use something that supports bnode stability in sparql, ala the ARQ <_:bnode> hack, otherwise there's no way to unroll the contents of the list because we cant get first/rest with bnodes since otherwise there's no say to say that you want the first/rest for *this* particularl bnode.  so if you are using sesame, you are really stuck not using isList, which is probably fine anyway, you at least wont get an NPE in every case.  adding short test case to verify the behavior. fixes #59
",bugfix
frontend: reduce duplicate code related to run-once capability,code smell
further refactorings to performance test components,external
"gitools-core: bugs related to MatrixFigure fixed

git-svn-id: https://bg.upf.edu/svn/gitools/trunk@464 1b512f91-3386-4a98-81e7-b8836ddf8916
",bugfix
got rid of some duplicate code in the Goal classes,code smell
"heuristics: count self-translation as half point in complex classifier word translation ratio feature; added in-vocab term/sentence rate as constraint (may change into feature); not counting numbers for the min #vector terms constraint, since it fails to discard noisy Wiki sentences
",functional
"highlight subtree & rotations

thanks to encapsulation we can keep the threads
TODO:
fixed layout
optional features for rotations
",bugfix
http://bugs.sakaiproject.org/jira/browse/SAK-11481 Removing new findResources method since it would be a huge performance problem.,external
"https://bugs.eclipse.org/bugs/show_bug.cgi?id=378265 - added support for
multiple <modelEnablement> profiles in plugin.xml and added jBPM ""full""
and ""brms"" profiles",bugfix
"https://bugs.eclipse.org/bugs/show_bug.cgi?id=383962 - started moving
EObject factory methods into ExtendedPropertiesAdapter as
ObjectDescriptor.createObject() and FeatureDescriptor.createFeature().
Also several bug fixes and enhancements in jbpm plugin",bugfix
"https://bugs.eclipse.org/bugs/show_bug.cgi?id=393034 - Fix
Operation selection
Fix NPE in Call Activity Layout
Fix NPE in Move Activity with Boundary Event
Fix various bugs in ComboObjectEditor, FeatureEditingDialog and
FeatureListObjectEditor
Enable features defined in <modelExtensions>
",bugfix
"https://issues.jboss.org/browse/RF-10239 https://issues.jboss.org/browse/RF-10187 Performance optimization: - getClientId() replaced with getClientId(FacesCoontext) - Joiner replaced with FastJoiner

Fix:
- Removed redundant 'static' modifier from RendererBase#concatClasses & RendererBase#concatStyles
",bugfix
https://jira.jboss.org/jira/browse/JBIDE-3628 - Plugins should be .jar's not directories for efficiency sake to make Plug-ins were converted to jars: jsf jsf.ui jst.web jst.web.ui jst.web.tiles jst.web.tiles.ui jst.jsp common.projecttemplates,external
implement the previous functionality  where a separate refreshChildren method gets called only for the browsed folder  and not for the parent nodes.,external
implemented functionality for send_on_all_interfaces and send_interfaces,external
"implemented path definitions. This is some very cool functionality to allow you to define your own path relationships. Once people agree to the syntax conventions, I will add a section of documentation on this new construct---you will think its cool---cause it is.
",functional
implemented registry and unregistry of apns api  also started implementing the send to device functionality (#14),external
"implements JOO-53
Support default value of config property declared in EXML
http://jangaroo.myjetbrains.com/youtrack/issue/JOO-53

Implements the feature as described in the ticket, including
unit tests of all mentioned scenarios.
This updates the EXML schema exml.xsd (in a compatible way,
so no new version) and provides some new constants in
net.jangaroo.exml.api.Exmlc to be used by the IDEA plugin.
",functional
"implements JOO-87
Allow to specify value of <exml:var> and <exml:constant> in a sub-element
http://jangaroo.myjetbrains.com/youtrack/issue/JOO-87

This changes EXML's XSD to allow <exml:value> inside <exml:var> and <exml:constant>,
and to use any mixed content inside <exml:value>.
The value attribute of <exml:var> and <exml:constant> is no longer required, since it
has to be left out when using the sub-element.
Since this is a backwards-compatible change, the XSD URI does not change.

Note that nesting EXML elements in <exml:value> is currently only supported for <exml:var>,
not <exml:constant>. This is because the code that specifies the constant value is generated into
the config class, but we can only generate code from EXML elements into the target class.
Also, we do not see a use case where defining a constant value by EXML would be needed.

IDEA support for this new feature will be provided by an upcoming plugin update.
",functional
improve logging to capture some simple rules and thresholds to indicate performance issues,external
improve mysql sql parser performance,external
improve performance of type qualifier analysis shrink debugging output for type qualifier analysis,external
improve test coverage of ParseableQuery and LuxQueryParser; removed some dead code,code smell
improved digits parse performance,external
"improved performance of MainMemory#getRegion() ; probably squashed a lot of sign-extension bugs
by making OperandDesc constructor always zero-out the upper 16 bit, fixed an issue in SourceCodeView#getVisibleTextRegion()
that sometimes would cause the whole file to be highlighted at once, resulting in UI responsiveness issues
",bugfix
improved performance of builder by removing child injector,external
improved programs for getting size of read bytes,internal
"improved support for Contributors. added MessagingTargetFactory plus
implementation. also added support for FileGraph persistence mechanism.
split some of the EndpointServlet functionality into EndpointFilter.",functional
improved the performance of Bytecode and ConstPool.  Added clone() to Bytecode.,external
"improved type/name inference for Mock() and thrown() (now works not just for variable declarations, but also for variable assignments)
mock framework improvements: IMockInvocation now reveals mocked type, IMockInvocation now accessible through result generator (unofficial feature), improved toString() output for mock objects
",functional
improving performance  especially around FK metadata reading,external
increasing default index page size to 100; default counter page size to 1000,internal
inheritance for make life easier during navigation tests,internal
inheritance of namespace declarations for nested bundles,internal
initial attempt for abstraction; druid cluster works with Derby as a default,internal
initial take on the new enunciate engine run() functionality,external
"initialize each artifact with all features, independent of whether code files for the artifact are available; otherwise FSTGenMerger may fail with an error ""invalid number of arguments"" (not enough features to merge/compose)
",functional
introduced adjuncts from stapler - fixed the feature envy problem in the version computation,code smell
introduced the Graph class to improve the OO-ness of the model classes. This should also improve testability a bit.,external
introduction of relative_v0_randomization attribute in TRAFFIC_COMPOSITION for distributing the desired speed randomly. CAs are casted to integer. ,internal
"introduction of vehicle container LIST for multi-lane traffic. 
!!! quick hack for initial conditions and spatiotemporal output for
being compatible with one-lane features !!!",functional
kie-services-client: Cleaning up duplicate code and packaging,code smell
major overhaul of the JavaDoc mechanism to support JavaDoc inheritance,internal
major reimplementation of list and combobox binding dynamic filter and dynamic sorting is now fully supported through java.util.Observable. selectableItemsHolder replaced with selectableItems property to support any selectable collection type like ListModel  Collection  List  ValueModel (containing a collection type)  Object[] or Object (single selectable element) reduced complexity of ListBinder/ListBinding. Collection type for selected items is now determined from propertyType including single selection and multiple selection ListBinder and ComboBoxBinder now supports the definition of preset values for selectableItems  filter  comparator  editor (only ComboBox) and renderer to support further customizing ,internal
major restructuring on the way to good separation of functionality,external
"major rule datatype overhaul

I completely rewrote the internals of rule to make it easier to use with
Chris Dyer's dotted-item extraction scheme. Also, we should have some
idea after profiling, but I think that it should take up less space with
the rewrite. Also, it's a hell of a lot easier to understand.

Also changed the feature functions to reflect this, since they look at
rule internals. Also made a first attempt at writing the extraction
logic.
",functional
make performance meter factory configurable through .options,external
make static methods to attempt to decouple inheritance,internal
"many bugfixes around datatype handling:
- fix querying for literal values when BIT or INTERVAL columns are present
- add d2rq:bitColumn, d2rq:intervalColumn
- make BIT work on all databases that support it (hopefully)
- make NaN and INF actually work in DOUBLE columns in HSQLDB (sort of)
- fix several exceptions when querying for typed literals outside of the SQL type's range
- fix querying for large integer literals
",bugfix
"menu contains all the menu items from the precusor GUI

add ""Hide most frequent overlay"" option to the view menu
add ""Outlier Handling"" option to the view menu
change JMenuItems into JRadioButtonMenuItems when necessairy for the functionality
add ActionListeners to those menu items where they were still missning, plus the skeleton of the ""performer"" methods.
",functional
minor refactoring to remove duplicate code,code smell
more abstraction in scheduler,internal
more code cleanup  exporter is now even simpler due to composition,internal
more inheritance testing,internal
more refactoring towards a cassandra abstraction,internal
more rep functionality  fixes for mandelbrot,external
move MAVEN_METADATA_XML constant to MavenMetadata class,code smell
move compatibility checker exception for making it compatible with exomiser!,external
move directories for maven compatibility; also formatting,external
move duplicate code to common method loadEntryWithCacheHints(),code smell
move old composition stuff away,internal
move some duplicate code in a common place,code smell
moved citizens compatibility classes into QuesterNpcs,external
moved java metadata classes to a separate package,code smell
moves default response functionality to AbstractMockOperation - removes listener call no one listens to,external
moving compatibility tests to another project so they can be shared,external
new control  remove duplicate code,code smell
"new feature for REST payloads, actionscript type bug fix, and petclinic update 


git-svn-id: https://svn.codehaus.org/enunciate/trunk/enunciate@305 c2b6a248-b21b-0410-9d80-82131e002806
",bugfix
"new functionality: save and load decorators / scales

git-svn-id: https://bg.upf.edu/svn/gitools/desktop/trunk@1735 1b512f91-3386-4a98-81e7-b8836ddf8916
",functional
"newtools: moved callgraph dump methods to common, added target-method callgraph dump option to wcet tool, bugfixes for bytecode size calculation
",functional
"node generator now supports addition of COPYRIGHT, LICENSE, and DESCRIPTION information
improved abstraction of the different plugins, features, and fragments
",functional
o Added another test to exhibit inheritance issue o Removed task tags for resolved issues,internal
"o Clean up java code
o Synchronize features between PaxAuthenticatedWebApplication and PaxWebApplication
o Fix bug on #removeService of BundleDelegatingClassResolver
  where when a bundle is stopped , the pax-wicket bundle is not included to list of bundles to try.
o Reviewed David's code on PageMounterTracker
  o Fix bug where it doesn't track PageMounter based on wicket application name.
  o Fix bug on #removedService, where instead it remove the service, the code is calling 
    super.addingService
o Note: This is force commit. Going to office to further test.


git-svn-id: https://scm.ops4j.org/repos/ops4j/projects/pax/wicket@11898 9b982a3c-3ae5-0310-a4bc-d9a3335569bd
",bugfix
"o Finished MNG-632.
  Note: I'm not sure wheter my tmpDir approach is the best.
  It's certain to work all the time (depending on FileUtils.createTempFile),
  but it may leave a lot of 'garbage' in target/.

o Updated maven-core's assembly descriptor to make use
  of new line endings functionality.


git-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk/maven-plugins@267344 13f79535-47bb-0310-9956-ffa450edef68
",functional
"o Pulled-up AnalyzeMojo functionality into AbstractAnalyzeMojo to allow different Plexus annotations to be specified on subclasses
o Changed AnalyzeMojo to @execute phase=""test-compile"" for standalone functionality
o Added AnalyzeAttachedMojo to @phase verify for participating in the build lifecycle
o Improved Javadoc

git-svn-id: https://svn.apache.org/repos/asf/maven/plugins/trunk@576809 13f79535-47bb-0310-9956-ffa450edef68
",functional
o Refactored API to move from tree to graph  thereby allowing to fix CPU/memory performance,external
o Strengthened IT to check deeper inheritance hierarchy,internal
oprofile/perf: Remove dead code.,code smell
"optimizations, export improvements, bugfixes for new functionality

git-svn-id: https://pmd.svn.sourceforge.net/svnroot/pmd/trunk@7583 51baf565-9d33-0410-a72c-fc3788e3496d
",bugfix
performance enhance,external
performance improved version of VirtualBandOp,external
"phrasal probability feature

This necessitated a fair amount of rewriting so that we can consider the
source- and target-side yields of a rule separately. Also, the features
have slightly better names now too. And I've finally given up on
memoizing the yield calculations, because they keep making mistakes.
",functional
pmd: duplicate code: refactor to minimize dupe code,code smell
prevent too much duplicate code beetween Maven2 and Maven3 ProcessFactory,code smell
push rarely-used repositoryService injection down inheritance tree,internal
reactoring classes coupling and dependencies in NPM,internal
recognize switch statements that have exhaustive labels for an enum,code smell
reducing complexity by introducing intermediary abstraction (removing reference to RestClient from commands),internal
reducing complexity by refactoring,internal
reducing the test set size 10x for speed,internal
"ref #90 : Project specific rights 
backend-wise the feature is implemented.
Components can participate by implementing @RestrictedComponent@ and
returning the permission string that is required to access the component",functional
ref: removed duplicate code and useless inner class fix: fixed stateless test,code smell
refactor  add metadata class,code smell
refactor  fixes  performance upgrades deleted feedback factor,external
refactor (move duplicate code up),code smell
refactor discovery to use the new Pinger; remove a bunch of pointless/dead code and threads... yay!,code smell
refactor discovery to use the new Pinger; remove a bunch of pointless/dead code and threads... yay!,code smell
refactor duplicate code,code smell
refactor duplicate code for playing lands from grave,code smell
refactor move rename trade metadata classes,code smell
refactor some duplicate code,code smell
refactor to prepare performance improvements,external
refactored PageData class to now be WeblogTemplate ,code smell
"refactored all the Gremlin function library graph functions. Much cleaner and more organized. Will refactor other functions with my new pattern next. Added test cases for most of the Gremlin function library graph functions. Found some bugs, fixed them. Work great. Solidified on an Index model --- note the new function idx-all(). Next up is reindex.
",bugfix
refactored away some duplicate code,code smell
refactored cycle API  added RenderInfo to provide standard set of available views for plug-ins  changed the content-type definition by using a mixin interface to add extensibility to the set of standard content-types  refactored API according to these changes  adapted the UI/REST component accordingly,external
refactored duplicate code,code smell
refactored to remove duplicate code.,code smell
refactoring for better readability,external
refactoring long method hadleException,code smell
refactoring methods to reduce complexity,internal
refactoring of Abstract*DataSet to delete duplicate code,code smell
refactoring to improve extensibility,external
"refactoring: XFormsProcessor.getXForms now returns Document instead of Node
refactoring: setupTransformer method now takes a URI as argument
feature: it's possible again to specify a xslt on the root node of a XForms document for easier extensibility
fix: ResourceServlet did not know the application/xml+xslt mimetype - in addition it now checks for the availability of a mime type in web.xml
fix: Error messages in ResourceServlet have been improved
",bugfix
releng: Make use of Tycho POM-less functionality,external
remove @JsonIgnore  remove inheritance of KillBillObject (auditLogs) and refactor worng property names for json building,internal
remove dead code,code smell
remove dead code,code smell
"remove derived values from db, query instead

there are derived values stored in the database from datafile and
project entities: the detection data range, detection count, and
bounding box. these are set following data file uploads. but they are
not updated in response to datafile deletion and don't take into account
detections that are 'deleted' through the data cleansing feature.
remove these fields and query information when required.

this may lead to degraded performance, particularly on the front page
where we have to query for the detection date and bounding box of each
project; however, we can fix this issue later where it's material.
",bugfix
remove duplicate code in MetadataApiControllerTest,code smell
remove inheritance in tables since inheritance strategy joined creates extra tables,internal
"removed ErrorInfo.runStatus and SkipSpecOrFeatureException because noone was using them anymore
fixed MasterRunListener bug (IterationInfo wasn't passed on to listeners)
stack trace is now filtered before ""regular"" listeners get to see it
",bugfix
removed PerformanceStats since we've moved from a loopbased to an event based system Fixed mobs falling through the floor on 'in npc'  Fix hp bug Cleaned up a lot of legacy movement handling and moved them to the session system.,external
removed ambiguous relations finder since its functionality overlaps with the SKOS S27 integrity condition already checked by SkosReferenceIntegrityChecker,external
removed dead code and some bugs were fixed,code smell
removed dead code moved code about specific elements to the layout factory (link and br) fixed form rendering bug,code smell
removed dead code of fee calculation,code smell
removed duplicate code  decrment jar size,code smell
removed duplicate code by adding a public getPropertiesFile method to obtain the File,code smell
removed duplicate code by adding a public getPropertiesFile method to obtain the File,code smell
removed some dead code,code smell
removing dead code,code smell
removing dead code,code smell
rename and remove dead code,code smell
rename appData to applicationData - rename appId to id - move applicationData class to internal package,code smell
rename parameters for readability,external
rename the TcmSearchData class to TcmInferSearchData class,code smell
renamed Crew and Squad classes  handles Squads now  moved String configs to UpdateMapData class,code smell
"renamed GremlinEngine and GremlinEngineFactory to GremlinScriptEngine and GremlinScriptEngineFactory to be in style with how other Java 1.6 script engines are named. I found a bug in the engine's handling of bindings and fixed it -- wrote a test case to validate its fixed. Will write documentation on using Gremlin through Java now.
",bugfix
reorganized test classes to separate expensive syntax/parsing tests from functionality tests fixed Rascal JUnit runner test reporting removed dead code,code smell
repackaged integration tests into non-specific web package for simplicity and removed AbstractTest since it is not used,external
replaced jersey w/Uris & UriTemplates; removed complexity in url encoding and edge cases like matrix params,internal
reporting module: added automatic deleting of reports after a configurable number of hours. added UI to build CompositionCohortDefinition.  added UI shortcuts for creation of common parameters added UI to re-run a historic report with a new format,internal
revamped inheritance lookup,internal
reverting d99cec54  still maintain Jdk6 compatibility,external
reworked groups (again!); now inheritance works,internal
reworked metadata classes,code smell
"routable_types_v6.patch :
- add option --check-styles which works like --list-styles but performs additional checks to flag potential routing problems
- replace ""check-connected"" feature with ""mkgmap:set_unconnected_type"" feature to allow adding unconnected roads as normal lines with an alternative type or to ignore them
- issue a warning when a routable map contains lines with routable types that are not roads (= have neither road_class not road_speed set in the style)


git-svn-id: http://svn.mkgmap.org.uk/mkgmap/trunk@2573 25d90789-57f7-4ee0-8453-03a3dfeeeb22
",functional
separate benchmarks from correctness tests which are now part of a junit test suite integrated into the build system,external
seperated functionality to make the update procedure easier to understand,external
seperated functionality to make the update procedure easier to understand,external
simplify and remove duplicate code,code smell
simplify impl inheritance,internal
slight cleanup  reformatting for better readability,external
solr components working again  removing dead code,code smell
started refactoring ResourceNameIterator and ResourceStream to make the locale  style etc. available for which the resource was found. Will eventually allow to remove duplicate code e.g. in PackageResource.,code smell
synchronize the performance optimize from 2.2.1 to main branch,external
"system disk placement feature

discard the design of --image on datastore add cmd. Replace it with dsNames4Data and
dsNames4System in StorageRead to control system disk placement
",functional
systemtap: Remove dead code all around.,code smell
test the default case on the switch statement in tokenComments,code smell
the processOccurence method is splitted into two for better modularity.,external
tightened implementation of the abstraction of the graph configuration.,internal
topic: code enhanced type: functionality module: other description: MDEditor - switched to dictionaries  updated export,external
topic: code enhanced type: functionality module: other description: mdEditor - ongoing: support of referenced groups,external
trying to make twidere work with identi.ca #235 improved L compatibility,external
"two bugfixes: incorrect metadata when a campaign belonged to more than one class and incorrect output when the campaign_urn was provided
",bugfix
"ui: Show all rows/columns action, MtcAction, ShowRowsByName, SortSelectedColumnsAction implemented. Show correction option works. OpenAnalysisAction implemented with TableView. Some bugs fixed.

git-svn-id: https://bg.upf.edu/svn/gitools/trunk@139 1b512f91-3386-4a98-81e7-b8836ddf8916
",bugfix
undid generic DocumentAccessor due to unnecessary complexity,internal
update web-core:com.silverpeas.sharing package - Update NodeAccessControl in order to make CDI works - Update JPA model for subclass Entity inheritance purpose,internal
"updated CHANGELOG with recent features. Added more test cases for GPath as pointer for assignment. Added a test case to SetFunctionTest to ensure that its behaving 'set like.' Found a small optimization for DeuplicateFunction and UnionFunction.
",functional
"updates for CDM timeseriesprofile, currently working on profile.

code is fragmented, in the baseSOS class to separate/handle/identify different feature types

see getCaps for uptodate tests
",functional
"upgrade to httpclient 4.1:
- code compiles and works at least basically but still needs testing of certain features
- dependencies updated in properties and poms
- API updated
",functional
use AWT toolkit to read images instead of ImageIO for better performance,external
use File creation date for better accuracy,external
use person POJO for reflection performance showcase,external
v0.87 fixed bugs  added compatibility with Mean Admins  added command alias /mobarena  bigger auto-generated arena,external
"vi:All delete-to,change-to,yank-to operations added

This adds almost all of the missing vi features
- Delete-to (e.g. dw == del word, dd == del line)
- Change-to (e.g. cw == chg word, cc == chg line)
- Yank-to (e.g. yw == yank word, yy == yank line)
- Put (to put the yanked test)
- Replace char (""r"". e.g. ""r."" replaces the current
  char with ""."")
- Char search (""f"",""F"",""t"",""T"","";"",and "","")
  including combinations of delete/change/yank-to
  (e.g. 10dfX will delete to the ""X"" character 10
  times). This also includes the rather complex
  behavior of "";"" and "","" with regard to reversing
  the search direction.
- Lots of new unit tests for the above.  I still
  have some work to do to cover the combinations of
  the *-to operations.
",functional
"wcet/frontend:
 - Improve handling of dead/stuck code due to exceptions
 - Fix handling of exceptions (exceptions edges are currently NOT added to the control flow graph)
 - Fix a bug in graphutils/dominator
",bugfix
webadmin: Edit/Remove Template & VM abstraction (#748413),internal
webadmin: add disk - cleanup and duplicate code removal,code smell
work on composition for indexing,internal
"working lexprob feature

This does not depend on re-getmerging the word level probability files.
Instead, those files are read directly from the job's filesystem.
",functional
"working on #339: introducing the getSpecialFeatureCollection Method as a more general way to get all the PrintTemplateFeatures. improve the numbering
",functional
"working on #339: next step. i

move all the calculation and handling into the PrintTemplateFeature to handle
multiple templateprinting.

The creation is still very basic though
",functional
"working on #369: generalized the adjustMapForPrintingTemplates and ensureVisibilityOfPrintingTemplates method to adjustMapForSpecialFeatureClasses and ensureVisibilityOfSpecialFeatures
",functional
working up test coverage; minor tweaks; removing dead code; fixing very minor bugs; adding tests,code smell
– changed render routine for text fields – added tabbing abilities to CustomScreen – various modifications on CustomScreen to match the new TextField requirements – changed size of PacketSky,internal
